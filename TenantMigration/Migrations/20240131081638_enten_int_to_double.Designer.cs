// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PostgreDataContext;

#nullable disable

namespace TenantMigration.Migrations
{
    [DbContext(typeof(TenantDataContext))]
    [Migration("20240131081638_enten_int_to_double")]
    partial class enteninttodouble
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Emr.DatabaseEntity.KacodeReceYousiki", b =>
                {
                    b.Property<string>("ReceKaCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("rece_ka_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("YousikiKaCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("yousiki_ka_cd")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("ReceKaCd", "YousikiKaCd");

                    b.ToTable("kacode_rece_yousiki");
                });

            modelBuilder.Entity("Emr.DatabaseEntity.KacodeYousikiMst", b =>
                {
                    b.Property<string>("YousikiKaCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("yousiki_ka_cd")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<string>("KaName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("ka_name");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("YousikiKaCd");

                    b.ToTable("kacode_yousiki_mst");
                });

            modelBuilder.Entity("Entity.Tenant.AccountingFormMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("FormNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("form_no")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FormNo"));

                    b.Property<int>("Base")
                        .HasColumnType("integer")
                        .HasColumnName("base");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("Form")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("form");

                    b.Property<string>("FormName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("form_name");

                    b.Property<int>("FormType")
                        .HasColumnType("integer")
                        .HasColumnName("form_type");

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_kbn");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("MiseisanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("miseisan_kbn");

                    b.Property<int>("MisyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("misyu_kbn");

                    b.Property<int>("PrintSort")
                        .HasColumnType("integer")
                        .HasColumnName("print_sort");

                    b.Property<int>("SaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sai_kbn");

                    b.Property<int>("SeikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("seikyu_kbn");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "FormNo");

                    b.ToTable("accounting_form_mst");
                });

            modelBuilder.Entity("Entity.Tenant.ApprovalInf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id", "HpId", "RaiinNo");

                    b.ToTable("approval_inf");
                });

            modelBuilder.Entity("Entity.Tenant.AuditTrailLog", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("log_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("LogId"));

                    b.Property<string>("EventCd")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("event_cd");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("log_date");

                    b.Property<string>("Machine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("machine");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    b.Property<int>("SinDay")
                        .HasColumnType("integer")
                        .HasColumnName("sin_day");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("LogId");

                    b.ToTable("audit_trail_log");
                });

            modelBuilder.Entity("Entity.Tenant.AuditTrailLogDetail", b =>
                {
                    b.Property<long>("LogId")
                        .HasColumnType("bigint")
                        .HasColumnName("log_id")
                        .HasColumnOrder(1);

                    b.Property<string>("Hosoku")
                        .HasColumnType("text")
                        .HasColumnName("hosoku");

                    b.HasKey("LogId");

                    b.ToTable("audit_trail_log_detail");
                });

            modelBuilder.Entity("Entity.Tenant.AutoSanteiMst", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id", "HpId", "ItemCd");

                    b.ToTable("auto_santei_mst");
                });

            modelBuilder.Entity("Entity.Tenant.BackupReq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("FromDate")
                        .HasColumnType("integer")
                        .HasColumnName("from_date");

                    b.Property<int>("OutputType")
                        .HasColumnType("integer")
                        .HasColumnName("output_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("ToDate")
                        .HasColumnType("integer")
                        .HasColumnName("to_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id");

                    b.ToTable("backup_req");
                });

            modelBuilder.Entity("Entity.Tenant.BuiOdrByomeiMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("BuiId")
                        .HasColumnType("integer")
                        .HasColumnName("bui_id")
                        .HasColumnOrder(2);

                    b.Property<string>("ByomeiBui")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("byomei_bui")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "BuiId", "ByomeiBui");

                    b.ToTable("bui_odr_byomei_mst");
                });

            modelBuilder.Entity("Entity.Tenant.BuiOdrItemByomeiMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(2);

                    b.Property<string>("ByomeiBui")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("byomei_bui")
                        .HasColumnOrder(3);

                    b.Property<int>("BothKbn")
                        .HasColumnType("integer")
                        .HasColumnName("both_kbn");

                    b.Property<int>("LrKbn")
                        .HasColumnType("integer")
                        .HasColumnName("lr_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "ItemCd", "ByomeiBui");

                    b.ToTable("bui_odr_item_byomei_mst");
                });

            modelBuilder.Entity("Entity.Tenant.BuiOdrItemMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "ItemCd");

                    b.ToTable("bui_odr_item_mst");
                });

            modelBuilder.Entity("Entity.Tenant.BuiOdrMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("BuiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("bui_id")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BuiId"));

                    b.Property<int>("BothKbn")
                        .HasColumnType("integer")
                        .HasColumnName("both_kbn");

                    b.Property<int>("Koui30")
                        .HasColumnType("integer")
                        .HasColumnName("koui_30");

                    b.Property<int>("Koui40")
                        .HasColumnType("integer")
                        .HasColumnName("koui_40");

                    b.Property<int>("Koui50")
                        .HasColumnType("integer")
                        .HasColumnName("koui_50");

                    b.Property<int>("Koui60")
                        .HasColumnType("integer")
                        .HasColumnName("koui_60");

                    b.Property<int>("Koui70")
                        .HasColumnType("integer")
                        .HasColumnName("koui_70");

                    b.Property<int>("Koui80")
                        .HasColumnType("integer")
                        .HasColumnName("koui_80");

                    b.Property<int>("LrKbn")
                        .HasColumnType("integer")
                        .HasColumnName("lr_kbn");

                    b.Property<int>("MustLrKbn")
                        .HasColumnType("integer")
                        .HasColumnName("must_lr_kbn");

                    b.Property<string>("OdrBui")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("odr_bui");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "BuiId");

                    b.ToTable("bui_odr_mst");
                });

            modelBuilder.Entity("Entity.Tenant.ByomeiMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("byomei_cd")
                        .HasColumnOrder(2);

                    b.Property<string>("Byomei")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("byomei");

                    b.Property<string>("ByomeiKanri")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("byomei_kanri");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("DelDate")
                        .HasColumnType("integer")
                        .HasColumnName("del_date");

                    b.Property<int>("HokenGai")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_gai");

                    b.Property<string>("Icd101")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("icd10_1");

                    b.Property<string>("Icd1012013")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("icd10_1_2013");

                    b.Property<string>("Icd102")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("icd10_2");

                    b.Property<string>("Icd1022013")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("icd10_2_2013");

                    b.Property<string>("IkoCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("iko_cd");

                    b.Property<int>("IsAdopted")
                        .HasColumnType("integer")
                        .HasColumnName("is_adopted");

                    b.Property<string>("KanaName1")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("kana_name1");

                    b.Property<string>("KanaName2")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("kana_name2");

                    b.Property<string>("KanaName3")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("kana_name3");

                    b.Property<string>("KanaName4")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("kana_name4");

                    b.Property<string>("KanaName5")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("kana_name5");

                    b.Property<string>("KanaName6")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("kana_name6");

                    b.Property<string>("KanaName7")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("kana_name7");

                    b.Property<string>("KoukanCd")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("koukan_cd");

                    b.Property<int>("NanbyoCd")
                        .HasColumnType("integer")
                        .HasColumnName("nanbyo_cd");

                    b.Property<string>("SaitakuKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("saitaku_kbn");

                    b.Property<string>("Sbyomei")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("sbyomei");

                    b.Property<int>("SikkanCd")
                        .HasColumnType("integer")
                        .HasColumnName("sikkan_cd");

                    b.Property<int>("SyusaiDate")
                        .HasColumnType("integer")
                        .HasColumnName("syusai_date");

                    b.Property<string>("SyusyokuKbn")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("syusyoku_kbn");

                    b.Property<int>("TandokuKinsi")
                        .HasColumnType("integer")
                        .HasColumnName("tandoku_kinsi");

                    b.Property<int>("UpdDate")
                        .HasColumnType("integer")
                        .HasColumnName("upd_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "ByomeiCd");

                    b.ToTable("byomei_mst");
                });

            modelBuilder.Entity("Entity.Tenant.ByomeiMstAftercare", b =>
                {
                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("byomei_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("Byomei")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("byomei")
                        .HasColumnOrder(2);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("ByomeiCd", "Byomei", "StartDate");

                    b.ToTable("byomei_mst_aftercare");
                });

            modelBuilder.Entity("Entity.Tenant.ByomeiSetGenerationMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GenerationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("generation_id")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenerationId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GenerationId");

                    b.ToTable("byomei_set_generation_mst");
                });

            modelBuilder.Entity("Entity.Tenant.ByomeiSetMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GenerationId")
                        .HasColumnType("integer")
                        .HasColumnName("generation_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("byomei_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsTitle")
                        .HasColumnType("integer")
                        .HasColumnName("is_title");

                    b.Property<int>("Level1")
                        .HasColumnType("integer")
                        .HasColumnName("level1");

                    b.Property<int>("Level2")
                        .HasColumnType("integer")
                        .HasColumnName("level2");

                    b.Property<int>("Level3")
                        .HasColumnType("integer")
                        .HasColumnName("level3");

                    b.Property<int>("Level4")
                        .HasColumnType("integer")
                        .HasColumnName("level4");

                    b.Property<int>("Level5")
                        .HasColumnType("integer")
                        .HasColumnName("level5");

                    b.Property<int>("SelectType")
                        .HasColumnType("integer")
                        .HasColumnName("select_type");

                    b.Property<string>("SetName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("set_name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GenerationId", "SeqNo");

                    b.ToTable("byomei_set_mst");
                });

            modelBuilder.Entity("Entity.Tenant.CalcLog", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("DelItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("del_item_cd");

                    b.Property<int>("DelSbt")
                        .HasColumnType("integer")
                        .HasColumnName("del_sbt");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id");

                    b.Property<int>("IsWarning")
                        .HasColumnType("integer")
                        .HasColumnName("is_warning");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<int>("LogSbt")
                        .HasColumnType("integer")
                        .HasColumnName("log_sbt");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<int>("TermCnt")
                        .HasColumnType("integer")
                        .HasColumnName("term_cnt");

                    b.Property<int>("TermSbt")
                        .HasColumnType("integer")
                        .HasColumnName("term_sbt");

                    b.Property<string>("Text")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "RaiinNo", "SeqNo");

                    b.ToTable("calc_log");
                });

            modelBuilder.Entity("Entity.Tenant.CalcStatus", b =>
                {
                    b.Property<long>("CalcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("calc_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CalcId"));

                    b.Property<string>("Biko")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("biko");

                    b.Property<int>("CalcMode")
                        .HasColumnType("integer")
                        .HasColumnName("calc_mode");

                    b.Property<int>("ClearReceChk")
                        .HasColumnType("integer")
                        .HasColumnName("clear_rece_chk");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SeikyuUp")
                        .HasColumnType("integer")
                        .HasColumnName("seikyu_up");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("CalcId");

                    b.HasIndex(new[] { "HpId", "PtId", "SinDate", "Status", "CreateMachine" }, "calc_status_idx01");

                    b.HasIndex(new[] { "HpId", "Status", "CreateMachine" }, "calc_status_idx02");

                    b.ToTable("calc_status");
                });

            modelBuilder.Entity("Entity.Tenant.CmtCheckMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("KarteKbn")
                        .HasColumnType("integer")
                        .HasColumnName("karte_kbn");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "ItemCd", "SeqNo");

                    b.ToTable("cmt_check_mst");
                });

            modelBuilder.Entity("Entity.Tenant.CmtKbnMst", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_kbn");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<string>("ItemCd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "HpId", "ItemCd", "StartDate" }, "cmt_kbn_mst_idx01");

                    b.ToTable("cmt_kbn_mst");
                });

            modelBuilder.Entity("Entity.Tenant.ColumnSetting", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("TableName")
                        .HasColumnType("text")
                        .HasColumnName("table_name");

                    b.Property<string>("ColumnName")
                        .HasColumnType("text")
                        .HasColumnName("column_name");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean")
                        .HasColumnName("is_hidden");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("boolean")
                        .HasColumnName("is_pinned");

                    b.Property<string>("OrderBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_by");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("UserId", "TableName", "ColumnName");

                    b.ToTable("column_setting");
                });

            modelBuilder.Entity("Entity.Tenant.ContainerMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("ContainerCd")
                        .HasColumnType("bigint")
                        .HasColumnName("container_cd")
                        .HasColumnOrder(2);

                    b.Property<string>("ContainerName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("container_name");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "ContainerCd");

                    b.ToTable("container_mst");
                });

            modelBuilder.Entity("Entity.Tenant.ConversionItemInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("SourceItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("source_item_cd")
                        .HasColumnOrder(2);

                    b.Property<string>("DestItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("dest_item_cd")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "SourceItemCd", "DestItemCd");

                    b.HasIndex(new[] { "HpId", "SourceItemCd" }, "conversion_item_inf_idx01");

                    b.ToTable("conversion_item_inf");
                });

            modelBuilder.Entity("Entity.Tenant.DefHokenNo", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("Digit1")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("digit_1")
                        .HasColumnOrder(2);

                    b.Property<string>("Digit2")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("digit_2")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("Digit3")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("digit_3");

                    b.Property<string>("Digit4")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("digit_4");

                    b.Property<string>("Digit5")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("digit_5");

                    b.Property<string>("Digit6")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("digit_6");

                    b.Property<string>("Digit7")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("digit_7");

                    b.Property<string>("Digit8")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("digit_8");

                    b.Property<int>("HokenEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_eda_no");

                    b.Property<int>("HokenNo")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_no");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "Digit1", "Digit2", "SeqNo");

                    b.HasIndex(new[] { "HpId", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "IsDeleted" }, "def_hoken_no_idx01");

                    b.ToTable("def_hoken_no");
                });

            modelBuilder.Entity("Entity.Tenant.DensiHaihanCustom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd1")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<int>("UserSetting")
                        .HasColumnType("integer")
                        .HasColumnName("user_setting")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("HaihanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("haihan_kbn");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("is_invalid");

                    b.Property<string>("ItemCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd2");

                    b.Property<int>("SpJyoken")
                        .HasColumnType("integer")
                        .HasColumnName("sp_jyoken");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<int>("TargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("target_kbn");

                    b.Property<int>("TermCnt")
                        .HasColumnType("integer")
                        .HasColumnName("term_cnt");

                    b.Property<int>("TermSbt")
                        .HasColumnType("integer")
                        .HasColumnName("term_sbt");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id", "HpId", "ItemCd1", "SeqNo", "UserSetting");

                    b.HasIndex(new[] { "HpId", "ItemCd1", "HaihanKbn", "StartDate", "TargetKbn", "IsInvalid" }, "densi_haihan_custom_idx03");

                    b.ToTable("densi_haihan_custom");
                });

            modelBuilder.Entity("Entity.Tenant.DensiHaihanDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd1")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<int>("UserSetting")
                        .HasColumnType("integer")
                        .HasColumnName("user_setting")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("HaihanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("haihan_kbn");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("is_invalid");

                    b.Property<string>("ItemCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd2");

                    b.Property<int>("SpJyoken")
                        .HasColumnType("integer")
                        .HasColumnName("sp_jyoken");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<int>("TargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("target_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id", "HpId", "ItemCd1", "SeqNo", "UserSetting");

                    b.HasIndex(new[] { "HpId", "ItemCd1", "HaihanKbn", "StartDate", "EndDate", "TargetKbn", "IsInvalid" }, "densi_haihan_day_idx03");

                    b.ToTable("densi_haihan_day");
                });

            modelBuilder.Entity("Entity.Tenant.DensiHaihanKarte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd1")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<int>("UserSetting")
                        .HasColumnType("integer")
                        .HasColumnName("user_setting")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("HaihanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("haihan_kbn");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("is_invalid");

                    b.Property<string>("ItemCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd2");

                    b.Property<int>("SpJyoken")
                        .HasColumnType("integer")
                        .HasColumnName("sp_jyoken");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<int>("TargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("target_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id", "HpId", "ItemCd1", "SeqNo", "UserSetting");

                    b.HasIndex(new[] { "HpId", "ItemCd1", "HaihanKbn", "StartDate", "EndDate", "TargetKbn", "IsInvalid" }, "densi_haihan_karte_idx03");

                    b.ToTable("densi_haihan_karte");
                });

            modelBuilder.Entity("Entity.Tenant.DensiHaihanMonth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd1")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<int>("UserSetting")
                        .HasColumnType("integer")
                        .HasColumnName("user_setting")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("HaihanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("haihan_kbn");

                    b.Property<int>("IncAfter")
                        .HasColumnType("integer")
                        .HasColumnName("inc_after");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("is_invalid");

                    b.Property<string>("ItemCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd2");

                    b.Property<int>("SpJyoken")
                        .HasColumnType("integer")
                        .HasColumnName("sp_jyoken");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<int>("TargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("target_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id", "HpId", "ItemCd1", "SeqNo", "UserSetting");

                    b.HasIndex(new[] { "HpId", "ItemCd1", "HaihanKbn", "StartDate", "EndDate", "TargetKbn", "IsInvalid" }, "densi_haihan_month_idx03");

                    b.ToTable("densi_haihan_month");
                });

            modelBuilder.Entity("Entity.Tenant.DensiHaihanWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd1")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<int>("UserSetting")
                        .HasColumnType("integer")
                        .HasColumnName("user_setting")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("HaihanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("haihan_kbn");

                    b.Property<int>("IncAfter")
                        .HasColumnType("integer")
                        .HasColumnName("inc_after");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("is_invalid");

                    b.Property<string>("ItemCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd2");

                    b.Property<int>("SpJyoken")
                        .HasColumnType("integer")
                        .HasColumnName("sp_jyoken");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<int>("TargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("target_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id", "HpId", "ItemCd1", "SeqNo", "UserSetting");

                    b.HasIndex(new[] { "HpId", "ItemCd1", "HaihanKbn", "StartDate", "EndDate", "TargetKbn", "IsInvalid" }, "densi_haihan_week_idx03");

                    b.ToTable("densi_haihan_week");
                });

            modelBuilder.Entity("Entity.Tenant.DensiHojyo", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("HaihanDay")
                        .HasColumnType("integer")
                        .HasColumnName("haihan_day");

                    b.Property<int>("HaihanKarte")
                        .HasColumnType("integer")
                        .HasColumnName("haihan_karte");

                    b.Property<int>("HaihanMonth")
                        .HasColumnType("integer")
                        .HasColumnName("haihan_month");

                    b.Property<int>("HaihanWeek")
                        .HasColumnType("integer")
                        .HasColumnName("haihan_week");

                    b.Property<string>("HoukatuGrpNo1")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("houkatu_grp_no1");

                    b.Property<string>("HoukatuGrpNo2")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("houkatu_grp_no2");

                    b.Property<string>("HoukatuGrpNo3")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("houkatu_grp_no3");

                    b.Property<int>("HoukatuTerm1")
                        .HasColumnType("integer")
                        .HasColumnName("houkatu_term1");

                    b.Property<int>("HoukatuTerm2")
                        .HasColumnType("integer")
                        .HasColumnName("houkatu_term2");

                    b.Property<int>("HoukatuTerm3")
                        .HasColumnType("integer")
                        .HasColumnName("houkatu_term3");

                    b.Property<int>("NyuinId")
                        .HasColumnType("integer")
                        .HasColumnName("nyuin_id");

                    b.Property<int>("SanteiKaisu")
                        .HasColumnType("integer")
                        .HasColumnName("santei_kaisu");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "ItemCd", "StartDate");

                    b.ToTable("densi_hojyo");
                });

            modelBuilder.Entity("Entity.Tenant.DensiHoukatu", b =>
                {
                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(3);

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<int>("UserSetting")
                        .HasColumnType("integer")
                        .HasColumnName("user_setting")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<string>("HoukatuGrpNo")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("houkatu_grp_no");

                    b.Property<int>("HoukatuTerm")
                        .HasColumnType("integer")
                        .HasColumnName("houkatu_term");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("is_invalid");

                    b.Property<int>("TargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("target_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("StartDate", "HpId", "ItemCd", "SeqNo", "UserSetting");

                    b.ToTable("densi_houkatu");
                });

            modelBuilder.Entity("Entity.Tenant.DensiHoukatuGrp", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("HoukatuGrpNo")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("houkatu_grp_no")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(5);

                    b.Property<int>("UserSetting")
                        .HasColumnType("integer")
                        .HasColumnName("user_setting")
                        .HasColumnOrder(6);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("is_invalid");

                    b.Property<int>("SpJyoken")
                        .HasColumnType("integer")
                        .HasColumnName("sp_jyoken");

                    b.Property<int>("TargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("target_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "HoukatuGrpNo", "ItemCd", "SeqNo", "UserSetting", "StartDate");

                    b.HasIndex(new[] { "HpId", "ItemCd", "StartDate", "EndDate", "TargetKbn", "IsInvalid" }, "densi_houkatu_grp_idx02");

                    b.ToTable("densi_houkatu_grp");
                });

            modelBuilder.Entity("Entity.Tenant.DensiSanteiKaisu", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<int>("UserSetting")
                        .HasColumnType("integer")
                        .HasColumnName("user_setting")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("is_invalid");

                    b.Property<int>("ItemGrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("item_grp_cd");

                    b.Property<int>("MaxCount")
                        .HasColumnType("integer")
                        .HasColumnName("max_count");

                    b.Property<int>("SpJyoken")
                        .HasColumnType("integer")
                        .HasColumnName("sp_jyoken");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<int>("TargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("target_kbn");

                    b.Property<int>("TermCount")
                        .HasColumnType("integer")
                        .HasColumnName("term_count");

                    b.Property<int>("TermSbt")
                        .HasColumnType("integer")
                        .HasColumnName("term_sbt");

                    b.Property<int>("UnitCd")
                        .HasColumnType("integer")
                        .HasColumnName("unit_cd");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "Id", "ItemCd", "SeqNo", "UserSetting");

                    b.ToTable("densi_santei_kaisu");
                });

            modelBuilder.Entity("Entity.Tenant.DocCategoryMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("CategoryCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("category_cd")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryCd"));

                    b.Property<string>("CategoryName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("category_name");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "CategoryCd");

                    b.ToTable("doc_category_mst");
                });

            modelBuilder.Entity("Entity.Tenant.DocComment", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("category_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("category_name");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ReplaceWord")
                        .HasColumnType("text")
                        .HasColumnName("replace_word");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("CategoryId");

                    b.ToTable("doc_comment");
                });

            modelBuilder.Entity("Entity.Tenant.DocCommentDetail", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id")
                        .HasColumnOrder(1);

                    b.Property<int>("EdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("eda_no")
                        .HasColumnOrder(2);

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("CategoryId", "EdaNo");

                    b.ToTable("doc_comment_detail");
                });

            modelBuilder.Entity("Entity.Tenant.DocInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date")
                        .HasColumnOrder(3);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(5);

                    b.Property<int>("CategoryCd")
                        .HasColumnType("integer")
                        .HasColumnName("category_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("DspFileName")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("dsp_file_name");

                    b.Property<string>("FileName")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("file_name");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsLocked")
                        .HasColumnType("integer")
                        .HasColumnName("is_locked");

                    b.Property<DateTime?>("LockDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lock_date");

                    b.Property<int>("LockId")
                        .HasColumnType("integer")
                        .HasColumnName("lock_id");

                    b.Property<string>("LockMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("lock_machine");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SinDate", "RaiinNo", "SeqNo");

                    b.ToTable("doc_inf");
                });

            modelBuilder.Entity("Entity.Tenant.DosageDosage", b =>
                {
                    b.Property<string>("DoeiCd")
                        .HasColumnType("text")
                        .HasColumnName("doei_cd")
                        .HasColumnOrder(1);

                    b.Property<int>("DoeiSeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("doei_seq_no")
                        .HasColumnOrder(2);

                    b.Property<int>("AddTerm")
                        .HasColumnType("integer")
                        .HasColumnName("add_term");

                    b.Property<string>("AddTermUnit")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("add_term_unit");

                    b.Property<int>("AfterMeal")
                        .HasColumnType("integer")
                        .HasColumnName("after_meal");

                    b.Property<string>("AgeCd")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("age_cd");

                    b.Property<double>("AgeOver")
                        .HasColumnType("double precision")
                        .HasColumnName("age_over");

                    b.Property<double>("AgeUnder")
                        .HasColumnType("double precision")
                        .HasColumnName("age_under");

                    b.Property<int>("BeforeMeal")
                        .HasColumnType("integer")
                        .HasColumnName("before_meal");

                    b.Property<int>("BetweenMeal")
                        .HasColumnType("integer")
                        .HasColumnName("between_meal");

                    b.Property<double>("BodyOver")
                        .HasColumnType("double precision")
                        .HasColumnName("body_over");

                    b.Property<double>("BodyUnder")
                        .HasColumnType("double precision")
                        .HasColumnName("body_under");

                    b.Property<string>("CombiDrug")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("combi_drug");

                    b.Property<double>("DayLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("day_limit");

                    b.Property<string>("DayLimitUnit")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("day_limit_unit");

                    b.Property<double>("DayMax")
                        .HasColumnType("double precision")
                        .HasColumnName("day_max");

                    b.Property<double>("DayMaxCnt")
                        .HasColumnType("double precision")
                        .HasColumnName("day_max_cnt");

                    b.Property<double>("DayMin")
                        .HasColumnType("double precision")
                        .HasColumnName("day_min");

                    b.Property<double>("DayMinCnt")
                        .HasColumnType("double precision")
                        .HasColumnName("day_min_cnt");

                    b.Property<string>("DayUnit")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("day_unit");

                    b.Property<int>("Daytime")
                        .HasColumnType("integer")
                        .HasColumnName("daytime");

                    b.Property<string>("DecFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("dec_flg");

                    b.Property<double>("DecLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("dec_limit");

                    b.Property<string>("DosageAddFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("dosage_add_flg");

                    b.Property<string>("DosageCheckFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("dosage_check_flg");

                    b.Property<int>("DosageLimitTerm")
                        .HasColumnType("integer")
                        .HasColumnName("dosage_limit_term");

                    b.Property<string>("DosageLimitUnit")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("dosage_limit_unit");

                    b.Property<string>("DrugCondition")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("drug_condition");

                    b.Property<int>("DrugLinkCd")
                        .HasColumnType("integer")
                        .HasColumnName("drug_link_cd");

                    b.Property<int>("DrugOrder")
                        .HasColumnType("integer")
                        .HasColumnName("drug_order");

                    b.Property<string>("DrugRoute")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("drug_route");

                    b.Property<string>("DrugSyugi")
                        .HasColumnType("text")
                        .HasColumnName("drug_syugi");

                    b.Property<int>("ElseTime")
                        .HasColumnType("integer")
                        .HasColumnName("else_time");

                    b.Property<string>("ExtendFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("extend_flg");

                    b.Property<string>("FilenameCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("filename_cd");

                    b.Property<string>("HaitaFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("haita_flg");

                    b.Property<string>("IncDecFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("inc_dec_flg");

                    b.Property<int>("IncDecInterval")
                        .HasColumnType("integer")
                        .HasColumnName("inc_dec_interval");

                    b.Property<string>("IncDecIntervalUnit")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("inc_dec_interval_unit");

                    b.Property<string>("IncDecLimitUnit")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("inc_dec_limit_unit");

                    b.Property<double>("IncLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("inc_limit");

                    b.Property<string>("IntervalWarningFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("interval_warning_flg");

                    b.Property<int>("JudgeTerm")
                        .HasColumnType("integer")
                        .HasColumnName("judge_term");

                    b.Property<string>("JudgeTermUnit")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("judge_term_unit");

                    b.Property<int>("JustAfterMeal")
                        .HasColumnType("integer")
                        .HasColumnName("just_after_meal");

                    b.Property<int>("JustBeforeMeal")
                        .HasColumnType("integer")
                        .HasColumnName("just_before_meal");

                    b.Property<string>("KensaPcd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("kensa_pcd");

                    b.Property<string>("Kisyakueki")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("kisyakueki");

                    b.Property<string>("Konokoka")
                        .HasColumnType("text")
                        .HasColumnName("konokoka");

                    b.Property<string>("KonokokaCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("konokoka_cd");

                    b.Property<string>("KyugenCd")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("kyugen_cd");

                    b.Property<int>("Morning")
                        .HasColumnType("integer")
                        .HasColumnName("morning");

                    b.Property<string>("NgKisyakueki")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("ng_kisyakueki");

                    b.Property<string>("NgYoukaieki")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("ng_youkaieki");

                    b.Property<int>("Night")
                        .HasColumnType("integer")
                        .HasColumnName("night");

                    b.Property<double>("OnceLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("once_limit");

                    b.Property<string>("OnceLimitUnit")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("once_limit_unit");

                    b.Property<double>("OnceMax")
                        .HasColumnType("double precision")
                        .HasColumnName("once_max");

                    b.Property<double>("OnceMin")
                        .HasColumnType("double precision")
                        .HasColumnName("once_min");

                    b.Property<string>("OnceUnit")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("once_unit");

                    b.Property<int>("Rise")
                        .HasColumnType("integer")
                        .HasColumnName("rise");

                    b.Property<string>("SingleDrugFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("single_drug_flg");

                    b.Property<int>("Sleep")
                        .HasColumnType("integer")
                        .HasColumnName("sleep");

                    b.Property<string>("TekioBui")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("tekio_bui");

                    b.Property<string>("TimeDepend")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("time_depend");

                    b.Property<double>("UnittermLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("unitterm_limit");

                    b.Property<string>("UnittermUnit")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("unitterm_unit");

                    b.Property<string>("UsageDosage")
                        .HasColumnType("text")
                        .HasColumnName("usage_dosage");

                    b.Property<string>("UseFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("use_flg");

                    b.Property<double>("WeightOver")
                        .HasColumnType("double precision")
                        .HasColumnName("weight_over");

                    b.Property<double>("WeightUnder")
                        .HasColumnType("double precision")
                        .HasColumnName("weight_under");

                    b.Property<string>("YoukaiKisyaku")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)")
                        .HasColumnName("youkai_kisyaku");

                    b.Property<string>("Youkaieki")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("youkaieki");

                    b.HasKey("DoeiCd", "DoeiSeqNo");

                    b.ToTable("m46_dosage_dosage");
                });

            modelBuilder.Entity("Entity.Tenant.DosageDrug", b =>
                {
                    b.Property<string>("DoeiCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("doei_cd")
                        .HasColumnOrder(2);

                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("yj_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("DgurKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("drug_kbn");

                    b.Property<string>("KikakiUnit")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("kikaku_unit");

                    b.Property<decimal>("RikikaRate")
                        .HasColumnType("numeric")
                        .HasColumnName("rikika_rate");

                    b.Property<string>("RikikaUnit")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("rikika_unit");

                    b.Property<string>("YakkaiUnit")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("yakka_unit");

                    b.Property<string>("YoukaiekiCd")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("youkaieki_cd");

                    b.HasKey("DoeiCd", "YjCd");

                    b.ToTable("m46_dosage_drug");
                });

            modelBuilder.Entity("Entity.Tenant.DosageMst", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<double>("DayLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("day_limit");

                    b.Property<double>("DayMax")
                        .HasColumnType("double precision")
                        .HasColumnName("day_max");

                    b.Property<double>("DayMin")
                        .HasColumnType("double precision")
                        .HasColumnName("day_min");

                    b.Property<int>("DayUnit")
                        .HasColumnType("integer")
                        .HasColumnName("day_unit");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<double>("OnceLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("once_limit");

                    b.Property<double>("OnceMax")
                        .HasColumnType("double precision")
                        .HasColumnName("once_max");

                    b.Property<double>("OnceMin")
                        .HasColumnType("double precision")
                        .HasColumnName("once_min");

                    b.Property<int>("OnceUnit")
                        .HasColumnType("integer")
                        .HasColumnName("once_unit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id", "HpId", "ItemCd", "SeqNo");

                    b.ToTable("dosage_mst");
                });

            modelBuilder.Entity("Entity.Tenant.DrugDayLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("LimitDay")
                        .HasColumnType("integer")
                        .HasColumnName("limit_day");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id", "HpId", "ItemCd", "SeqNo");

                    b.ToTable("drug_day_limit");
                });

            modelBuilder.Entity("Entity.Tenant.DrugInf", b =>
                {
                    b.Property<int>("InfKbn")
                        .HasColumnType("integer")
                        .HasColumnName("inf_kbn")
                        .HasColumnOrder(3);

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("DrugInfo")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("drug_inf");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("InfKbn", "HpId", "ItemCd", "SeqNo");

                    b.HasIndex(new[] { "HpId", "ItemCd", "InfKbn", "IsDeleted" }, "drug_inf_ukey01");

                    b.ToTable("drug_inf");
                });

            modelBuilder.Entity("Entity.Tenant.DrugUnitConv", b =>
                {
                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(1);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(2);

                    b.Property<double>("CnvVal")
                        .HasColumnType("double precision")
                        .HasColumnName("cnv_val");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("ItemCd", "StartDate");

                    b.ToTable("drug_unit_conv");
                });

            modelBuilder.Entity("Entity.Tenant.EpsChk", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("CheckResult")
                        .HasColumnType("integer")
                        .HasColumnName("check_result");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("DrugInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("drug_info");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("OnlineConsent")
                        .HasColumnType("integer")
                        .HasColumnName("online_consent");

                    b.Property<int>("OralBrowsingConsent")
                        .HasColumnType("integer")
                        .HasColumnName("oral_browsing_consent");

                    b.Property<int>("SameMedicalInstitutionAlertFlg")
                        .HasColumnType("integer")
                        .HasColumnName("same_medical_institution_alert_flg");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "RaiinNo", "SeqNo");

                    b.ToTable("eps_chk");
                });

            modelBuilder.Entity("Entity.Tenant.EpsChkDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<string>("MessageId")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("message_id")
                        .HasColumnOrder(5);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("comment");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("message");

                    b.Property<string>("MessageCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("message_category");

                    b.Property<string>("PastDate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("past_date");

                    b.Property<string>("PastDispensingQuantity")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("past_dispensing_quantity");

                    b.Property<string>("PastDosageForm")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("past_dosage_form");

                    b.Property<string>("PastInsurancePharmacyName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("past_insurance_pharmacy_name");

                    b.Property<string>("PastMedicalInstitutionName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("past_medical_institution_name");

                    b.Property<string>("PastPharmaceuticalCode")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("past_pharmaceutical_code");

                    b.Property<string>("PastPharmaceuticalCodeType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("past_pharmaceutical_code_type");

                    b.Property<string>("PastPharmaceuticalName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("past_pharmaceutical_name");

                    b.Property<string>("PastUsage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("past_usage");

                    b.Property<string>("PharmaceuticalsIngredientName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("pharmaceuticals_ingredient_name");

                    b.Property<string>("TargetDispensingQuantity")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("target_dispensing_quantity");

                    b.Property<string>("TargetDosageForm")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("target_dosage_form");

                    b.Property<string>("TargetPharmaceuticalCode")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("target_pharmaceutical_code");

                    b.Property<string>("TargetPharmaceuticalCodeType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("target_pharmaceutical_code_type");

                    b.Property<string>("TargetPharmaceuticalName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("target_pharmaceutical_name");

                    b.Property<string>("TargetUsage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("target_usage");

                    b.HasKey("HpId", "PtId", "RaiinNo", "SeqNo", "MessageId");

                    b.ToTable("eps_chk_detail");
                });

            modelBuilder.Entity("Entity.Tenant.EpsPrescription", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("access_code");

                    b.Property<string>("Bango")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("bango");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<int>("DeletedReason")
                        .HasColumnType("integer")
                        .HasColumnName("deleted_reason");

                    b.Property<string>("EdaNo")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("eda_no");

                    b.Property<string>("HokensyaNo")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("hokensya_no");

                    b.Property<int>("IssueType")
                        .HasColumnType("integer")
                        .HasColumnName("issue_type");

                    b.Property<int>("KaId")
                        .HasColumnType("integer")
                        .HasColumnName("ka_id");

                    b.Property<string>("Kigo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("kigo");

                    b.Property<string>("KohiFutansyaNo")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("kohi_futansya_no");

                    b.Property<string>("KohiJyukyusyaNo")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("kohi_jyukyusya_no");

                    b.Property<string>("PrescriptionDocument")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prescription_document");

                    b.Property<string>("PrescriptionId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("prescription_id");

                    b.Property<int>("RefileCount")
                        .HasColumnType("integer")
                        .HasColumnName("refile_count");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TantoId")
                        .HasColumnType("integer")
                        .HasColumnName("tanto_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "RaiinNo", "SeqNo");

                    b.HasIndex(new[] { "HpId", "PrescriptionId" }, "eps_prescription_idx01");

                    b.ToTable("eps_prescription");
                });

            modelBuilder.Entity("Entity.Tenant.EpsReference", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<string>("PrescriptionId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("prescription_id")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("PrescriptionReferenceInformation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prescription_reference_information");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.HasKey("HpId", "PtId", "PrescriptionId");

                    b.ToTable("eps_reference");
                });

            modelBuilder.Entity("Entity.Tenant.EventMst", b =>
                {
                    b.Property<string>("EventCd")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("event_cd")
                        .HasColumnOrder(1);

                    b.Property<int>("AuditTrailing")
                        .HasColumnType("integer")
                        .HasColumnName("audit_trailing");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("EventName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("event_name");

                    b.HasKey("EventCd");

                    b.ToTable("event_mst");
                });

            modelBuilder.Entity("Entity.Tenant.ExceptHokensya", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<int>("PrefNo")
                        .HasColumnType("integer")
                        .HasColumnName("pref_no")
                        .HasColumnOrder(3);

                    b.Property<int>("HokenNo")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_no")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_eda_no")
                        .HasColumnOrder(5);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("HokensyaNo")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("hokensya_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id", "HpId", "PrefNo", "HokenNo", "HokenEdaNo", "StartDate");

                    b.ToTable("except_hokensya");
                });

            modelBuilder.Entity("Entity.Tenant.FilingAutoImp", b =>
                {
                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("CategoryCd")
                        .HasColumnType("integer")
                        .HasColumnName("category_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("ImpPath")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("imp_path");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Machine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("machine");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("SeqNo", "HpId");

                    b.ToTable("filing_auto_imp");
                });

            modelBuilder.Entity("Entity.Tenant.FilingCategoryMst", b =>
                {
                    b.Property<int>("CategoryCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("category_cd")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryCd"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("CategoryName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("category_name");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("DspKanzok")
                        .HasColumnType("integer")
                        .HasColumnName("dsp_kanzok");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsFileDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_file_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("CategoryCd", "HpId");

                    b.ToTable("filing_category_mst");
                });

            modelBuilder.Entity("Entity.Tenant.FilingInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("file_id")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FileId"));

                    b.Property<int>("CategoryCd")
                        .HasColumnType("integer")
                        .HasColumnName("category_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("DspFileName")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("dsp_file_name");

                    b.Property<string>("FileName")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("file_name");

                    b.Property<int>("FileNo")
                        .HasColumnType("integer")
                        .HasColumnName("file_no")
                        .HasColumnOrder(5);

                    b.Property<int>("GetDate")
                        .HasColumnType("integer")
                        .HasColumnName("get_date")
                        .HasColumnOrder(4);

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "FileId");

                    b.HasIndex(new[] { "PtId", "GetDate", "FileNo", "CategoryCd" }, "filing_inf_idx01");

                    b.ToTable("filing_inf");
                });

            modelBuilder.Entity("Entity.Tenant.FunctionMst", b =>
                {
                    b.Property<string>("FunctionCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("function_cd")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("FunctionName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("function_name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("FunctionCd");

                    b.HasIndex(new[] { "FunctionCd" }, "function_mst_pkey");

                    b.ToTable("function_mst");
                });

            modelBuilder.Entity("Entity.Tenant.GcStdMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("StdKbn")
                        .HasColumnType("integer")
                        .HasColumnName("std_kbn")
                        .HasColumnOrder(2);

                    b.Property<int>("Sex")
                        .HasColumnType("integer")
                        .HasColumnName("sex")
                        .HasColumnOrder(3);

                    b.Property<double>("Point")
                        .HasColumnType("double precision")
                        .HasColumnName("point")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<double>("Per03")
                        .HasColumnType("double precision")
                        .HasColumnName("per_03");

                    b.Property<double>("Per10")
                        .HasColumnType("double precision")
                        .HasColumnName("per_10");

                    b.Property<double>("Per25")
                        .HasColumnType("double precision")
                        .HasColumnName("per_25");

                    b.Property<double>("Per50")
                        .HasColumnType("double precision")
                        .HasColumnName("per_50");

                    b.Property<double>("Per75")
                        .HasColumnType("double precision")
                        .HasColumnName("per_75");

                    b.Property<double>("Per90")
                        .HasColumnType("double precision")
                        .HasColumnName("per_90");

                    b.Property<double>("Per97")
                        .HasColumnType("double precision")
                        .HasColumnName("per_97");

                    b.Property<double>("SdAvg")
                        .HasColumnType("double precision")
                        .HasColumnName("sd_avg");

                    b.Property<double>("SdM10")
                        .HasColumnType("double precision")
                        .HasColumnName("sd_m10");

                    b.Property<double>("SdM20")
                        .HasColumnType("double precision")
                        .HasColumnName("sd_m20");

                    b.Property<double>("SdM25")
                        .HasColumnType("double precision")
                        .HasColumnName("sd_m25");

                    b.Property<double>("SdP10")
                        .HasColumnType("double precision")
                        .HasColumnName("sd_p10");

                    b.Property<double>("SdP20")
                        .HasColumnType("double precision")
                        .HasColumnName("sd_p20");

                    b.Property<double>("SdP25")
                        .HasColumnType("double precision")
                        .HasColumnName("sd_p25");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "StdKbn", "Sex", "Point");

                    b.ToTable("gc_std_mst");
                });

            modelBuilder.Entity("Entity.Tenant.HokenMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("PrefNo")
                        .HasColumnType("integer")
                        .HasColumnName("pref_no")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenNo")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_no")
                        .HasColumnOrder(3);

                    b.Property<int>("HokenEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_eda_no")
                        .HasColumnOrder(4);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(5);

                    b.Property<int>("AgeEnd")
                        .HasColumnType("integer")
                        .HasColumnName("age_end");

                    b.Property<int>("AgeStart")
                        .HasColumnType("integer")
                        .HasColumnName("age_start");

                    b.Property<int>("CalcSpKbn")
                        .HasColumnType("integer")
                        .HasColumnName("calc_sp_kbn");

                    b.Property<int>("CheckDigit")
                        .HasColumnType("integer")
                        .HasColumnName("check_digit");

                    b.Property<int>("CountKbn")
                        .HasColumnType("integer")
                        .HasColumnName("count_kbn");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("DayLimitCount")
                        .HasColumnType("integer")
                        .HasColumnName("day_limit_count");

                    b.Property<int>("DayLimitFutan")
                        .HasColumnType("integer")
                        .HasColumnName("day_limit_futan");

                    b.Property<double>("EnTen")
                        .HasColumnType("double precision")
                        .HasColumnName("en_ten");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("FutanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("futan_kbn");

                    b.Property<int>("FutanRate")
                        .HasColumnType("integer")
                        .HasColumnName("futan_rate");

                    b.Property<int>("FutanYusen")
                        .HasColumnType("integer")
                        .HasColumnName("futan_yusen");

                    b.Property<int>("HokenKohiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_kohi_kbn");

                    b.Property<string>("HokenName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("hoken_name");

                    b.Property<string>("HokenNameCd")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("hoken_name_cd");

                    b.Property<int>("HokenSbtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_sbt_kbn");

                    b.Property<string>("HokenSname")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("hoken_sname");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("houbetu");

                    b.Property<int>("IsFutansyaNoCheck")
                        .HasColumnType("integer")
                        .HasColumnName("is_futansya_no_check");

                    b.Property<int>("IsJyukyusyaNoCheck")
                        .HasColumnType("integer")
                        .HasColumnName("is_jyukyusya_no_check");

                    b.Property<int>("IsLimitList")
                        .HasColumnType("integer")
                        .HasColumnName("is_limit_list");

                    b.Property<int>("IsLimitListSum")
                        .HasColumnType("integer")
                        .HasColumnName("is_limit_list_sum");

                    b.Property<int>("IsOtherPrefValid")
                        .HasColumnType("integer")
                        .HasColumnName("is_other_pref_valid");

                    b.Property<int>("IsTokusyuNoCheck")
                        .HasColumnType("integer")
                        .HasColumnName("is_tokusyu_no_check");

                    b.Property<int>("JyukyuCheckDigit")
                        .HasColumnType("integer")
                        .HasColumnName("jyukyu_check_digit");

                    b.Property<int>("KaiFutangaku")
                        .HasColumnType("integer")
                        .HasColumnName("kai_futangaku");

                    b.Property<int>("KaiLimitFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kai_limit_futan");

                    b.Property<int>("KogakuHairyoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_hairyo_kbn");

                    b.Property<int>("KogakuTekiyo")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_tekiyo");

                    b.Property<int>("KogakuTotalAll")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_total_all");

                    b.Property<int>("KogakuTotalExcFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_total_exc_futan");

                    b.Property<int>("KogakuTotalKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_total_kbn");

                    b.Property<int>("LimitKbn")
                        .HasColumnType("integer")
                        .HasColumnName("limit_kbn");

                    b.Property<int>("MonthLimitCount")
                        .HasColumnType("integer")
                        .HasColumnName("month_limit_count");

                    b.Property<int>("MonthLimitFutan")
                        .HasColumnType("integer")
                        .HasColumnName("month_limit_futan");

                    b.Property<int>("MonthSpLimit")
                        .HasColumnType("integer")
                        .HasColumnName("month_sp_limit");

                    b.Property<int>("ReceFutanHide")
                        .HasColumnType("integer")
                        .HasColumnName("rece_futan_hide");

                    b.Property<int>("ReceFutanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("rece_futan_kbn");

                    b.Property<int>("ReceFutanRound")
                        .HasColumnType("integer")
                        .HasColumnName("rece_futan_round");

                    b.Property<int>("ReceKisai")
                        .HasColumnType("integer")
                        .HasColumnName("rece_kisai");

                    b.Property<int>("ReceKisai2")
                        .HasColumnType("integer")
                        .HasColumnName("rece_kisai2");

                    b.Property<int>("ReceKisaiKokho")
                        .HasColumnType("integer")
                        .HasColumnName("rece_kisai_kokho");

                    b.Property<int>("ReceSeikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("rece_seikyu_kbn");

                    b.Property<int>("ReceSpKbn")
                        .HasColumnType("integer")
                        .HasColumnName("rece_sp_kbn");

                    b.Property<int>("ReceTenKisai")
                        .HasColumnType("integer")
                        .HasColumnName("rece_ten_kisai");

                    b.Property<int>("ReceZeroKisai")
                        .HasColumnType("integer")
                        .HasColumnName("rece_zero_kisai");

                    b.Property<int>("SeikyuYm")
                        .HasColumnType("integer")
                        .HasColumnName("seikyu_ym");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PrefNo", "HokenNo", "HokenEdaNo", "StartDate");

                    b.ToTable("hoken_mst");
                });

            modelBuilder.Entity("Entity.Tenant.HokensyaMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("HokensyaNo")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("hokensya_no")
                        .HasColumnOrder(2);

                    b.Property<string>("Address1")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address1");

                    b.Property<string>("Address2")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address2");

                    b.Property<string>("Bango")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("bango");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("DeleteDate")
                        .HasColumnType("integer")
                        .HasColumnName("delete_date");

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_kbn");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("houbetu");

                    b.Property<string>("HoubetuKbn")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("houbetu_kbn");

                    b.Property<int>("IsDelete")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsKigoNa")
                        .HasColumnType("integer")
                        .HasColumnName("is_kigo_na");

                    b.Property<string>("KanaName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("kana_name");

                    b.Property<string>("Kigo")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("kigo");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PostCode")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("post_code");

                    b.Property<int>("PrefNo")
                        .HasColumnType("integer")
                        .HasColumnName("pref_no");

                    b.Property<int>("RateHonnin")
                        .HasColumnType("integer")
                        .HasColumnName("rate_honnin");

                    b.Property<int>("RateKazoku")
                        .HasColumnType("integer")
                        .HasColumnName("rate_kazoku");

                    b.Property<string>("Tel1")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("tel1");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "HokensyaNo");

                    b.ToTable("hokensya_mst");
                });

            modelBuilder.Entity("Entity.Tenant.HolidayMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HolidayKbn")
                        .HasColumnType("integer")
                        .HasColumnName("holiday_kbn");

                    b.Property<string>("HolidayName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("holiday_name");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("KyusinKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kyusin_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "SinDate", "SeqNo");

                    b.HasIndex(new[] { "HpId", "SinDate", "IsDeleted" }, "holiday_mst_ukey01");

                    b.ToTable("holiday_mst");
                });

            modelBuilder.Entity("Entity.Tenant.HpInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(2);

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address1");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("FaxNo")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("fax_no");

                    b.Property<string>("HpCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("hp_cd");

                    b.Property<string>("HpName")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("hp_name");

                    b.Property<string>("KaisetuName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("kaisetu_name");

                    b.Property<string>("OtherContacts")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("other_contacts");

                    b.Property<string>("PostCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("post_cd");

                    b.Property<int>("PrefNo")
                        .HasColumnType("integer")
                        .HasColumnName("pref_no");

                    b.Property<string>("ReceHpName")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("rece_hp_name");

                    b.Property<string>("RousaiHpCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("rousai_hp_cd");

                    b.Property<string>("Tel")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("tel");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "StartDate");

                    b.ToTable("hp_inf");
                });

            modelBuilder.Entity("Entity.Tenant.IpnKasanExclude", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(3);

                    b.Property<string>("IpnNameCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("ipn_name_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "StartDate", "IpnNameCd", "SeqNo");

                    b.HasIndex(new[] { "HpId", "StartDate", "EndDate", "IpnNameCd" }, "ipn_kasan_exclude_idx01");

                    b.ToTable("ipn_kasan_exclude");
                });

            modelBuilder.Entity("Entity.Tenant.IpnKasanExcludeItem", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(3);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "StartDate", "ItemCd");

                    b.HasIndex(new[] { "HpId", "StartDate", "EndDate", "ItemCd" }, "ipn_kasan_exclude_item_idx01");

                    b.ToTable("ipn_kasan_exclude_item");
                });

            modelBuilder.Entity("Entity.Tenant.IpnKasanMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(3);

                    b.Property<string>("IpnNameCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("ipn_name_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Kasan1")
                        .HasColumnType("integer")
                        .HasColumnName("kasan1");

                    b.Property<int>("Kasan2")
                        .HasColumnType("integer")
                        .HasColumnName("kasan2");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "StartDate", "IpnNameCd", "SeqNo");

                    b.ToTable("ipn_kasan_mst");
                });

            modelBuilder.Entity("Entity.Tenant.IpnMinYakkaMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IpnNameCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("ipn_name_cd")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<double>("Yakka")
                        .HasColumnType("double precision")
                        .HasColumnName("yakka");

                    b.HasKey("HpId", "Id", "IpnNameCd", "SeqNo");

                    b.HasIndex(new[] { "HpId", "IpnNameCd", "StartDate" }, "ipn_min_yakka_mst_idx01");

                    b.HasIndex(new[] { "HpId", "StartDate", "EndDate", "IpnNameCd" }, "ipn_min_yakka_mst_idx02");

                    b.ToTable("ipn_min_yakka_mst");
                });

            modelBuilder.Entity("Entity.Tenant.IpnNameMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("IpnNameCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("ipn_name_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<string>("IpnName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ipn_name");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "IpnNameCd", "StartDate", "SeqNo");

                    b.HasIndex(new[] { "IpnNameCd" }, "ipn_name_mst_idx01");

                    b.ToTable("ipn_name_mst");
                });

            modelBuilder.Entity("Entity.Tenant.ItemGrpMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("GrpSbt")
                        .HasColumnType("bigint")
                        .HasColumnName("grp_sbt")
                        .HasColumnOrder(2);

                    b.Property<long>("ItemGrpCd")
                        .HasColumnType("bigint")
                        .HasColumnName("item_grp_cd")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(5);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GrpSbt", "ItemGrpCd", "SeqNo", "StartDate");

                    b.ToTable("item_grp_mst");
                });

            modelBuilder.Entity("Entity.Tenant.JihiSbtMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("JihiSbt")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_sbt")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsYobo")
                        .HasColumnType("integer")
                        .HasColumnName("is_yobo");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "JihiSbt");

                    b.ToTable("jihi_sbt_mst");
                });

            modelBuilder.Entity("Entity.Tenant.JobMst", b =>
                {
                    b.Property<int>("JobCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("job_cd")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JobCd"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("JobName")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("job_name");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("JobCd", "HpId");

                    b.ToTable("job_mst");
                });

            modelBuilder.Entity("Entity.Tenant.JsonSetting", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "Key");

                    b.ToTable("json_setting");
                });

            modelBuilder.Entity("Entity.Tenant.KaMst", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("KaId")
                        .HasColumnType("integer")
                        .HasColumnName("ka_id");

                    b.Property<string>("KaName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("ka_name");

                    b.Property<string>("KaSname")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ka_sname");

                    b.Property<string>("ReceKaCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("rece_ka_cd");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<string>("YousikiKaCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("yousiki_ka_cd");

                    b.HasKey("Id", "HpId");

                    b.HasIndex(new[] { "KaId" }, "pt_ka_mst_idx01");

                    b.ToTable("ka_mst");
                });

            modelBuilder.Entity("Entity.Tenant.KacodeMst", b =>
                {
                    b.Property<string>("ReceKaCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("rece_ka_cd")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("KaName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("ka_name");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("ReceKaCd");

                    b.ToTable("kacode_mst");
                });

            modelBuilder.Entity("Entity.Tenant.KaikeiDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date")
                        .HasColumnOrder(3);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_pid")
                        .HasColumnOrder(5);

                    b.Property<int>("AdjustPid")
                        .HasColumnType("integer")
                        .HasColumnName("adjust_pid")
                        .HasColumnOrder(6);

                    b.Property<int>("AdjustKid")
                        .HasColumnType("integer")
                        .HasColumnName("adjust_kid");

                    b.Property<int>("AdjustRound")
                        .HasColumnType("integer")
                        .HasColumnName("adjust_round");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<double>("EnTen")
                        .HasColumnType("double precision")
                        .HasColumnName("en_ten");

                    b.Property<int>("GenmenGaku")
                        .HasColumnType("integer")
                        .HasColumnName("genmen_gaku");

                    b.Property<int>("GenmenGaku10en")
                        .HasColumnType("integer")
                        .HasColumnName("genmen_gaku_10en");

                    b.Property<int>("GenmenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("genmen_kbn");

                    b.Property<int>("HokenFutan")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_futan");

                    b.Property<int>("HokenFutan10en")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_futan_10en");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id");

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_kbn");

                    b.Property<int>("HokenRate")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_rate");

                    b.Property<int>("HokenSbtCd")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_sbt_cd");

                    b.Property<int>("HonkeKbn")
                        .HasColumnType("integer")
                        .HasColumnName("honke_kbn");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("houbetu");

                    b.Property<int>("IchibuFutan")
                        .HasColumnType("integer")
                        .HasColumnName("ichibu_futan");

                    b.Property<int>("IchibuFutan10en")
                        .HasColumnType("integer")
                        .HasColumnName("ichibu_futan_10en");

                    b.Property<int>("IsChoki")
                        .HasColumnType("integer")
                        .HasColumnName("is_choki");

                    b.Property<int>("IsNinpu")
                        .HasColumnType("integer")
                        .HasColumnName("is_ninpu");

                    b.Property<int>("IsTasukai")
                        .HasColumnType("integer")
                        .HasColumnName("is_tasukai");

                    b.Property<int>("IsTokurei")
                        .HasColumnType("integer")
                        .HasColumnName("is_tokurei");

                    b.Property<int>("IsZaiiso")
                        .HasColumnType("integer")
                        .HasColumnName("is_zaiiso");

                    b.Property<int>("JibaiAFutan")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_a_futan");

                    b.Property<int>("JibaiBFutan")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_b_futan");

                    b.Property<int>("JibaiCFutan")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_c_futan");

                    b.Property<int>("JibaiDFutan")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_d_futan");

                    b.Property<int>("JibaiHaFutan")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_ha_futan");

                    b.Property<int>("JibaiHeMeisai")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_he_meisai");

                    b.Property<int>("JibaiHeMeisaiCount")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_he_meisai_count");

                    b.Property<int>("JibaiHoSindan")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_ho_sindan");

                    b.Property<int>("JibaiHoSindanCount")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_ho_sindan_count");

                    b.Property<int>("JibaiITensu")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_i_tensu");

                    b.Property<int>("JibaiKenpoFutan")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_kenpo_futan");

                    b.Property<int>("JibaiKenpoTensu")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_kenpo_tensu");

                    b.Property<int>("JibaiNiFutan")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_ni_futan");

                    b.Property<int>("JibaiRoTensu")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_ro_tensu");

                    b.Property<int>("JihiFutan")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_futan");

                    b.Property<int>("JihiFutanOuttaxGen")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_futan_outtax_gen");

                    b.Property<int>("JihiFutanOuttaxNr")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_futan_outtax_nr");

                    b.Property<int>("JihiFutanTaxGen")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_futan_tax_gen");

                    b.Property<int>("JihiFutanTaxNr")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_futan_tax_nr");

                    b.Property<int>("JihiFutanTaxfree")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_futan_taxfree");

                    b.Property<int>("JihiOuttax")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_outtax");

                    b.Property<int>("JihiOuttaxGen")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_outtax_gen");

                    b.Property<int>("JihiOuttaxNr")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_outtax_nr");

                    b.Property<int>("JihiTax")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_tax");

                    b.Property<int>("JihiTaxGen")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_tax_gen");

                    b.Property<int>("JihiTaxNr")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_tax_nr");

                    b.Property<int>("Jitunisu")
                        .HasColumnType("integer")
                        .HasColumnName("jitunisu");

                    b.Property<int>("KogakuFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_futan");

                    b.Property<int>("KogakuFutan10en")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_futan_10en");

                    b.Property<int>("KogakuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_kbn");

                    b.Property<int>("KogakuLimit")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_limit");

                    b.Property<int>("KogakuOverKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_over_kbn");

                    b.Property<int>("KogakuTekiyoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_tekiyo_kbn");

                    b.Property<int>("KogakuTotalKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_total_kbn");

                    b.Property<int>("Kohi1Futan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_futan");

                    b.Property<int>("Kohi1Futan10en")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_futan_10en");

                    b.Property<string>("Kohi1Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi1_houbetu");

                    b.Property<int>("Kohi1Id")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_id");

                    b.Property<int>("Kohi1Limit")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_limit");

                    b.Property<int>("Kohi1OtherFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_other_futan");

                    b.Property<string>("Kohi1Priority")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("kohi1_priority");

                    b.Property<int>("Kohi2Futan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_futan");

                    b.Property<int>("Kohi2Futan10en")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_futan_10en");

                    b.Property<string>("Kohi2Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi2_houbetu");

                    b.Property<int>("Kohi2Id")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_id");

                    b.Property<int>("Kohi2Limit")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_limit");

                    b.Property<int>("Kohi2OtherFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_other_futan");

                    b.Property<string>("Kohi2Priority")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("kohi2_priority");

                    b.Property<int>("Kohi3Futan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_futan");

                    b.Property<int>("Kohi3Futan10en")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_futan_10en");

                    b.Property<string>("Kohi3Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi3_houbetu");

                    b.Property<int>("Kohi3Id")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_id");

                    b.Property<int>("Kohi3Limit")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_limit");

                    b.Property<int>("Kohi3OtherFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_other_futan");

                    b.Property<string>("Kohi3Priority")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("kohi3_priority");

                    b.Property<int>("Kohi4Futan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_futan");

                    b.Property<int>("Kohi4Futan10en")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_futan_10en");

                    b.Property<string>("Kohi4Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi4_houbetu");

                    b.Property<int>("Kohi4Id")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_id");

                    b.Property<int>("Kohi4Limit")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_limit");

                    b.Property<int>("Kohi4OtherFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_other_futan");

                    b.Property<string>("Kohi4Priority")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("kohi4_priority");

                    b.Property<long>("OyaRaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("oya_raiin_no");

                    b.Property<int>("PtFutan")
                        .HasColumnType("integer")
                        .HasColumnName("pt_futan");

                    b.Property<int>("PtRate")
                        .HasColumnType("integer")
                        .HasColumnName("pt_rate");

                    b.Property<string>("ReceSbt")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("rece_sbt");

                    b.Property<int>("RousaiIFutan")
                        .HasColumnType("integer")
                        .HasColumnName("rousai_i_futan");

                    b.Property<int>("RousaiITensu")
                        .HasColumnType("integer")
                        .HasColumnName("rousai_i_tensu");

                    b.Property<int>("RousaiId")
                        .HasColumnType("integer")
                        .HasColumnName("rousai_id");

                    b.Property<int>("RousaiRoFutan")
                        .HasColumnType("integer")
                        .HasColumnName("rousai_ro_futan");

                    b.Property<string>("SortKey")
                        .HasMaxLength(61)
                        .HasColumnType("character varying(61)")
                        .HasColumnName("sort_key");

                    b.Property<int>("Tensu")
                        .HasColumnType("integer")
                        .HasColumnName("tensu");

                    b.Property<int>("TotalIryohi")
                        .HasColumnType("integer")
                        .HasColumnName("total_iryohi");

                    b.Property<int>("TotalKogakuLimit")
                        .HasColumnType("integer")
                        .HasColumnName("total_kogaku_limit");

                    b.Property<int>("TotalPtFutan")
                        .HasColumnType("integer")
                        .HasColumnName("total_pt_futan");

                    b.HasKey("HpId", "PtId", "SinDate", "RaiinNo", "HokenPid", "AdjustPid");

                    b.ToTable("kaikei_detail");
                });

            modelBuilder.Entity("Entity.Tenant.KaikeiInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date")
                        .HasColumnOrder(3);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id")
                        .HasColumnOrder(5);

                    b.Property<int>("AdjustFutan")
                        .HasColumnType("integer")
                        .HasColumnName("adjust_futan");

                    b.Property<int>("AdjustFutanRange")
                        .HasColumnType("integer")
                        .HasColumnName("adjust_futan_range");

                    b.Property<int>("AdjustFutanVal")
                        .HasColumnType("integer")
                        .HasColumnName("adjust_futan_val");

                    b.Property<int>("AdjustRateRange")
                        .HasColumnType("integer")
                        .HasColumnName("adjust_rate_range");

                    b.Property<int>("AdjustRateVal")
                        .HasColumnType("integer")
                        .HasColumnName("adjust_rate_val");

                    b.Property<int>("AdjustRound")
                        .HasColumnType("integer")
                        .HasColumnName("adjust_round");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("DispRate")
                        .HasColumnType("integer")
                        .HasColumnName("disp_rate");

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_kbn");

                    b.Property<int>("HokenRate")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_rate");

                    b.Property<int>("HokenSbtCd")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_sbt_cd");

                    b.Property<int>("HonkeKbn")
                        .HasColumnType("integer")
                        .HasColumnName("honke_kbn");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("houbetu");

                    b.Property<int>("JihiFutan")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_futan");

                    b.Property<int>("JihiFutanOuttaxGen")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_futan_outtax_gen");

                    b.Property<int>("JihiFutanOuttaxNr")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_futan_outtax_nr");

                    b.Property<int>("JihiFutanTaxGen")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_futan_tax_gen");

                    b.Property<int>("JihiFutanTaxNr")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_futan_tax_nr");

                    b.Property<int>("JihiFutanTaxfree")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_futan_taxfree");

                    b.Property<int>("JihiOuttax")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_outtax");

                    b.Property<int>("JihiOuttaxGen")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_outtax_gen");

                    b.Property<int>("JihiOuttaxNr")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_outtax_nr");

                    b.Property<int>("JihiTax")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_tax");

                    b.Property<int>("JihiTaxGen")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_tax_gen");

                    b.Property<int>("JihiTaxNr")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_tax_nr");

                    b.Property<string>("Kohi1Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi1_houbetu");

                    b.Property<int>("Kohi1Id")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_id");

                    b.Property<string>("Kohi2Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi2_houbetu");

                    b.Property<int>("Kohi2Id")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_id");

                    b.Property<string>("Kohi3Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi3_houbetu");

                    b.Property<int>("Kohi3Id")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_id");

                    b.Property<string>("Kohi4Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi4_houbetu");

                    b.Property<int>("Kohi4Id")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_id");

                    b.Property<int>("PtFutan")
                        .HasColumnType("integer")
                        .HasColumnName("pt_futan");

                    b.Property<int>("PtRate")
                        .HasColumnType("integer")
                        .HasColumnName("pt_rate");

                    b.Property<string>("ReceSbt")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("rece_sbt");

                    b.Property<int>("Tensu")
                        .HasColumnType("integer")
                        .HasColumnName("tensu");

                    b.Property<int>("TotalIryohi")
                        .HasColumnType("integer")
                        .HasColumnName("total_iryohi");

                    b.Property<int>("TotalPtFutan")
                        .HasColumnType("integer")
                        .HasColumnName("total_pt_futan");

                    b.HasKey("HpId", "PtId", "SinDate", "RaiinNo", "HokenId");

                    b.HasIndex(new[] { "HpId", "RaiinNo" }, "kaikei_inf_idx01");

                    b.ToTable("kaikei_inf");
                });

            modelBuilder.Entity("Entity.Tenant.KantokuMst", b =>
                {
                    b.Property<string>("RoudouCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("roudou_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("KantokuCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("kantoku_cd")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("KantokuName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("kantoku_name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("RoudouCd", "KantokuCd");

                    b.ToTable("kantoku_mst");
                });

            modelBuilder.Entity("Entity.Tenant.KarteFilterDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.Property<long>("FilterId")
                        .HasColumnType("bigint")
                        .HasColumnName("filter_id")
                        .HasColumnOrder(3);

                    b.Property<int>("FilterItemCd")
                        .HasColumnType("integer")
                        .HasColumnName("filter_item_cd")
                        .HasColumnOrder(4);

                    b.Property<int>("FilterEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("filter_eda_no")
                        .HasColumnOrder(5);

                    b.Property<string>("Param")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("param");

                    b.Property<int>("Val")
                        .HasColumnType("integer")
                        .HasColumnName("val");

                    b.HasKey("HpId", "UserId", "FilterId", "FilterItemCd", "FilterEdaNo");

                    b.ToTable("karte_filter_detail");
                });

            modelBuilder.Entity("Entity.Tenant.KarteFilterMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.Property<long>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("filter_id")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FilterId"));

                    b.Property<int>("AutoApply")
                        .HasColumnType("integer")
                        .HasColumnName("auto_apply");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("FilterName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("filter_name");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "UserId", "FilterId");

                    b.ToTable("karte_filter_mst");
                });

            modelBuilder.Entity("Entity.Tenant.KarteImgInf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("file_name");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("KarteKbn")
                        .HasColumnType("integer")
                        .HasColumnName("karte_kbn");

                    b.Property<string>("Message")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("message");

                    b.Property<long>("Position")
                        .HasColumnType("bigint")
                        .HasColumnName("position");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.HasKey("Id");

                    b.ToTable("karte_img_inf");
                });

            modelBuilder.Entity("Entity.Tenant.KarteInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<int>("KarteKbn")
                        .HasColumnType("integer")
                        .HasColumnName("karte_kbn")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<byte[]>("RichText")
                        .HasColumnType("bytea")
                        .HasColumnName("rich_text");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "RaiinNo", "SeqNo", "KarteKbn");

                    b.HasIndex(new[] { "HpId", "PtId", "KarteKbn" }, "karte_inf_idx01");

                    b.ToTable("karte_inf");
                });

            modelBuilder.Entity("Entity.Tenant.KarteKbnMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("KarteKbn")
                        .HasColumnType("integer")
                        .HasColumnName("karte_kbn")
                        .HasColumnOrder(2);

                    b.Property<int>("CanImg")
                        .HasColumnType("integer")
                        .HasColumnName("can_img");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("KbnName")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("kbn_name");

                    b.Property<string>("KbnShortName")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("kbn_short_name");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "KarteKbn");

                    b.ToTable("karte_kbn_mst");
                });

            modelBuilder.Entity("Entity.Tenant.KensaCenterMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CenterCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("center_cd");

                    b.Property<string>("CenterName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("center_name");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("PrimaryKbn")
                        .HasColumnType("integer")
                        .HasColumnName("primary_kbn");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "Id");

                    b.ToTable("kensa_center_mst");
                });

            modelBuilder.Entity("Entity.Tenant.KensaCmtMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasMaxLength(2)
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("CmtCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("cmt_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("CmtSeqNo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(9)
                        .HasColumnType("integer")
                        .HasColumnName("cmt_seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CmtSeqNo"));

                    b.Property<string>("CMT")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cmt");

                    b.Property<string>("CenterCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("center_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasMaxLength(8)
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasMaxLength(1)
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasMaxLength(8)
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "CmtCd", "CmtSeqNo");

                    b.HasIndex(new[] { "HpId", "CmtCd", "CmtSeqNo", "IsDeleted" }, "kensa_cmt_mst_skey1");

                    b.ToTable("kensa_cmt_mst");
                });

            modelBuilder.Entity("Entity.Tenant.KensaInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("IraiCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("irai_cd")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IraiCd"));

                    b.Property<string>("Bilirubin")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("bilirubin");

                    b.Property<string>("CenterCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("center_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("InoutKbn")
                        .HasColumnType("integer")
                        .HasColumnName("inout_kbn");

                    b.Property<int>("IraiDate")
                        .HasColumnType("integer")
                        .HasColumnName("irai_date");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Nyubi")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("nyubi");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    b.Property<int>("ResultCheck")
                        .HasColumnType("integer")
                        .HasColumnName("result_check");

                    b.Property<int>("SikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sikyu_kbn");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TosekiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("toseki_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<string>("Yoketu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("yoketu");

                    b.HasKey("HpId", "PtId", "IraiCd");

                    b.ToTable("kensa_inf");
                });

            modelBuilder.Entity("Entity.Tenant.KensaInfDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<string>("AbnormalKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("abnormal_kbn");

                    b.Property<string>("CmtCd1")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("cmt_cd1");

                    b.Property<string>("CmtCd2")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("cmt_cd2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<long>("IraiCd")
                        .HasColumnType("bigint")
                        .HasColumnName("irai_cd")
                        .HasColumnOrder(3);

                    b.Property<int>("IraiDate")
                        .HasColumnType("integer")
                        .HasColumnName("irai_date");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("KensaItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("kensa_item_cd");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    b.Property<string>("ResultType")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("result_type");

                    b.Property<string>("ResultVal")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("result_val");

                    b.Property<long>("SeqGroupNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_group_no");

                    b.Property<long>("SeqParentNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_parent_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "SeqNo");

                    b.HasIndex(new[] { "PtId", "IsDeleted", "KensaItemCd" }, "kensa_inf_detail_pt_id_idx");

                    b.ToTable("kensa_inf_detail");
                });

            modelBuilder.Entity("Entity.Tenant.KensaIraiLog", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("CenterCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("center_cd")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date")
                        .HasColumnOrder(3);

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("FromDate")
                        .HasColumnType("integer")
                        .HasColumnName("from_date");

                    b.Property<int>("IraiDate")
                        .HasColumnType("integer")
                        .HasColumnName("irai_date");

                    b.Property<string>("IraiFile")
                        .HasColumnType("text")
                        .HasColumnName("irai_file");

                    b.Property<byte[]>("IraiList")
                        .HasColumnType("bytea")
                        .HasColumnName("irai_list");

                    b.Property<int>("ToDate")
                        .HasColumnType("integer")
                        .HasColumnName("to_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "CenterCd", "CreateDate");

                    b.ToTable("kensa_irai_log");
                });

            modelBuilder.Entity("Entity.Tenant.KensaMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("KensaItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("kensa_item_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("KensaItemSeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("kensa_item_seq_no")
                        .HasColumnOrder(3);

                    b.Property<string>("CenterCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("center_cd");

                    b.Property<string>("CenterItemCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("center_item_cd1");

                    b.Property<string>("CenterItemCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("center_item_cd2");

                    b.Property<int>("ContainerCd")
                        .HasColumnType("integer")
                        .HasColumnName("container_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("Digit")
                        .HasColumnType("integer")
                        .HasColumnName("digit");

                    b.Property<string>("FemaleStd")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("female_std");

                    b.Property<string>("FemaleStdHigh")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("female_std_high");

                    b.Property<string>("FemaleStdLow")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("female_std_low");

                    b.Property<string>("Formula")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("formula");

                    b.Property<int>("IsDelete")
                        .HasColumnType("integer")
                        .HasColumnName("is_delete");

                    b.Property<string>("KensaKana")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("kensa_kana");

                    b.Property<string>("KensaName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("kensa_name");

                    b.Property<string>("MaleStd")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("male_std");

                    b.Property<string>("MaleStdHigh")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("male_std_high");

                    b.Property<string>("MaleStdLow")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("male_std_low");

                    b.Property<int>("MaterialCd")
                        .HasColumnType("integer")
                        .HasColumnName("material_cd");

                    b.Property<string>("OyaItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("oya_item_cd");

                    b.Property<int>("OyaItemSeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("oya_item_seq_no");

                    b.Property<long>("SortNo")
                        .HasColumnType("bigint")
                        .HasColumnName("sort_no");

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "KensaItemCd", "KensaItemSeqNo");

                    b.HasIndex(new[] { "KensaItemCd" }, "kensa_mst_idx01");

                    b.ToTable("kensa_mst");
                });

            modelBuilder.Entity("Entity.Tenant.KensaResultLog", b =>
                {
                    b.Property<int>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<int>("ImpDate")
                        .HasColumnType("integer")
                        .HasColumnName("imp_date")
                        .HasColumnOrder(3);

                    b.Property<string>("KekaFile")
                        .HasColumnType("text")
                        .HasColumnName("keka_file")
                        .HasColumnOrder(4);

                    b.HasKey("OpId");

                    b.HasIndex(new[] { "HpId", "ImpDate" }, "kensa_result_log_idx01");

                    b.ToTable("kensa_result_log");
                });

            modelBuilder.Entity("Entity.Tenant.KensaSet", b =>
                {
                    b.Property<int>("HpId")
                        .HasMaxLength(2)
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("SetId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(9)
                        .HasColumnType("integer")
                        .HasColumnName("set_id")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SetId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasMaxLength(8)
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasMaxLength(1)
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("SetName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("set_name");

                    b.Property<int>("SortNo")
                        .HasMaxLength(9)
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasMaxLength(8)
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "SetId");

                    b.HasIndex(new[] { "HpId", "SetId" }, "kensa_set_pkey");

                    b.ToTable("kensa_set");
                });

            modelBuilder.Entity("Entity.Tenant.KensaSetDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasMaxLength(2)
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("SetId")
                        .HasMaxLength(9)
                        .HasColumnType("integer")
                        .HasColumnName("set_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SetEdaNo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(9)
                        .HasColumnType("integer")
                        .HasColumnName("set_eda_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SetEdaNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasMaxLength(8)
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasMaxLength(1)
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("KensaItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("kensa_item_cd");

                    b.Property<int>("KensaItemSeqNo")
                        .HasMaxLength(2)
                        .HasColumnType("integer")
                        .HasColumnName("kensa_item_seq_no");

                    b.Property<int>("SetEdaParentNo")
                        .HasMaxLength(9)
                        .HasColumnType("integer")
                        .HasColumnName("seq_parent_no");

                    b.Property<int>("SortNo")
                        .HasMaxLength(9)
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasMaxLength(8)
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "SetId", "SetEdaNo");

                    b.HasIndex(new[] { "HpId", "SetId", "SetEdaNo" }, "kensa_set_detail_pkey");

                    b.ToTable("kensa_set_detail");
                });

            modelBuilder.Entity("Entity.Tenant.KensaStdMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("KensaItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("kensa_item_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("FemaleStd")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("female_std");

                    b.Property<string>("FemaleStdHigh")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("female_std_high");

                    b.Property<string>("FemaleStdLow")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("female_std_low");

                    b.Property<string>("MaleStd")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("male_std");

                    b.Property<string>("MaleStdHigh")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("male_std_high");

                    b.Property<string>("MaleStdLow")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("male_std_low");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "KensaItemCd", "StartDate");

                    b.ToTable("kensa_std_mst");
                });

            modelBuilder.Entity("Entity.Tenant.KinkiMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ACd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("a_cd")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<string>("BCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("b_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "Id", "ACd", "SeqNo");

                    b.ToTable("kinki_mst");
                });

            modelBuilder.Entity("Entity.Tenant.KogakuLimit", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("AgeKbn")
                        .HasColumnType("integer")
                        .HasColumnName("age_kbn")
                        .HasColumnOrder(2);

                    b.Property<int>("KogakuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_kbn")
                        .HasColumnOrder(3);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(4);

                    b.Property<int>("AdjustLimit")
                        .HasColumnType("integer")
                        .HasColumnName("adjust_limit");

                    b.Property<int>("BaseLimit")
                        .HasColumnType("integer")
                        .HasColumnName("base_limit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<string>("IncomeKbn")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("income_kbn");

                    b.Property<int>("TasuLimit")
                        .HasColumnType("integer")
                        .HasColumnName("tasu_limit");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "AgeKbn", "KogakuKbn", "StartDate");

                    b.ToTable("kogaku_limit");
                });

            modelBuilder.Entity("Entity.Tenant.KohiPriority", b =>
                {
                    b.Property<int>("PrefNo")
                        .HasColumnType("integer")
                        .HasColumnName("pref_no")
                        .HasColumnOrder(1);

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("houbetu")
                        .HasColumnOrder(2);

                    b.Property<string>("PriorityNo")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("priority_no")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("PrefNo", "Houbetu", "PriorityNo");

                    b.ToTable("kohi_priority");
                });

            modelBuilder.Entity("Entity.Tenant.KouiHoukatuMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("HoukatuTerm")
                        .HasColumnType("integer")
                        .HasColumnName("houkatu_term");

                    b.Property<int>("IgnoreSanteiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("ignore_santei_kbn");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("is_invalid");

                    b.Property<int>("KouiFrom")
                        .HasColumnType("integer")
                        .HasColumnName("koui_from");

                    b.Property<int>("KouiTo")
                        .HasColumnType("integer")
                        .HasColumnName("koui_to");

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<int>("TargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("target_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<int>("UserSetting")
                        .HasColumnType("integer")
                        .HasColumnName("user_setting")
                        .HasColumnOrder(5);

                    b.HasKey("HpId", "ItemCd", "StartDate");

                    b.ToTable("koui_houkatu_mst");
                });

            modelBuilder.Entity("Entity.Tenant.KouiKbnMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("KouiKbnId")
                        .HasColumnType("integer")
                        .HasColumnName("koui_kbn_id")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("ExcKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("exc_koui_kbn");

                    b.Property<string>("KouiGrpName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("koui_grp_name");

                    b.Property<int>("KouiKbn1")
                        .HasColumnType("integer")
                        .HasColumnName("koui_kbn1");

                    b.Property<int>("KouiKbn2")
                        .HasColumnType("integer")
                        .HasColumnName("koui_kbn2");

                    b.Property<string>("KouiName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("koui_name");

                    b.Property<int>("OyaKouiKbnId")
                        .HasColumnType("integer")
                        .HasColumnName("oya_koui_kbn_id");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.HasKey("HpId", "KouiKbnId");

                    b.ToTable("koui_kbn_mst");
                });

            modelBuilder.Entity("Entity.Tenant.LimitCntListInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("KohiId")
                        .HasColumnType("integer")
                        .HasColumnName("kohi_id")
                        .HasColumnOrder(3);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(5);

                    b.Property<string>("Biko")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("biko");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_pid");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<long>("OyaRaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("oya_raiin_no");

                    b.Property<string>("SortKey")
                        .HasMaxLength(61)
                        .HasColumnType("character varying(61)")
                        .HasColumnName("sort_key");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "KohiId", "SinDate", "SeqNo");

                    b.ToTable("limit_cnt_list_inf");
                });

            modelBuilder.Entity("Entity.Tenant.LimitListInf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Biko")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("biko");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("FutanGaku")
                        .HasColumnType("integer")
                        .HasColumnName("futan_gaku");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_pid");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("KohiId")
                        .HasColumnType("integer")
                        .HasColumnName("kohi_id");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<string>("SortKey")
                        .HasMaxLength(61)
                        .HasColumnType("character varying(61)")
                        .HasColumnName("sort_key");

                    b.Property<int>("TotalGaku")
                        .HasColumnType("integer")
                        .HasColumnName("total_gaku");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PtId", "KohiId", "SinDate", "SeqNo" }, "limit_list_inf_idx01");

                    b.ToTable("limit_list_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ListSetGenerationMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GenerationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("generation_id")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenerationId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GenerationId");

                    b.ToTable("list_set_generation_mst");
                });

            modelBuilder.Entity("Entity.Tenant.ListSetMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GenerationId")
                        .HasColumnType("integer")
                        .HasColumnName("generation_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("set_id")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SetId"));

                    b.Property<string>("CmtName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("cmt_name");

                    b.Property<string>("CmtOpt")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("cmt_opt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsTitle")
                        .HasColumnType("integer")
                        .HasColumnName("is_title");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<int>("Level1")
                        .HasColumnType("integer")
                        .HasColumnName("level1");

                    b.Property<int>("Level2")
                        .HasColumnType("integer")
                        .HasColumnName("level2");

                    b.Property<int>("Level3")
                        .HasColumnType("integer")
                        .HasColumnName("level3");

                    b.Property<int>("Level4")
                        .HasColumnType("integer")
                        .HasColumnName("level4");

                    b.Property<int>("Level5")
                        .HasColumnType("integer")
                        .HasColumnName("level5");

                    b.Property<int>("SelectType")
                        .HasColumnType("integer")
                        .HasColumnName("select_type");

                    b.Property<int>("SetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("set_kbn");

                    b.Property<string>("SetName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("set_name");

                    b.Property<int>("SikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sikyu_kbn");

                    b.Property<double>("Suryo")
                        .HasColumnType("double precision")
                        .HasColumnName("suryo");

                    b.Property<int>("UnitSbt")
                        .HasColumnType("integer")
                        .HasColumnName("unit_sbt");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GenerationId", "SetId");

                    b.ToTable("list_set_mst");
                });

            modelBuilder.Entity("Entity.Tenant.LockInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<string>("FunctionCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("function_cd")
                        .HasColumnOrder(3);

                    b.Property<long>("SinDate")
                        .HasColumnType("bigint")
                        .HasColumnName("sin_date")
                        .HasColumnOrder(4);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(5);

                    b.Property<long>("OyaRaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("oya_raiin_no")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("LockDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lock_date");

                    b.Property<string>("LoginKey")
                        .HasColumnType("text")
                        .HasColumnName("loginkey");

                    b.Property<string>("Machine")
                        .HasColumnType("text")
                        .HasColumnName("machine");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("HpId", "PtId", "FunctionCd", "SinDate", "RaiinNo", "OyaRaiinNo");

                    b.HasIndex("HpId", "PtId", "UserId")
                        .IsUnique()
                        .HasFilter("\"function_cd\" IN ('02000000', '03000000')");

                    b.ToTable("lock_inf");
                });

            modelBuilder.Entity("Entity.Tenant.LockMst", b =>
                {
                    b.Property<string>("FunctionCdA")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("function_cd_a")
                        .HasColumnOrder(1);

                    b.Property<string>("FunctionCdB")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("function_cd_b")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("is_invalid");

                    b.Property<int>("LockLevel")
                        .HasColumnType("integer")
                        .HasColumnName("lock_level");

                    b.Property<int>("LockRange")
                        .HasColumnType("integer")
                        .HasColumnName("lock_range");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("FunctionCdA", "FunctionCdB");

                    b.ToTable("lock_mst");
                });

            modelBuilder.Entity("Entity.Tenant.M01KijyoCmt", b =>
                {
                    b.Property<string>("CmtCd")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("cmt_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("Cmt")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("cmt");

                    b.HasKey("CmtCd");

                    b.ToTable("m01_kijyo_cmt");
                });

            modelBuilder.Entity("Entity.Tenant.M01Kinki", b =>
                {
                    b.Property<string>("ACd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("a_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("BCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("b_cd")
                        .HasColumnOrder(2);

                    b.Property<string>("CmtCd")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("cmt_cd")
                        .HasColumnOrder(3);

                    b.Property<string>("SayokijyoCd")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("sayokijyo_cd")
                        .HasColumnOrder(4);

                    b.Property<string>("DataKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("data_kbn");

                    b.Property<string>("Kyodo")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("kyodo");

                    b.Property<string>("KyodoCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kyodo_cd");

                    b.HasKey("ACd", "BCd", "CmtCd", "SayokijyoCd");

                    b.ToTable("m01_kinki");
                });

            modelBuilder.Entity("Entity.Tenant.M01KinkiCmt", b =>
                {
                    b.Property<string>("CmtCd")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("cmt_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("Cmt")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("cmt");

                    b.HasKey("CmtCd");

                    b.ToTable("m01_kinki_cmt");
                });

            modelBuilder.Entity("Entity.Tenant.M10DayLimit", b =>
                {
                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("yj_cd")
                        .HasColumnOrder(1);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(2);

                    b.Property<string>("Cmt")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("cmt");

                    b.Property<string>("EdDate")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("ed_date");

                    b.Property<int>("LimitDay")
                        .HasColumnType("integer")
                        .HasColumnName("limit_day");

                    b.Property<string>("StDate")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("st_date");

                    b.HasKey("YjCd", "SeqNo");

                    b.ToTable("m10_day_limit");
                });

            modelBuilder.Entity("Entity.Tenant.M12FoodAlrgy", b =>
                {
                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("yj_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("FoodKbn")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("food_kbn")
                        .HasColumnOrder(2);

                    b.Property<string>("TenpuLevel")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("tenpu_level")
                        .HasColumnOrder(3);

                    b.Property<string>("AttentionCmt")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("attention_cmt");

                    b.Property<string>("KikinCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("kikin_cd");

                    b.Property<string>("WorkingMechanism")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("working_mechanism");

                    b.HasKey("YjCd", "FoodKbn", "TenpuLevel");

                    b.HasIndex(new[] { "KikinCd", "YjCd", "FoodKbn", "TenpuLevel" }, "m12_food_alrgy_idx01");

                    b.ToTable("m12_food_alrgy");
                });

            modelBuilder.Entity("Entity.Tenant.M12FoodAlrgyKbn", b =>
                {
                    b.Property<string>("FoodKbn")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("food_kbn")
                        .HasColumnOrder(1);

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("food_name");

                    b.HasKey("FoodKbn");

                    b.ToTable("m12_food_alrgy_kbn");
                });

            modelBuilder.Entity("Entity.Tenant.M14AgeCheck", b =>
                {
                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("yj_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("AttentionCmtCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("attention_cmt_cd")
                        .HasColumnOrder(2);

                    b.Property<string>("AgeKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("age_kbn");

                    b.Property<double>("AgeMax")
                        .HasColumnType("double precision")
                        .HasColumnName("age_max");

                    b.Property<double>("AgeMin")
                        .HasColumnType("double precision")
                        .HasColumnName("age_min");

                    b.Property<string>("SexKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("sex_kbn");

                    b.Property<string>("TenpuLevel")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("tenpu_level");

                    b.Property<string>("WeightKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("weight_kbn");

                    b.Property<double>("WeightMax")
                        .HasColumnType("double precision")
                        .HasColumnName("weight_max");

                    b.Property<double>("WeightMin")
                        .HasColumnType("double precision")
                        .HasColumnName("weight_min");

                    b.Property<string>("WorkingMechanism")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("working_mechanism");

                    b.HasKey("YjCd", "AttentionCmtCd");

                    b.ToTable("m14_age_check");
                });

            modelBuilder.Entity("Entity.Tenant.M14CmtCode", b =>
                {
                    b.Property<string>("AttentionCmtCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("attention_cmt_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("AttentionCmt")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("attention_cmt");

                    b.HasKey("AttentionCmtCd");

                    b.ToTable("m14_cmt_code");
                });

            modelBuilder.Entity("Entity.Tenant.M28DrugMst", b =>
                {
                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("yj_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("DokuyakuFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("dokuyaku_flg");

                    b.Property<string>("DrugKana1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("drug_kana1");

                    b.Property<string>("DrugKana2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("drug_kana2");

                    b.Property<string>("DrugKbn")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("drug_kbn");

                    b.Property<string>("DrugKbnCd")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("drug_kbn_cd");

                    b.Property<string>("DrugName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("drug_name");

                    b.Property<string>("FormKbn")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("form_kbn");

                    b.Property<string>("FormKbnCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("form_kbn_cd");

                    b.Property<string>("GekiyakuFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("gekiyaku_flg");

                    b.Property<string>("HaigoFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("haigo_flg");

                    b.Property<string>("IpnKana")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ipn_kana");

                    b.Property<string>("IpnName")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("ipn_name");

                    b.Property<string>("KakuseizaiFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("kakuseizai_flg");

                    b.Property<string>("KakuseizaiGenryoFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("kakuseizai_genryo_flg");

                    b.Property<string>("KeikasotiDate")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("keikasoti_date");

                    b.Property<string>("KeySeibun")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("key_seibun");

                    b.Property<string>("KikakuUnit")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("kikaku_unit");

                    b.Property<string>("KikinCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("kikin_cd");

                    b.Property<string>("KohatuFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("kohatu_flg");

                    b.Property<string>("KoseisinyakuFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("koseisinyaku_flg");

                    b.Property<string>("KoseisyoCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("koseisyo_cd");

                    b.Property<string>("MainDrugCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("main_drug_cd");

                    b.Property<string>("MainDrugKana")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("main_drug_kana");

                    b.Property<string>("MainDrugName")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("main_drug_name");

                    b.Property<string>("MainDrugNameFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("main_drug_name_flg");

                    b.Property<string>("MakerCd")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("maker_cd");

                    b.Property<string>("MakerName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("maker_name");

                    b.Property<string>("MayakuFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("mayaku_flg");

                    b.Property<double>("SeibunRikika")
                        .HasColumnType("double precision")
                        .HasColumnName("seibun_rikika");

                    b.Property<string>("SeibunRikikaUnit")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("seibun_rikika_unit");

                    b.Property<string>("SeibutuFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("seibutu_flg");

                    b.Property<double>("SeirikiYoryoRate")
                        .HasColumnType("double precision")
                        .HasColumnName("seiriki_yoryo_rate");

                    b.Property<string>("SeirikiYoryoUnit")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("seiriki_yoryo_unit");

                    b.Property<string>("SpSeibutuFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("sp_seibutu_flg");

                    b.Property<double>("Yakka")
                        .HasColumnType("double precision")
                        .HasColumnName("yakka");

                    b.Property<string>("YakkaRateFormura")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("yakka_rate_formura");

                    b.Property<string>("YakkaRateUnit")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("yakka_rate_unit");

                    b.Property<string>("YakkaSyusaiDate")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("yakka_syusai_date");

                    b.Property<string>("YakkaUnit")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("yakka_unit");

                    b.Property<int>("YakkaVal")
                        .HasColumnType("integer")
                        .HasColumnName("yakka_val");

                    b.Property<double>("YoryoJyuryo")
                        .HasColumnType("double precision")
                        .HasColumnName("yoryo_jyuryo");

                    b.Property<string>("YoryoJyuryoUnit")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("yoryo_jyuryo_unit");

                    b.HasKey("YjCd");

                    b.ToTable("m28_drug_mst");
                });

            modelBuilder.Entity("Entity.Tenant.M34ArCode", b =>
                {
                    b.Property<string>("FukusayoCd")
                        .HasColumnType("text")
                        .HasColumnName("fukusayo_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("FukusayoCmt")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("fukusayo_cmt");

                    b.HasKey("FukusayoCd");

                    b.ToTable("m34_ar_code");
                });

            modelBuilder.Entity("Entity.Tenant.M34ArDiscon", b =>
                {
                    b.Property<string>("YjCd")
                        .HasColumnType("text")
                        .HasColumnName("yj_cd")
                        .HasColumnOrder(1);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(2);

                    b.Property<string>("FukusayoCd")
                        .HasColumnType("text")
                        .HasColumnName("fukusayo_cd");

                    b.HasKey("YjCd", "SeqNo");

                    b.ToTable("m34_ar_discon");
                });

            modelBuilder.Entity("Entity.Tenant.M34ArDisconCode", b =>
                {
                    b.Property<string>("FukusayoCd")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("fukusayo_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("FukusayoCmt")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("fukusayo_cmt");

                    b.HasKey("FukusayoCd");

                    b.ToTable("m34_ar_discon_code");
                });

            modelBuilder.Entity("Entity.Tenant.M34DrugInfoMain", b =>
                {
                    b.Property<string>("YjCd")
                        .HasColumnType("text")
                        .HasColumnName("yj_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("color");

                    b.Property<string>("FormCd")
                        .HasColumnType("text")
                        .HasColumnName("form_cd");

                    b.Property<string>("FukusayoCd")
                        .HasColumnType("text")
                        .HasColumnName("fukusayo_cd");

                    b.Property<string>("FukusayoInitCd")
                        .HasColumnType("text")
                        .HasColumnName("fukusayo_init_cd");

                    b.Property<string>("KonoCd")
                        .HasColumnType("text")
                        .HasColumnName("kono_cd");

                    b.Property<string>("Mark")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("mark");

                    b.HasKey("YjCd");

                    b.ToTable("m34_drug_info_main");
                });

            modelBuilder.Entity("Entity.Tenant.M34FormCode", b =>
                {
                    b.Property<string>("FormCd")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("form_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("Form")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("form");

                    b.HasKey("FormCd");

                    b.ToTable("m34_form_code");
                });

            modelBuilder.Entity("Entity.Tenant.M34IndicationCode", b =>
                {
                    b.Property<string>("KonoCd")
                        .HasColumnType("text")
                        .HasColumnName("kono_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("KonoDetailCmt")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("kono_detail_cmt");

                    b.Property<string>("KonoSimpleCmt")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("kono_simple_cmt");

                    b.HasKey("KonoCd");

                    b.ToTable("m34_indication_code");
                });

            modelBuilder.Entity("Entity.Tenant.M34InteractionPat", b =>
                {
                    b.Property<string>("YjCd")
                        .HasColumnType("text")
                        .HasColumnName("yj_cd")
                        .HasColumnOrder(1);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(2);

                    b.Property<string>("InteractionPatCd")
                        .HasColumnType("text")
                        .HasColumnName("interaction_pat_cd");

                    b.HasKey("YjCd", "SeqNo");

                    b.ToTable("m34_interaction_pat");
                });

            modelBuilder.Entity("Entity.Tenant.M34InteractionPatCode", b =>
                {
                    b.Property<string>("InteractionPatCd")
                        .HasColumnType("text")
                        .HasColumnName("interaction_pat_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("InteractionPatCmt")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("interaction_pat_cmt");

                    b.HasKey("InteractionPatCd");

                    b.ToTable("m34_interaction_pat_code");
                });

            modelBuilder.Entity("Entity.Tenant.M34Precaution", b =>
                {
                    b.Property<string>("YjCd")
                        .HasColumnType("text")
                        .HasColumnName("yj_cd")
                        .HasColumnOrder(1);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(2);

                    b.Property<string>("PrecautionCd")
                        .HasColumnType("text")
                        .HasColumnName("precaution_cd");

                    b.HasKey("YjCd", "SeqNo");

                    b.ToTable("m34_precautions");
                });

            modelBuilder.Entity("Entity.Tenant.M34PrecautionCode", b =>
                {
                    b.Property<string>("PrecautionCd")
                        .HasColumnType("text")
                        .HasColumnName("precaution_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("ExtendCd")
                        .HasColumnType("text")
                        .HasColumnName("extend_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("AgeMax")
                        .HasColumnType("integer")
                        .HasColumnName("age_max");

                    b.Property<int>("AgeMin")
                        .HasColumnType("integer")
                        .HasColumnName("age_min");

                    b.Property<string>("PrecautionCmt")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("precaution_cmt");

                    b.Property<int>("PropertyCd")
                        .HasColumnType("integer")
                        .HasColumnName("property_cd");

                    b.Property<string>("SexCd")
                        .HasColumnType("text")
                        .HasColumnName("sex_cd");

                    b.HasKey("PrecautionCd", "ExtendCd");

                    b.HasIndex(new[] { "AgeMin", "AgeMax", "SexCd" }, "m34_precaution_code_age_min_idx");

                    b.ToTable("m34_precaution_code");
                });

            modelBuilder.Entity("Entity.Tenant.M34PropertyCode", b =>
                {
                    b.Property<int>("PropertyCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("property_cd")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PropertyCd"));

                    b.Property<string>("Property")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("property");

                    b.HasKey("PropertyCd");

                    b.ToTable("m34_property_code");
                });

            modelBuilder.Entity("Entity.Tenant.M34SarSymptomCode", b =>
                {
                    b.Property<string>("FukusayoInitCd")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("fukusayo_init_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("FukusayoInitCmt")
                        .HasColumnType("text")
                        .HasColumnName("fukusayo_init_cmt");

                    b.HasKey("FukusayoInitCd");

                    b.ToTable("m34_sar_symptom_code");
                });

            modelBuilder.Entity("Entity.Tenant.M38ClassCode", b =>
                {
                    b.Property<string>("ClassCd")
                        .HasColumnType("text")
                        .HasColumnName("class_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("ClassName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("class_name");

                    b.Property<string>("MajorDivCd")
                        .HasColumnType("text")
                        .HasColumnName("major_div_cd");

                    b.HasKey("ClassCd");

                    b.ToTable("m38_class_code");
                });

            modelBuilder.Entity("Entity.Tenant.M38IngCode", b =>
                {
                    b.Property<string>("SeibunCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("seibun_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("Seibun")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("seibun");

                    b.HasKey("SeibunCd");

                    b.ToTable("m38_ing_code");
                });

            modelBuilder.Entity("Entity.Tenant.M38Ingredients", b =>
                {
                    b.Property<string>("SeibunCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("seibun_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("SerialNum")
                        .HasColumnType("integer")
                        .HasColumnName("serial_num")
                        .HasColumnOrder(1);

                    b.Property<int>("Sbt")
                        .HasColumnType("integer")
                        .HasColumnName("sbt")
                        .HasColumnOrder(3);

                    b.HasKey("SeibunCd", "SerialNum", "Sbt");

                    b.ToTable("m38_ingredients");
                });

            modelBuilder.Entity("Entity.Tenant.M38MajorDivCode", b =>
                {
                    b.Property<string>("MajorDivCd")
                        .HasColumnType("text")
                        .HasColumnName("major_div_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("MajorDivName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("major_div_name");

                    b.HasKey("MajorDivCd");

                    b.ToTable("m38_major_div_code");
                });

            modelBuilder.Entity("Entity.Tenant.M38OtcFormCode", b =>
                {
                    b.Property<string>("FormCd")
                        .HasColumnType("text")
                        .HasColumnName("form_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("Form")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("form");

                    b.HasKey("FormCd");

                    b.ToTable("m38_otc_form_code");
                });

            modelBuilder.Entity("Entity.Tenant.M38OtcMain", b =>
                {
                    b.Property<int>("SerialNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("serial_num")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SerialNum"));

                    b.Property<string>("ClassCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("class_cd");

                    b.Property<string>("CompanyCd")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("company_cd");

                    b.Property<string>("DrugFormCd")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("drug_form_cd");

                    b.Property<string>("OtcCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("otc_cd");

                    b.Property<string>("TradeCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("trade_cd");

                    b.Property<string>("TradeKana")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("trade_kana");

                    b.Property<string>("TradeName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("trade_name");

                    b.Property<string>("YohoCd")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("yoho_cd");

                    b.HasKey("SerialNum");

                    b.ToTable("m38_otc_main");
                });

            modelBuilder.Entity("Entity.Tenant.M38OtcMakerCode", b =>
                {
                    b.Property<string>("MakerCd")
                        .HasColumnType("text")
                        .HasColumnName("maker_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("MakerKana")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("maker_kana");

                    b.Property<string>("MakerName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("maker_name");

                    b.HasKey("MakerCd");

                    b.ToTable("m38_otc_maker_code");
                });

            modelBuilder.Entity("Entity.Tenant.M41SuppleIndexcode", b =>
                {
                    b.Property<string>("SeibunCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("seibun_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("IndexCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("index_cd")
                        .HasColumnOrder(2);

                    b.HasKey("SeibunCd", "IndexCd");

                    b.ToTable("m41_supple_indexcode");
                });

            modelBuilder.Entity("Entity.Tenant.M41SuppleIndexdef", b =>
                {
                    b.Property<string>("SeibunCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("seibun_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("IndexWord")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("index_word");

                    b.Property<string>("TokuhoFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("tokuho_flg");

                    b.HasKey("SeibunCd");

                    b.ToTable("m41_supple_indexdef");
                });

            modelBuilder.Entity("Entity.Tenant.M41SuppleIngre", b =>
                {
                    b.Property<string>("SeibunCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("seibun_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("Seibun")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("seibun");

                    b.HasKey("SeibunCd");

                    b.ToTable("m41_supple_ingre");
                });

            modelBuilder.Entity("Entity.Tenant.M42ContraCmt", b =>
                {
                    b.Property<string>("CmtCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("cmt_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("Cmt")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("cmt");

                    b.HasKey("CmtCd");

                    b.ToTable("m42_contra_cmt");
                });

            modelBuilder.Entity("Entity.Tenant.M42ContraindiDisBc", b =>
                {
                    b.Property<string>("ByotaiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("byotai_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("ByotaiClassCd")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("byotai_class_cd")
                        .HasColumnOrder(2);

                    b.HasKey("ByotaiCd", "ByotaiClassCd");

                    b.ToTable("m42_contraindi_dis_bc");
                });

            modelBuilder.Entity("Entity.Tenant.M42ContraindiDisClass", b =>
                {
                    b.Property<string>("ByotaiClassCd")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("byotai_class_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("Byotai")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("byotai");

                    b.HasKey("ByotaiClassCd");

                    b.ToTable("m42_contraindi_dis_class");
                });

            modelBuilder.Entity("Entity.Tenant.M42ContraindiDisCon", b =>
                {
                    b.Property<string>("ByotaiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("byotai_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("Byomei")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("byomei");

                    b.Property<int>("ByotaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("byotai_kbn");

                    b.Property<string>("Icd10")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("icd10");

                    b.Property<string>("ReceCd")
                        .HasMaxLength(33)
                        .HasColumnType("character varying(33)")
                        .HasColumnName("rece_cd");

                    b.Property<string>("StandardByotai")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("standard_byotai");

                    b.HasKey("ByotaiCd");

                    b.ToTable("m42_contraindi_dis_con");
                });

            modelBuilder.Entity("Entity.Tenant.M42ContraindiDrugMainEx", b =>
                {
                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("yj_cd")
                        .HasColumnOrder(1);

                    b.Property<int>("TenpuLevel")
                        .HasColumnType("integer")
                        .HasColumnName("tenpu_level")
                        .HasColumnOrder(2);

                    b.Property<string>("ByotaiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("byotai_cd")
                        .HasColumnOrder(3);

                    b.Property<string>("CmtCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("cmt_cd")
                        .HasColumnOrder(4);

                    b.Property<string>("FamilyCd")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("family_cd");

                    b.Property<string>("KijyoCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("kijyo_cd");

                    b.Property<string>("KioCd")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("kio_cd");

                    b.Property<int>("Stage")
                        .HasColumnType("integer")
                        .HasColumnName("stage");

                    b.HasKey("YjCd", "TenpuLevel", "ByotaiCd", "CmtCd");

                    b.ToTable("m42_contraindi_drug_main_ex");
                });

            modelBuilder.Entity("Entity.Tenant.M56AlrgyDerivatives", b =>
                {
                    b.Property<string>("SeibunCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("seibun_cd")
                        .HasColumnOrder(3);

                    b.Property<string>("DrvalrgyCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("drvalrgy_cd")
                        .HasColumnOrder(2);

                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("yj_cd")
                        .HasColumnOrder(1);

                    b.HasKey("SeibunCd", "DrvalrgyCd", "YjCd");

                    b.ToTable("m56_alrgy_derivatives");
                });

            modelBuilder.Entity("Entity.Tenant.M56AnalogueCd", b =>
                {
                    b.Property<string>("AnalogueCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("analogue_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("AnalogueName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("analogue_name");

                    b.HasKey("AnalogueCd");

                    b.ToTable("m56_analogue_cd");
                });

            modelBuilder.Entity("Entity.Tenant.M56DrugClass", b =>
                {
                    b.Property<string>("ClassCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("class_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("ClassDuplication")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("class_duplication");

                    b.Property<string>("ClassName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("class_name");

                    b.HasKey("ClassCd");

                    b.ToTable("m56_drug_class");
                });

            modelBuilder.Entity("Entity.Tenant.M56DrvalrgyCode", b =>
                {
                    b.Property<string>("DrvalrgyCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("drvalrgy_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("DrvalrgyGrp")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("drvalrgy_grp");

                    b.Property<string>("DrvalrgyName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("drvalrgy_name");

                    b.Property<int>("RankNo")
                        .HasColumnType("integer")
                        .HasColumnName("rank_no");

                    b.HasKey("DrvalrgyCd");

                    b.ToTable("m56_drvalrgy_code");
                });

            modelBuilder.Entity("Entity.Tenant.M56ExAnalogue", b =>
                {
                    b.Property<string>("SeibunCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("seibun_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("SeqNo")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(2);

                    b.Property<string>("AnalogueCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("analogue_cd");

                    b.HasKey("SeibunCd", "SeqNo");

                    b.ToTable("m56_ex_analogue");
                });

            modelBuilder.Entity("Entity.Tenant.M56ExEdIngredients", b =>
                {
                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("yj_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("SeqNo")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(2);

                    b.Property<string>("AnalogueCheck")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("analogue_check");

                    b.Property<string>("ProdrugCheck")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("prodrug_check");

                    b.Property<int>("Sbt")
                        .HasColumnType("integer")
                        .HasColumnName("sbt");

                    b.Property<string>("SeibunCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("seibun_cd");

                    b.Property<string>("SeibunIndexCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("seibun_index_cd");

                    b.Property<string>("TenkabutuCheck")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("tenkabutu_check");

                    b.Property<string>("YokaiekiCheck")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("yokaieki_check");

                    b.HasKey("YjCd", "SeqNo");

                    b.ToTable("m56_ex_ed_ingredients");
                });

            modelBuilder.Entity("Entity.Tenant.M56ExIngCode", b =>
                {
                    b.Property<string>("SeibunCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("seibun_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("SeibunIndexCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("seibun_index_cd")
                        .HasColumnOrder(2);

                    b.Property<string>("SeibunName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("seibun_name");

                    b.Property<string>("YohoCd")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("yoho_cd");

                    b.HasKey("SeibunCd", "SeibunIndexCd");

                    b.ToTable("m56_ex_ing_code");
                });

            modelBuilder.Entity("Entity.Tenant.M56ExIngrdtMain", b =>
                {
                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("yj_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("DrugKbn")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("drug_kbn");

                    b.Property<string>("HaigouFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("haigou_flg");

                    b.Property<string>("KanpoFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("kanpo_flg");

                    b.Property<string>("YohoCd")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("yoho_cd");

                    b.Property<string>("YuekiFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("yueki_flg");

                    b.Property<string>("ZensinsayoFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("zensinsayo_flg");

                    b.HasKey("YjCd");

                    b.ToTable("m56_ex_ingrdt_main");
                });

            modelBuilder.Entity("Entity.Tenant.M56ProdrugCd", b =>
                {
                    b.Property<string>("SeqNo")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(2);

                    b.Property<string>("SeibunCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("seibun_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("KasseitaiCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("kasseitai_cd");

                    b.HasKey("SeqNo", "SeibunCd");

                    b.ToTable("m56_prodrug_cd");
                });

            modelBuilder.Entity("Entity.Tenant.M56UsageCode", b =>
                {
                    b.Property<string>("YohoCd")
                        .HasColumnType("text")
                        .HasColumnName("yoho_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("Yoho")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("yoho");

                    b.HasKey("YohoCd");

                    b.ToTable("m56_usage_code");
                });

            modelBuilder.Entity("Entity.Tenant.M56YjDrugClass", b =>
                {
                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("yj_cd")
                        .HasColumnOrder(1);

                    b.Property<string>("ClassCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("class_cd")
                        .HasColumnOrder(2);

                    b.HasKey("YjCd", "ClassCd");

                    b.ToTable("m56_yj_drug_class");
                });

            modelBuilder.Entity("Entity.Tenant.MallMessageInf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Message")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("message");

                    b.Property<int>("ReceiveNo")
                        .HasColumnType("integer")
                        .HasColumnName("receive_no");

                    b.Property<int>("SendNo")
                        .HasColumnType("integer")
                        .HasColumnName("send_no");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SinDate" }, "mall_message_inf_idx01");

                    b.ToTable("mall_message_inf");
                });

            modelBuilder.Entity("Entity.Tenant.MallRenkeiInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(2);

                    b.Property<int>("ClinicCd")
                        .HasColumnType("integer")
                        .HasColumnName("clinic_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("KaikeiNo")
                        .HasColumnType("integer")
                        .HasColumnName("kaikei_no");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("ReceiveNo")
                        .HasColumnType("integer")
                        .HasColumnName("receive_no");

                    b.Property<int>("SendFlg")
                        .HasColumnType("integer")
                        .HasColumnName("send_flg");

                    b.Property<int>("SendNo")
                        .HasColumnType("integer")
                        .HasColumnName("send_no");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<int>("SinsatuNo")
                        .HasColumnType("integer")
                        .HasColumnName("sinsatu_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("HpId", "RaiinNo");

                    b.ToTable("mall_renkei_inf");
                });

            modelBuilder.Entity("Entity.Tenant.MaterialMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("MaterialCd")
                        .HasColumnType("bigint")
                        .HasColumnName("material_cd")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("MaterialName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("material_name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "MaterialCd");

                    b.ToTable("material_mst");
                });

            modelBuilder.Entity("Entity.Tenant.MonshinInfo", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("GetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("get_kbn");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Rtext")
                        .HasColumnType("text")
                        .HasColumnName("rtext");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "RaiinNo", "SeqNo");

                    b.ToTable("monshin_inf");
                });

            modelBuilder.Entity("Entity.Tenant.OdrDateDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GrpId", "SeqNo");

                    b.HasIndex(new[] { "HpId", "GrpId", "ItemCd", "IsDeleted" }, "odr_date_detail_idx01");

                    b.ToTable("odr_date_detail");
                });

            modelBuilder.Entity("Entity.Tenant.OdrDateInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("GrpName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("grp_name");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GrpId");

                    b.HasIndex(new[] { "HpId", "GrpId", "IsDeleted" }, "odr_date_inf_idx01");

                    b.ToTable("odr_date_inf");
                });

            modelBuilder.Entity("Entity.Tenant.OdrInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(2);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_no")
                        .HasColumnOrder(3);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_eda_no")
                        .HasColumnOrder(4);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("DaysCnt")
                        .HasColumnType("integer")
                        .HasColumnName("days_cnt");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_pid");

                    b.Property<int>("InoutKbn")
                        .HasColumnType("integer")
                        .HasColumnName("inout_kbn");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("OdrKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("odr_koui_kbn");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<string>("RpName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("rp_name");

                    b.Property<int>("SanteiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("santei_kbn");

                    b.Property<int>("SikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sikyu_kbn");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("SyohoSbt")
                        .HasColumnType("integer")
                        .HasColumnName("syoho_sbt");

                    b.Property<int>("TosekiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("toseki_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "RaiinNo", "RpNo", "RpEdaNo", "Id");

                    b.HasIndex(new[] { "HpId", "PtId", "SinDate", "IsDeleted" }, "odr_inf_idx01");

                    b.HasIndex(new[] { "RaiinNo", "OdrKouiKbn", "InoutKbn", "IsDeleted" }, "odr_inf_raiin_no_idx");

                    b.ToTable("odr_inf");
                });

            modelBuilder.Entity("Entity.Tenant.OdrInfCmt", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(2);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_no")
                        .HasColumnOrder(3);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_eda_no")
                        .HasColumnOrder(4);

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("row_no")
                        .HasColumnOrder(5);

                    b.Property<int>("EdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("eda_no")
                        .HasColumnOrder(6);

                    b.Property<string>("CmtCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cmt_cd");

                    b.Property<string>("CmtName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("cmt_name");

                    b.Property<string>("CmtOpt")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("cmt_opt");

                    b.Property<int>("FontColor")
                        .HasColumnType("integer")
                        .HasColumnName("font_color");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.HasKey("HpId", "RaiinNo", "RpNo", "RpEdaNo", "RowNo", "EdaNo");

                    b.ToTable("odr_inf_cmt");
                });

            modelBuilder.Entity("Entity.Tenant.OdrInfDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(2);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_no")
                        .HasColumnOrder(3);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_eda_no")
                        .HasColumnOrder(4);

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("row_no")
                        .HasColumnOrder(5);

                    b.Property<string>("Bunkatu")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("bunkatu");

                    b.Property<string>("CmtName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("cmt_name");

                    b.Property<string>("CmtOpt")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("cmt_opt");

                    b.Property<int>("CommentNewline")
                        .HasColumnType("integer")
                        .HasColumnName("comment_newline");

                    b.Property<int>("DrugKbn")
                        .HasColumnType("integer")
                        .HasColumnName("drug_kbn");

                    b.Property<string>("FontColor")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("font_color");

                    b.Property<string>("IpnCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("ipn_cd");

                    b.Property<string>("IpnName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("ipn_name");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_rece");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<string>("ItemName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("item_name");

                    b.Property<DateTime?>("JissiDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("jissi_date");

                    b.Property<int>("JissiId")
                        .HasColumnType("integer")
                        .HasColumnName("jissi_id");

                    b.Property<int>("JissiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("jissi_kbn");

                    b.Property<string>("JissiMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("jissi_machine");

                    b.Property<int>("KohatuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kohatu_kbn");

                    b.Property<string>("Kokiji2")
                        .HasColumnType("text")
                        .HasColumnName("kokuji2");

                    b.Property<string>("Kokuji1")
                        .HasColumnType("text")
                        .HasColumnName("kokuji1");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<string>("ReqCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("req_cd");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<int>("SinKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sin_koui_kbn");

                    b.Property<double>("Suryo")
                        .HasColumnType("double precision")
                        .HasColumnName("suryo");

                    b.Property<int>("SyohoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("syoho_kbn");

                    b.Property<int>("SyohoLimitKbn")
                        .HasColumnType("integer")
                        .HasColumnName("syoho_limit_kbn");

                    b.Property<double>("TermVal")
                        .HasColumnType("double precision")
                        .HasColumnName("term_val");

                    b.Property<string>("UnitName")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("unit_name");

                    b.Property<int>("UnitSBT")
                        .HasColumnType("integer")
                        .HasColumnName("unit_sbt");

                    b.Property<int>("YohoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("yoho_kbn");

                    b.HasKey("HpId", "RaiinNo", "RpNo", "RpEdaNo", "RowNo");

                    b.HasIndex(new[] { "HpId", "PtId", "RaiinNo", "ItemCd" }, "odr_inf_detail_idx01");

                    b.HasIndex(new[] { "ItemCd" }, "odr_inf_detail_idx02");

                    b.HasIndex(new[] { "SinDate", "PtId", "RaiinNo" }, "odr_inf_detail_idx03");

                    b.HasIndex(new[] { "PtId", "SinDate", "ItemCd" }, "odr_inf_detail_idx04");

                    b.ToTable("odr_inf_detail");
                });

            modelBuilder.Entity("Entity.Tenant.OnlineConfirmation", b =>
                {
                    b.Property<string>("ReceptionNo")
                        .HasColumnType("text")
                        .HasColumnName("reception_no");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("error_message");

                    b.Property<DateTime>("ReceptionDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reception_datetime");

                    b.Property<string>("SegmentOfResult")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("segment_of_result");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<int>("YoyakuDate")
                        .HasColumnType("integer")
                        .HasColumnName("yoyaku_date");

                    b.HasKey("ReceptionNo");

                    b.ToTable("online_confirmation");
                });

            modelBuilder.Entity("Entity.Tenant.OnlineConfirmationHistory", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("ConfirmationResult")
                        .HasColumnType("text")
                        .HasColumnName("confirmation_result");

                    b.Property<int>("ConfirmationType")
                        .HasColumnType("integer")
                        .HasColumnName("confirmation_type");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("InfoConsFlg")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("info_cons_flg");

                    b.Property<DateTime>("OnlineConfirmationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("online_confirmation_date");

                    b.Property<int>("PrescriptionIssueType")
                        .HasColumnType("integer")
                        .HasColumnName("prescription_issue_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("UketukeStatus")
                        .HasColumnType("integer")
                        .HasColumnName("uketuke_status");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "ID" }, "online_confirmation_history_idx01");

                    b.ToTable("online_confirmation_history");
                });

            modelBuilder.Entity("Entity.Tenant.OnlineConsent", b =>
                {
                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(1);

                    b.Property<int>("ConsKbn")
                        .HasColumnType("integer")
                        .HasColumnName("cons_kbn")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("ConsDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cons_date");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<DateTime>("LimitDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("limit_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("PtId", "ConsKbn");

                    b.ToTable("online_consent");
                });

            modelBuilder.Entity("Entity.Tenant.PathConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("grp_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("GrpEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("grp_eda_no")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<string>("Biko")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("biko");

                    b.Property<int>("CharCd")
                        .HasColumnType("integer")
                        .HasColumnName("char_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("is_invalid");

                    b.Property<string>("Machine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("machine");

                    b.Property<string>("Param")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("param");

                    b.Property<string>("Path")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("path");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GrpCd", "GrpEdaNo", "SeqNo");

                    b.HasIndex(new[] { "HpId", "GrpCd", "GrpEdaNo", "Machine", "IsInvalid" }, "pt_path_conf_idx01");

                    b.HasIndex(new[] { "HpId", "GrpCd", "GrpEdaNo", "SeqNo" }, "pt_path_conf_pkey");

                    b.ToTable("path_conf");
                });

            modelBuilder.Entity("Entity.Tenant.PaymentMethodMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("PaymentMethodCd")
                        .HasColumnType("integer")
                        .HasColumnName("payment_method_cd")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("PayName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("pay_name");

                    b.Property<string>("PaySname")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("pay_sname");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PaymentMethodCd");

                    b.ToTable("payment_method_mst");
                });

            modelBuilder.Entity("Entity.Tenant.PermissionMst", b =>
                {
                    b.Property<string>("FunctionCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("function_cd")
                        .HasColumnOrder(1);

                    b.Property<int>("Permission")
                        .HasColumnType("integer")
                        .HasColumnName("permission")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("FunctionCd", "Permission");

                    b.HasIndex(new[] { "FunctionCd", "Permission" }, "permission_mst_pkey");

                    b.ToTable("permission_mst");
                });

            modelBuilder.Entity("Entity.Tenant.PhysicalAverage", b =>
                {
                    b.Property<int>("JissiYear")
                        .HasColumnType("integer")
                        .HasColumnName("jissi_year")
                        .HasColumnOrder(1);

                    b.Property<int>("AgeYear")
                        .HasColumnType("integer")
                        .HasColumnName("age_year")
                        .HasColumnOrder(2);

                    b.Property<int>("AgeMonth")
                        .HasColumnType("integer")
                        .HasColumnName("age_month")
                        .HasColumnOrder(3);

                    b.Property<int>("AgeDay")
                        .HasColumnType("integer")
                        .HasColumnName("age_day")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<double>("FemaleChest")
                        .HasColumnType("double precision")
                        .HasColumnName("female_chest");

                    b.Property<double>("FemaleHead")
                        .HasColumnType("double precision")
                        .HasColumnName("female_head");

                    b.Property<double>("FemaleHeight")
                        .HasColumnType("double precision")
                        .HasColumnName("female_height");

                    b.Property<double>("FemaleWeight")
                        .HasColumnType("double precision")
                        .HasColumnName("female_weight");

                    b.Property<double>("MaleChest")
                        .HasColumnType("double precision")
                        .HasColumnName("male_chest");

                    b.Property<double>("MaleHead")
                        .HasColumnType("double precision")
                        .HasColumnName("male_head");

                    b.Property<double>("MaleHeight")
                        .HasColumnType("double precision")
                        .HasColumnName("male_height");

                    b.Property<double>("MaleWeight")
                        .HasColumnType("double precision")
                        .HasColumnName("male_weight");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("JissiYear", "AgeYear", "AgeMonth", "AgeDay");

                    b.ToTable("physical_average");
                });

            modelBuilder.Entity("Entity.Tenant.PiImage", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("ImageType")
                        .HasColumnType("integer")
                        .HasColumnName("image_type")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("FileName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("file_name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "ImageType", "ItemCd");

                    b.ToTable("pi_image");
                });

            modelBuilder.Entity("Entity.Tenant.PiInf", b =>
                {
                    b.Property<string>("PiId")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("pi_id")
                        .HasColumnOrder(1);

                    b.Property<string>("Commonname")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("commonname");

                    b.Property<string>("Feature")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("feature");

                    b.Property<string>("Genericname")
                        .HasColumnType("text")
                        .HasColumnName("genericname");

                    b.Property<string>("Highlight")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("highlight");

                    b.Property<string>("PreparationName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("preparation_name");

                    b.Property<int>("RDate")
                        .HasColumnType("integer")
                        .HasColumnName("r_date");

                    b.Property<string>("RReason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("r_reason");

                    b.Property<string>("RType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("r_type");

                    b.Property<string>("Relatedmatter")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("relatedmatter");

                    b.Property<string>("Revision")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("revision");

                    b.Property<string>("Sccjno")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("sccjno");

                    b.Property<string>("Therapeuticclassification")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("therapeuticclassification");

                    b.Property<string>("Title")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("title");

                    b.Property<int>("WDate")
                        .HasColumnType("integer")
                        .HasColumnName("w_date");

                    b.HasKey("PiId");

                    b.ToTable("pi_inf");
                });

            modelBuilder.Entity("Entity.Tenant.PiInfDetail", b =>
                {
                    b.Property<string>("PiId")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("pi_id")
                        .HasColumnOrder(1);

                    b.Property<string>("Branch")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("branch")
                        .HasColumnOrder(2);

                    b.Property<string>("Jpn")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("jpn")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("PiId", "Branch", "Jpn", "SeqNo");

                    b.ToTable("pi_inf_detail");
                });

            modelBuilder.Entity("Entity.Tenant.PiProductInf", b =>
                {
                    b.Property<string>("PiIdFull")
                        .HasColumnType("text")
                        .HasColumnName("pi_id_full");

                    b.Property<string>("PiId")
                        .HasColumnType("text")
                        .HasColumnName("pi_id")
                        .HasColumnOrder(1);

                    b.Property<string>("Branch")
                        .HasColumnType("text")
                        .HasColumnName("branch")
                        .HasColumnOrder(2);

                    b.Property<string>("Jpn")
                        .HasColumnType("text")
                        .HasColumnName("jpn")
                        .HasColumnOrder(3);

                    b.Property<string>("BikoPiBranch")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("biko_pi_branch");

                    b.Property<string>("BikoPiUnit")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("biko_pi_unit");

                    b.Property<string>("GeneralNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("general_no");

                    b.Property<string>("GenericEngName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("generic_eng_name");

                    b.Property<string>("GenericName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("generic_name");

                    b.Property<string>("HotCd")
                        .HasColumnType("text")
                        .HasColumnName("hot_cd");

                    b.Property<string>("IsStoped")
                        .HasColumnType("text")
                        .HasColumnName("is_stoped");

                    b.Property<string>("Maker")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("maker");

                    b.Property<string>("Marketer")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("marketer");

                    b.Property<string>("Other")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("other");

                    b.Property<string>("PiSbt")
                        .HasColumnType("text")
                        .HasColumnName("pi_sbt");

                    b.Property<string>("PiState")
                        .HasColumnType("text")
                        .HasColumnName("pi_state");

                    b.Property<string>("ProductName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("product_name");

                    b.Property<string>("SosyoName")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("sosyo_name");

                    b.Property<string>("StopDate")
                        .HasColumnType("text")
                        .HasColumnName("stop_date");

                    b.Property<string>("Unit")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("unit");

                    b.Property<DateTime?>("UpdDateImg")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("upd_date_img");

                    b.Property<DateTime?>("UpdDatePi")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("upd_date_pi");

                    b.Property<DateTime?>("UpdDateProduct")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("upd_date_product");

                    b.Property<DateTime?>("UpdDateXml")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("upd_date_xml");

                    b.Property<string>("Vender")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("vender");

                    b.Property<string>("VerDate")
                        .HasColumnType("text")
                        .HasColumnName("ver_date");

                    b.Property<string>("YakkaDel")
                        .HasColumnType("text")
                        .HasColumnName("yakka_del");

                    b.Property<string>("YakkaReg")
                        .HasColumnType("text")
                        .HasColumnName("yakka_reg");

                    b.Property<string>("YjCd")
                        .HasColumnType("text")
                        .HasColumnName("yj_cd");

                    b.HasKey("PiIdFull", "PiId", "Branch", "Jpn");

                    b.ToTable("pi_product_inf");
                });

            modelBuilder.Entity("Entity.Tenant.PostCodeMst", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Banti")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("banti");

                    b.Property<string>("CityKana")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("city_kana");

                    b.Property<string>("CityName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("city_name");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("PostCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("post_cd");

                    b.Property<string>("PostalTermKana")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("postal_term_kana");

                    b.Property<string>("PrefKana")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("pref_kana");

                    b.Property<string>("PrefName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("pref_name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "HpId", "PostCd", "IsDeleted" }, "pt_post_code_mst_idx01");

                    b.ToTable("post_code_mst");
                });

            modelBuilder.Entity("Entity.Tenant.PriorityHaihanMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("HaihanGrp")
                        .HasColumnType("bigint")
                        .HasColumnName("haihan_grp")
                        .HasColumnOrder(2);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(3);

                    b.Property<int>("UserSetting")
                        .HasColumnType("integer")
                        .HasColumnName("user_setting")
                        .HasColumnOrder(4);

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("is_invalid");

                    b.Property<string>("ItemCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd1");

                    b.Property<string>("ItemCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd2");

                    b.Property<string>("ItemCd3")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd3");

                    b.Property<string>("ItemCd4")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd4");

                    b.Property<string>("ItemCd5")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd5");

                    b.Property<string>("ItemCd6")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd6");

                    b.Property<string>("ItemCd7")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd7");

                    b.Property<string>("ItemCd8")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd8");

                    b.Property<string>("ItemCd9")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd9");

                    b.Property<int>("SpJyoken")
                        .HasColumnType("integer")
                        .HasColumnName("sp_jyoken");

                    b.Property<int>("TargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("target_kbn");

                    b.Property<int>("TermCnt")
                        .HasColumnType("integer")
                        .HasColumnName("term_cnt");

                    b.Property<int>("TermSbt")
                        .HasColumnType("integer")
                        .HasColumnName("term_sbt");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "HaihanGrp", "StartDate", "UserSetting");

                    b.ToTable("priority_haihan_mst");
                });

            modelBuilder.Entity("Entity.Tenant.PtAlrgyDrug", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("DrugName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("drug_name");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.ToTable("pt_alrgy_drug");
                });

            modelBuilder.Entity("Entity.Tenant.PtAlrgyElse", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<string>("AlrgyName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("alrgy_name");

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.ToTable("pt_alrgy_else");
                });

            modelBuilder.Entity("Entity.Tenant.PtAlrgyFood", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<string>("AlrgyKbn")
                        .HasColumnType("text")
                        .HasColumnName("alrgy_kbn");

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.ToTable("pt_alrgy_food");
                });

            modelBuilder.Entity("Entity.Tenant.PtByomei", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Byomei")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("byomei");

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("byomei_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_pid");

                    b.Property<string>("HosokuCmt")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("hosoku_cmt");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsImportant")
                        .HasColumnType("integer")
                        .HasColumnName("is_important");

                    b.Property<int>("IsNodspKarte")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_karte");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_rece");

                    b.Property<int>("NanByoCd")
                        .HasColumnType("integer")
                        .HasColumnName("nanbyo_cd");

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    b.Property<int>("SikkanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sikkan_kbn");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<int>("SyubyoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("syubyo_kbn");

                    b.Property<string>("SyusyokuCd1")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd1");

                    b.Property<string>("SyusyokuCd10")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd10");

                    b.Property<string>("SyusyokuCd11")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd11");

                    b.Property<string>("SyusyokuCd12")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd12");

                    b.Property<string>("SyusyokuCd13")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd13");

                    b.Property<string>("SyusyokuCd14")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd14");

                    b.Property<string>("SyusyokuCd15")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd15");

                    b.Property<string>("SyusyokuCd16")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd16");

                    b.Property<string>("SyusyokuCd17")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd17");

                    b.Property<string>("SyusyokuCd18")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd18");

                    b.Property<string>("SyusyokuCd19")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd19");

                    b.Property<string>("SyusyokuCd2")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd2");

                    b.Property<string>("SyusyokuCd20")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd20");

                    b.Property<string>("SyusyokuCd21")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd21");

                    b.Property<string>("SyusyokuCd3")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd3");

                    b.Property<string>("SyusyokuCd4")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd4");

                    b.Property<string>("SyusyokuCd5")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd5");

                    b.Property<string>("SyusyokuCd6")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd6");

                    b.Property<string>("SyusyokuCd7")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd7");

                    b.Property<string>("SyusyokuCd8")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd8");

                    b.Property<string>("SyusyokuCd9")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd9");

                    b.Property<int>("TenkiDate")
                        .HasColumnType("integer")
                        .HasColumnName("tenki_date");

                    b.Property<int>("TenkiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("tenki_kbn");

                    b.Property<int>("TogetuByomei")
                        .HasColumnType("integer")
                        .HasColumnName("togetu_byomei");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "Id");

                    b.ToTable("pt_byomei");
                });

            modelBuilder.Entity("Entity.Tenant.PtCmtInf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id", "HpId", "PtId", "SeqNo");

                    b.HasIndex(new[] { "Id" }, "ptcmt_inf_idx01");

                    b.ToTable("pt_cmt_inf");
                });

            modelBuilder.Entity("Entity.Tenant.PtFamily", b =>
                {
                    b.Property<long>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("family_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FamilyId"));

                    b.Property<string>("Biko")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("biko");

                    b.Property<int>("Birthday")
                        .HasColumnType("integer")
                        .HasColumnName("birthday");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<long>("FamilyPtId")
                        .HasColumnType("bigint")
                        .HasColumnName("family_pt_id");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDead")
                        .HasColumnType("integer")
                        .HasColumnName("is_dead");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsSeparated")
                        .HasColumnType("integer")
                        .HasColumnName("is_separated");

                    b.Property<string>("KanaName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("kana_name");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("Sex")
                        .HasColumnType("integer")
                        .HasColumnName("sex");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<string>("ZokugaraCd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("zokugara_cd");

                    b.HasKey("FamilyId");

                    b.HasIndex(new[] { "FamilyId", "PtId", "FamilyPtId" }, "pt_family_idx01");

                    b.ToTable("pt_family");
                });

            modelBuilder.Entity("Entity.Tenant.PtFamilyReki", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Byomei")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("byomei");

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("byomei_cd");

                    b.Property<string>("ByotaiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("byotai_cd");

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<long>("FamilyId")
                        .HasColumnType("bigint")
                        .HasColumnName("family_id");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id", "PtId", "FamilyId" }, "pt_family_reki_idx01");

                    b.ToTable("pt_family_reki");
                });

            modelBuilder.Entity("Entity.Tenant.PtGrpInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id")
                        .HasColumnOrder(3);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("GroupCode")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("grp_code");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GroupId", "PtId", "SeqNo");

                    b.HasIndex(new[] { "HpId", "PtId", "GroupId", "IsDeleted" }, "pt_grp_inf_idx01");

                    b.ToTable("pt_grp_inf");
                });

            modelBuilder.Entity("Entity.Tenant.PtGrpItem", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id")
                        .HasColumnOrder(2);

                    b.Property<string>("GrpCode")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("grp_code")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("GrpCodeName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("grp_code_name");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GrpId", "GrpCode", "SeqNo");

                    b.HasIndex(new[] { "HpId", "GrpId", "GrpCode", "IsDeleted" }, "pt_grp_item_idx01");

                    b.ToTable("pt_grp_item");
                });

            modelBuilder.Entity("Entity.Tenant.PtGrpNameMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("GrpName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("grp_name");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GrpId");

                    b.HasIndex(new[] { "HpId", "GrpId", "IsDeleted" }, "pt_grp_name_idx01");

                    b.ToTable("pt_grp_name_mst");
                });

            modelBuilder.Entity("Entity.Tenant.PtHokenCheck", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtID")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenGrp")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_grp")
                        .HasColumnOrder(3);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id")
                        .HasColumnOrder(4);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<string>("CheckCmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("check_cmt");

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("check_date");

                    b.Property<int>("CheckId")
                        .HasColumnType("integer")
                        .HasColumnName("check_id");

                    b.Property<string>("CheckMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("check_machine");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtID", "HokenGrp", "HokenId", "SeqNo");

                    b.ToTable("pt_hoken_check");
                });

            modelBuilder.Entity("Entity.Tenant.PtHokenInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<string>("Bango")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("bango");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("EdaNo")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("eda_no");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("Gendogaku")
                        .HasColumnType("integer")
                        .HasColumnName("gendogaku");

                    b.Property<int>("GenmenGaku")
                        .HasColumnType("integer")
                        .HasColumnName("genmen_gaku");

                    b.Property<int>("GenmenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("genmen_kbn");

                    b.Property<int>("GenmenRate")
                        .HasColumnType("integer")
                        .HasColumnName("genmen_rate");

                    b.Property<int>("HokenEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_eda_no");

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_kbn");

                    b.Property<int>("HokenNo")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_no");

                    b.Property<string>("HokensyaAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("hokensya_address");

                    b.Property<string>("HokensyaName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("hokensya_name");

                    b.Property<string>("HokensyaNo")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("hokensya_no");

                    b.Property<string>("HokensyaPost")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("hokensya_post");

                    b.Property<string>("HokensyaTel")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("hokensya_tel");

                    b.Property<int>("HonkeKbn")
                        .HasColumnType("integer")
                        .HasColumnName("honke_kbn");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("houbetu");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("JibaiHokenName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("jibai_hoken_name");

                    b.Property<string>("JibaiHokenTanto")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("jibai_hoken_tanto");

                    b.Property<string>("JibaiHokenTel")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("jibai_hoken_tel");

                    b.Property<int>("JibaiJyusyouDate")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_jyusyou_date");

                    b.Property<int>("KeizokuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("keizoku_kbn");

                    b.Property<string>("Kigo")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("kigo");

                    b.Property<int>("KofuDate")
                        .HasColumnType("integer")
                        .HasColumnName("kofu_date");

                    b.Property<int>("KogakuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_kbn");

                    b.Property<int>("KogakuType")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_type");

                    b.Property<int>("Rate")
                        .HasColumnType("integer")
                        .HasColumnName("rate");

                    b.Property<string>("RousaiCityName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("rousai_city_name");

                    b.Property<string>("RousaiJigyosyoName")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("rousai_jigyosyo_name");

                    b.Property<string>("RousaiKantokuCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("rousai_kantoku_cd");

                    b.Property<string>("RousaiKofuNo")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("rousai_kofu_no");

                    b.Property<string>("RousaiPrefName")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("rousai_pref_name");

                    b.Property<int>("RousaiReceCount")
                        .HasColumnType("integer")
                        .HasColumnName("rousai_rece_count");

                    b.Property<string>("RousaiRoudouCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("rousai_roudou_cd");

                    b.Property<int>("RousaiSaigaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("rousai_saigai_kbn");

                    b.Property<string>("RousaiSyobyoCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("rousai_syobyo_cd");

                    b.Property<int>("RousaiSyobyoDate")
                        .HasColumnType("integer")
                        .HasColumnName("rousai_syobyo_date");

                    b.Property<int>("RyoyoEndDate")
                        .HasColumnType("integer")
                        .HasColumnName("ryoyo_end_date");

                    b.Property<int>("RyoyoStartDate")
                        .HasColumnType("integer")
                        .HasColumnName("ryoyo_start_date");

                    b.Property<int>("SikakuDate")
                        .HasColumnType("integer")
                        .HasColumnName("sikaku_date");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<int>("SyokumuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("syokumu_kbn");

                    b.Property<int>("TasukaiYm")
                        .HasColumnType("integer")
                        .HasColumnName("tasukai_ym");

                    b.Property<string>("Tokki1")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("tokki1");

                    b.Property<string>("Tokki2")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("tokki2");

                    b.Property<string>("Tokki3")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("tokki3");

                    b.Property<string>("Tokki4")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("tokki4");

                    b.Property<string>("Tokki5")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("tokki5");

                    b.Property<int>("TokureiYm1")
                        .HasColumnType("integer")
                        .HasColumnName("tokurei_ym1");

                    b.Property<int>("TokureiYm2")
                        .HasColumnType("integer")
                        .HasColumnName("tokurei_ym2");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "HokenId", "SeqNo");

                    b.HasIndex(new[] { "HpId", "PtId", "HokenId", "HokenKbn", "Houbetu" }, "pt_hoken_inf_idx01");

                    b.ToTable("pt_hoken_inf");
                });

            modelBuilder.Entity("Entity.Tenant.PtHokenPattern", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_pid")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id");

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_kbn");

                    b.Property<string>("HokenMemo")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("hoken_memo");

                    b.Property<int>("HokenSbtCd")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_sbt_cd");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Kohi1Id")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_id");

                    b.Property<int>("Kohi2Id")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_id");

                    b.Property<int>("Kohi3Id")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_id");

                    b.Property<int>("Kohi4Id")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_id");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SeqNo", "HokenPid");

                    b.HasIndex(new[] { "HpId", "PtId", "StartDate", "EndDate", "IsDeleted" }, "pt_hoken_pattern_idx01");

                    b.ToTable("pt_hoken_pattern");
                });

            modelBuilder.Entity("Entity.Tenant.PtHokenScan", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenGrp")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_grp")
                        .HasColumnOrder(3);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id")
                        .HasColumnOrder(4);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("file_name");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "HokenGrp", "HokenId", "SeqNo");

                    b.HasIndex(new[] { "HpId", "PtId", "HokenGrp", "HokenId" }, "pt_hoken_scan_idx01");

                    b.HasIndex(new[] { "HpId", "PtId", "HokenGrp", "HokenId", "SeqNo", "IsDeleted" }, "pt_hoken_scan_pkey");

                    b.ToTable("pt_hoken_scan");
                });

            modelBuilder.Entity("Entity.Tenant.PtInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PtId"));

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("Birthday")
                        .HasColumnType("integer")
                        .HasColumnName("birthday");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("DeathDate")
                        .HasColumnType("integer")
                        .HasColumnName("death_date");

                    b.Property<string>("HomeAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("home_address1");

                    b.Property<string>("HomeAddress2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("home_address2");

                    b.Property<string>("HomePost")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("home_post");

                    b.Property<int>("IsDead")
                        .HasColumnType("integer")
                        .HasColumnName("is_dead");

                    b.Property<int>("IsDelete")
                        .HasColumnType("integer")
                        .HasColumnName("is_delete");

                    b.Property<int>("IsRyosyoDetail")
                        .HasColumnType("integer")
                        .HasColumnName("is_ryosyo_detail");

                    b.Property<int>("IsTester")
                        .HasColumnType("integer")
                        .HasColumnName("is_tester");

                    b.Property<string>("Job")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("job");

                    b.Property<string>("KanaName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("kana_name");

                    b.Property<int>("LimitConsFlg")
                        .HasColumnType("integer")
                        .HasColumnName("limit_cons_flg");

                    b.Property<string>("Mail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("mail");

                    b.Property<int>("MainHokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("main_hoken_pid");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("OfficeAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("office_address1");

                    b.Property<string>("OfficeAddress2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("office_address2");

                    b.Property<string>("OfficeMemo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("office_memo");

                    b.Property<string>("OfficeName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("office_name");

                    b.Property<string>("OfficePost")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("office_post");

                    b.Property<string>("OfficeTel")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("office_tel");

                    b.Property<int>("PrimaryDoctor")
                        .HasColumnType("integer")
                        .HasColumnName("primary_doctor");

                    b.Property<long>("PtNum")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_num");

                    b.Property<long>("ReferenceNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("reference_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ReferenceNo"));

                    b.Property<string>("RenrakuAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("renraku_address1");

                    b.Property<string>("RenrakuAddress2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("renraku_address2");

                    b.Property<string>("RenrakuMemo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("renraku_memo");

                    b.Property<string>("RenrakuName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("renraku_name");

                    b.Property<string>("RenrakuPost")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("renraku_post");

                    b.Property<string>("RenrakuTel")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("renraku_tel");

                    b.Property<string>("Setanusi")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("setainusi");

                    b.Property<int>("Sex")
                        .HasColumnType("integer")
                        .HasColumnName("sex");

                    b.Property<string>("Tel1")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("tel1");

                    b.Property<string>("Tel2")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("tel2");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<string>("Zokugara")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("zokugara");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.HasIndex(new[] { "HpId", "PtNum" }, "pt_inf_idx01");

                    b.HasIndex(new[] { "HpId", "PtId", "IsDelete" }, "pt_inf_idx02");

                    b.ToTable("pt_inf");
                });

            modelBuilder.Entity("Entity.Tenant.PtInfection", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<string>("Byomei")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("byomei");

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("byomei_cd");

                    b.Property<string>("ByotaiCd")
                        .HasColumnType("text")
                        .HasColumnName("byotai_cd");

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.ToTable("pt_infection");
                });

            modelBuilder.Entity("Entity.Tenant.PtJibaiDoc", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("ElseCost")
                        .HasColumnType("integer")
                        .HasColumnName("else_cost");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("MeisaiCost")
                        .HasColumnType("integer")
                        .HasColumnName("meisai_cost");

                    b.Property<int>("MeisaiNum")
                        .HasColumnType("integer")
                        .HasColumnName("meisai_num");

                    b.Property<int>("SindanCost")
                        .HasColumnType("integer")
                        .HasColumnName("sindan_cost");

                    b.Property<int>("SindanNum")
                        .HasColumnType("integer")
                        .HasColumnName("sindan_num");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SinYm", "HokenId", "SeqNo");

                    b.ToTable("pt_jibai_doc");
                });

            modelBuilder.Entity("Entity.Tenant.PtJibkar", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("WebId")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("web_id")
                        .HasColumnOrder(2);

                    b.Property<int>("ByomeiKaiji")
                        .HasColumnType("integer")
                        .HasColumnName("byomei_kaiji");

                    b.Property<DateTime>("ByomeiUpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("byomei_update_date");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("KarteKaiji")
                        .HasColumnType("integer")
                        .HasColumnName("karte_kaiji");

                    b.Property<DateTime>("KarteUpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("karte_update_date");

                    b.Property<int>("KensaKaiji")
                        .HasColumnType("integer")
                        .HasColumnName("kensa_kaiji");

                    b.Property<DateTime>("KensaUpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("kensa_update_date");

                    b.Property<int>("OdrKaiji")
                        .HasColumnType("integer")
                        .HasColumnName("odr_kaiji");

                    b.Property<DateTime>("OdrUpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("odr_update_date");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "WebId");

                    b.HasIndex(new[] { "HpId", "WebId", "PtId" }, "pt_jibkar_idx01");

                    b.ToTable("pt_jibkar");
                });

            modelBuilder.Entity("Entity.Tenant.PtKioReki", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<string>("Byomei")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("byomei");

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("byomei_cd");

                    b.Property<string>("ByotaiCd")
                        .HasColumnType("text")
                        .HasColumnName("byotai_cd");

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.ToTable("pt_kio_reki");
                });

            modelBuilder.Entity("Entity.Tenant.PtKohi", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<string>("FutansyaNo")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("futansya_no");

                    b.Property<int>("GendoGaku")
                        .HasColumnType("integer")
                        .HasColumnName("gendogaku");

                    b.Property<int>("HokenEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_eda_no");

                    b.Property<int>("HokenNo")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_no");

                    b.Property<int>("HokenSbtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_sbt_kbn");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("houbetu");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("JyukyusyaNo")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("jyukyusya_no");

                    b.Property<int>("KofuDate")
                        .HasColumnType("integer")
                        .HasColumnName("kofu_date");

                    b.Property<int>("PrefNo")
                        .HasColumnType("integer")
                        .HasColumnName("pref_no");

                    b.Property<int>("Rate")
                        .HasColumnType("integer")
                        .HasColumnName("rate");

                    b.Property<int>("SikakuDate")
                        .HasColumnType("integer")
                        .HasColumnName("sikaku_date");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<string>("TokusyuNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tokusyu_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "HokenId", "SeqNo");

                    b.ToTable("pt_kohi");
                });

            modelBuilder.Entity("Entity.Tenant.PtKyusei", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("KanaName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("kana_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.HasIndex(new[] { "HpId", "PtId", "EndDate", "IsDeleted" }, "pt_kyusei_idx01");

                    b.ToTable("pt_kyusei");
                });

            modelBuilder.Entity("Entity.Tenant.PtLastVisitDate", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("LastVisitDate")
                        .HasColumnType("integer")
                        .HasColumnName("last_visit_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId");

                    b.ToTable("pt_last_visit_date");
                });

            modelBuilder.Entity("Entity.Tenant.PtMemo", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Memo")
                        .HasColumnType("text")
                        .HasColumnName("memo");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.HasIndex(new[] { "HpId", "PtId", "IsDeleted" }, "pt_memo_idx01");

                    b.ToTable("pt_memo");
                });

            modelBuilder.Entity("Entity.Tenant.PtOtcDrug", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SerialNum")
                        .HasColumnType("integer")
                        .HasColumnName("serial_num");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<string>("TradeName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("trade_name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.ToTable("pt_otc_drug");
                });

            modelBuilder.Entity("Entity.Tenant.PtOtherDrug", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("DrugName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("drug_name");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.ToTable("pt_other_drug");
                });

            modelBuilder.Entity("Entity.Tenant.PtPregnancy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("OvulationDate")
                        .HasColumnType("integer")
                        .HasColumnName("ovulation_date");

                    b.Property<int>("OvulationDueDate")
                        .HasColumnType("integer")
                        .HasColumnName("ovulation_due_date");

                    b.Property<int>("PeriodDate")
                        .HasColumnType("integer")
                        .HasColumnName("period_date");

                    b.Property<int>("PeriodDueDate")
                        .HasColumnType("integer")
                        .HasColumnName("period_due_date");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id", "HpId", "PtId", "SeqNo");

                    b.HasIndex(new[] { "Id", "HpId" }, "ptpregnancy_idx01");

                    b.ToTable("pt_pregnancy");
                });

            modelBuilder.Entity("Entity.Tenant.PtRousaiTenki", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Sinkei")
                        .HasColumnType("integer")
                        .HasColumnName("sinkei");

                    b.Property<int>("Tenki")
                        .HasColumnType("integer")
                        .HasColumnName("tenki");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "HokenId", "SeqNo");

                    b.HasIndex(new[] { "HpId", "PtId", "HokenId", "EndDate", "IsDeleted" }, "pt_rousai_tenki_idx01");

                    b.ToTable("pt_rousai_tenki");
                });

            modelBuilder.Entity("Entity.Tenant.PtSanteiConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("eda_no");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("KbnNo")
                        .HasColumnType("integer")
                        .HasColumnName("kbn_no");

                    b.Property<int>("KbnVal")
                        .HasColumnType("integer")
                        .HasColumnName("kbn_val");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.HasIndex(new[] { "HpId", "PtId", "KbnNo", "EdaNo", "StartDate", "EndDate", "IsDeleted" }, "pt_calc_conf_idx01");

                    b.HasIndex(new[] { "HpId", "PtId", "KbnNo", "EdaNo", "SeqNo" }, "pt_calc_conf_pkey");

                    b.ToTable("pt_santei_conf");
                });

            modelBuilder.Entity("Entity.Tenant.PtSupple", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<string>("IndexCd")
                        .HasColumnType("text")
                        .HasColumnName("index_cd");

                    b.Property<string>("IndexWord")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("index_word");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.ToTable("pt_supple");
                });

            modelBuilder.Entity("Entity.Tenant.PtTag", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("AlphablendVal")
                        .HasColumnType("integer")
                        .HasColumnName("alphablend_val");

                    b.Property<string>("BackgroundColor")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("background_color");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("FontSize")
                        .HasColumnType("integer")
                        .HasColumnName("fontsize");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsDspKaikei")
                        .HasColumnType("integer")
                        .HasColumnName("is_dsp_kaikei");

                    b.Property<int>("IsDspKarte")
                        .HasColumnType("integer")
                        .HasColumnName("is_dsp_karte");

                    b.Property<int>("IsDspRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_dsp_rece");

                    b.Property<int>("IsDspUketuke")
                        .HasColumnType("integer")
                        .HasColumnName("is_dsp_uketuke");

                    b.Property<int>("Left")
                        .HasColumnType("integer")
                        .HasColumnName("left");

                    b.Property<string>("Memo")
                        .HasColumnType("text")
                        .HasColumnName("memo");

                    b.Property<byte[]>("MemoData")
                        .HasColumnType("bytea")
                        .HasColumnName("memo_data");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<int>("TagGrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("tag_grp_cd");

                    b.Property<int>("Top")
                        .HasColumnType("integer")
                        .HasColumnName("top");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.HasIndex(new[] { "HpId", "PtId", "StartDate", "EndDate", "IsDspUketuke", "IsDspKarte", "IsDspKaikei", "IsDeleted" }, "pt_tag_idx01");

                    b.ToTable("pt_tag");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinCmtInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(2);

                    b.Property<int>("CmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_kbn")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDelete")
                        .HasColumnType("integer")
                        .HasColumnName("is_delete");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<string>("Text")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "RaiinNo", "CmtKbn", "SeqNo");

                    b.HasIndex(new[] { "HpId", "RaiinNo", "CmtKbn", "IsDelete" }, "raiin_cmt_inf_idx01");

                    b.ToTable("raiin_cmt_inf");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinFilterKbn", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("FilterId")
                        .HasColumnType("integer")
                        .HasColumnName("filter_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("kbn_cd");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "FilterId", "SeqNo");

                    b.ToTable("raiin_filter_kbn");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinFilterMst", b =>
                {
                    b.Property<int>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("filter_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FilterId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("FilterName")
                        .HasColumnType("text")
                        .HasColumnName("filter_name");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SelectKbn")
                        .HasColumnType("integer")
                        .HasColumnName("select_kbn");

                    b.Property<string>("Shortcut")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("shortcut");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("FilterId");

                    b.HasIndex(new[] { "HpId", "FilterId", "IsDeleted" }, "raiin_filter_mst_idx01");

                    b.ToTable("raiin_filter_mst");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinFilterSort", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ColumnName")
                        .HasColumnType("text")
                        .HasColumnName("column_name");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("FilterId")
                        .HasColumnType("integer")
                        .HasColumnName("filter_id");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("kbn_cd");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SortKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sort_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id", "HpId", "FilterId", "IsDeleted" }, "karte_inf_idx01")
                        .HasDatabaseName("karte_inf_idx011");

                    b.ToTable("raiin_filter_sort");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinFilterState", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("FilterId")
                        .HasColumnType("integer")
                        .HasColumnName("filter_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "FilterId", "SeqNo");

                    b.ToTable("raiin_filter_state");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("RaiinNo"));

                    b.Property<string>("ConfirmationResult")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("confirmation_result");

                    b.Property<int>("ConfirmationState")
                        .HasColumnType("integer")
                        .HasColumnName("confirmation_state");

                    b.Property<int>("ConfirmationType")
                        .HasColumnType("integer")
                        .HasColumnName("confirmation_type");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_pid");

                    b.Property<string>("InfoConsFlg")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("info_cons_flg");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsYoyaku")
                        .HasColumnType("integer")
                        .HasColumnName("is_yoyaku");

                    b.Property<int>("JikanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("jikan_kbn");

                    b.Property<int>("KaId")
                        .HasColumnType("integer")
                        .HasColumnName("ka_id");

                    b.Property<int>("KaikeiId")
                        .HasColumnType("integer")
                        .HasColumnName("kaikei_id");

                    b.Property<string>("KaikeiTime")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("kaikei_time");

                    b.Property<long>("OyaRaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("oya_raiin_no");

                    b.Property<int>("PrescriptionIssueType")
                        .HasColumnType("integer")
                        .HasColumnName("prescription_issue_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SanteiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("santei_kbn");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<string>("SinEndTime")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("sin_end_time");

                    b.Property<string>("SinStartTime")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("sin_start_time");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("SyosaisinKbn")
                        .HasColumnType("integer")
                        .HasColumnName("syosaisin_kbn");

                    b.Property<int>("TantoId")
                        .HasColumnType("integer")
                        .HasColumnName("tanto_id");

                    b.Property<int>("UketukeId")
                        .HasColumnType("integer")
                        .HasColumnName("uketuke_id");

                    b.Property<int>("UketukeNo")
                        .HasColumnType("integer")
                        .HasColumnName("uketuke_no");

                    b.Property<int>("UketukeSbt")
                        .HasColumnType("integer")
                        .HasColumnName("uketuke_sbt");

                    b.Property<string>("UketukeTime")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("uketuke_time");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<int>("YoyakuId")
                        .HasColumnType("integer")
                        .HasColumnName("yoyaku_id");

                    b.Property<string>("YoyakuTime")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("yoyaku_time");

                    b.HasKey("HpId", "RaiinNo");

                    b.HasIndex(new[] { "HpId", "PtId", "SinDate", "Status", "IsDeleted" }, "raiin_inf_idx01");

                    b.HasIndex(new[] { "HpId", "PtId", "SinDate", "Status", "SyosaisinKbn", "IsDeleted" }, "raiin_inf_idx02");

                    b.HasIndex(new[] { "IsDeleted", "SinDate", "PtId" }, "raiin_inf_idx03");

                    b.HasIndex(new[] { "HpId", "RaiinNo", "IsDeleted", "Status" }, "raiin_inf_idx04");

                    b.ToTable("raiin_inf");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinKbItem", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id")
                        .HasColumnOrder(2);

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("kbn_cd")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsExclude")
                        .HasColumnType("integer")
                        .HasColumnName("is_exclude");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GrpCd", "KbnCd", "SeqNo");

                    b.HasIndex(new[] { "HpId", "GrpCd", "KbnCd", "IsDeleted" }, "raiin_kbn_item_idx01");

                    b.ToTable("raiin_kbn_item");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinKbnDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id")
                        .HasColumnOrder(2);

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("kbn_cd")
                        .HasColumnOrder(3);

                    b.Property<string>("ColorCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("color_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsAuto")
                        .HasColumnType("integer")
                        .HasColumnName("is_auto");

                    b.Property<int>("IsAutoDelete")
                        .HasColumnType("integer")
                        .HasColumnName("is_auto_delete");

                    b.Property<int>("IsConfirmed")
                        .HasColumnType("integer")
                        .HasColumnName("is_confirmed");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("KbnName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("kbn_name");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GrpCd", "KbnCd");

                    b.HasIndex(new[] { "HpId", "GrpCd", "KbnCd", "IsDeleted" }, "raiin_kbn_detail_idx01");

                    b.ToTable("raiin_kbn_detail");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinKbnInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(3);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id")
                        .HasColumnOrder(4);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDelete")
                        .HasColumnType("integer")
                        .HasColumnName("is_delete");

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("kbn_cd");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "RaiinNo", "GrpId", "SeqNo");

                    b.HasIndex(new[] { "HpId", "PtId", "SinDate", "RaiinNo", "GrpId", "IsDelete" }, "raiin_kbn_inf_idx01");

                    b.ToTable("raiin_kbn_inf");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinKbnKoui", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id")
                        .HasColumnOrder(2);

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("kbn_cd")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("KouiKbnId")
                        .HasColumnType("integer")
                        .HasColumnName("koui_kbn_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GrpId", "KbnCd", "SeqNo");

                    b.HasIndex(new[] { "HpId", "GrpId", "KbnCd", "IsDeleted" }, "raiin_kbn_koui_idx01");

                    b.ToTable("raiin_kbn_koui");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinKbnMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("GrpName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("grp_name");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GrpCd");

                    b.HasIndex(new[] { "HpId", "GrpCd", "IsDeleted" }, "raiin_kbn_mst_idx01");

                    b.ToTable("raiin_kbn_mst");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinKbnYayoku", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id")
                        .HasColumnOrder(2);

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("kbn_cd")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<int>("YoyakuCd")
                        .HasColumnType("integer")
                        .HasColumnName("yoyaku_cd");

                    b.HasKey("HpId", "GrpId", "KbnCd", "SeqNo");

                    b.HasIndex(new[] { "HpId", "GrpId", "KbnCd", "IsDeleted" }, "raiin_kbn_yoyaku_idx01");

                    b.ToTable("raiin_kbn_yoyaku");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinListCmt", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(2);

                    b.Property<int>("CmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_kbn")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<string>("Text")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "RaiinNo", "CmtKbn");

                    b.HasIndex(new[] { "HpId", "RaiinNo", "CmtKbn", "IsDeleted" }, "raiin_list_cmt_ukey01");

                    b.ToTable("raiin_list_cmt");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinListDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id")
                        .HasColumnOrder(2);

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("kbn_cd")
                        .HasColumnOrder(3);

                    b.Property<string>("ColorCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("color_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("KbnName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("kbn_name");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GrpId", "KbnCd");

                    b.HasIndex(new[] { "HpId", "GrpId", "KbnCd", "IsDeleted" }, "raiin_list_detail_idx01");

                    b.HasIndex(new[] { "HpId", "IsDeleted" }, "raiin_list_detail_idx02");

                    b.ToTable("raiin_list_detail");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinListDoc", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id")
                        .HasColumnOrder(2);

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("kbn_cd")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("CategoryCd")
                        .HasColumnType("integer")
                        .HasColumnName("category_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GrpId", "KbnCd", "SeqNo");

                    b.ToTable("raiin_list_doc");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinListFile", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id")
                        .HasColumnOrder(2);

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("kbn_cd")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("CategoryCd")
                        .HasColumnType("integer")
                        .HasColumnName("category_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GrpId", "KbnCd", "SeqNo");

                    b.HasIndex(new[] { "HpId", "GrpId", "KbnCd", "IsDeleted" }, "raiin_list_file_idx01");

                    b.ToTable("raiin_list_file");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinListInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id");

                    b.Property<int>("RaiinListKbn")
                        .HasColumnType("integer")
                        .HasColumnName("raiin_list_kbn")
                        .HasColumnOrder(6);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(7);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("kbn_cd");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SinDate", "RaiinNo", "GrpId", "RaiinListKbn");

                    b.HasIndex(new[] { "GrpId", "KbnCd", "RaiinListKbn" }, "raiin_list_inf_idx01");

                    b.HasIndex(new[] { "HpId", "PtId" }, "raiin_list_inf_idx02");

                    b.ToTable("raiin_list_inf");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinListItem", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("kbn_cd")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsExclude")
                        .HasColumnType("integer")
                        .HasColumnName("is_exclude");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "KbnCd", "SeqNo", "GrpId");

                    b.HasIndex(new[] { "HpId", "GrpId", "KbnCd", "IsDeleted" }, "raiin_list_item_idx01");

                    b.ToTable("raiin_list_item");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinListKoui", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("kbn_cd")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("KouiKbnId")
                        .HasColumnType("integer")
                        .HasColumnName("koui_kbn_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "KbnCd", "SeqNo", "GrpId");

                    b.HasIndex(new[] { "HpId", "GrpId", "KbnCd", "IsDeleted" }, "raiin_list_koui_idx01");

                    b.ToTable("raiin_list_koui");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinListMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("grp_id")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GrpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("GrpName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("grp_name");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GrpId");

                    b.HasIndex(new[] { "HpId", "GrpId", "IsDeleted" }, "raiin_list_mst_idx01");

                    b.ToTable("raiin_list_mst");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinListTag", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<int>("TagNo")
                        .HasColumnType("integer")
                        .HasColumnName("tag_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "RaiinNo", "SeqNo");

                    b.HasIndex(new[] { "HpId", "RaiinNo", "IsDeleted" }, "raiin_list_tag_ukey01");

                    b.ToTable("raiin_list_tag");
                });

            modelBuilder.Entity("Entity.Tenant.ReceCheckCmt", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(5);

                    b.Property<string>("Cmt")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsChecked")
                        .HasColumnType("integer")
                        .HasColumnName("is_checked");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsPending")
                        .HasColumnType("integer")
                        .HasColumnName("is_pending");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SinYm", "HokenId", "SeqNo");

                    b.ToTable("rece_check_cmt");
                });

            modelBuilder.Entity("Entity.Tenant.ReceCheckErr", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id")
                        .HasColumnOrder(3);

                    b.Property<string>("ErrCd")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("err_cd")
                        .HasColumnOrder(5);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date")
                        .HasColumnOrder(6);

                    b.Property<string>("ACd")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("a_cd")
                        .HasColumnOrder(7);

                    b.Property<string>("BCd")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("b_cd")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsChecked")
                        .HasColumnType("integer")
                        .HasColumnName("is_checked");

                    b.Property<string>("Message1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("message_1");

                    b.Property<string>("Message2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("message_2");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SinYm", "HokenId", "ErrCd", "SinDate", "ACd", "BCd");

                    b.ToTable("rece_check_err");
                });

            modelBuilder.Entity("Entity.Tenant.ReceCheckOpt", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("ErrCd")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("err_cd")
                        .HasColumnOrder(2);

                    b.Property<string>("Biko")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("biko");

                    b.Property<int>("CheckOpt")
                        .HasColumnType("integer")
                        .HasColumnName("check_opt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("is_invalid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "ErrCd");

                    b.ToTable("rece_check_opt");
                });

            modelBuilder.Entity("Entity.Tenant.ReceCmt", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(3);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id")
                        .HasColumnOrder(4);

                    b.Property<int>("CmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_kbn")
                        .HasColumnOrder(5);

                    b.Property<int>("CmtSbt")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_sbt")
                        .HasColumnOrder(6);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(7);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Cmt")
                        .HasColumnType("text")
                        .HasColumnName("cmt");

                    b.Property<string>("CmtData")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("cmt_data");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SinYm", "HokenId", "CmtKbn", "CmtSbt", "Id");

                    b.HasIndex(new[] { "HpId", "PtId", "SinYm", "HokenId", "IsDeleted" }, "rece_cmt_idx01");

                    b.ToTable("rece_cmt");
                });

            modelBuilder.Entity("Entity.Tenant.ReceFutanKbn", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("SeikyuYm")
                        .HasColumnType("integer")
                        .HasColumnName("seikyu_ym")
                        .HasColumnOrder(2);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(3);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id")
                        .HasColumnOrder(5);

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_pid")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("FutanKbnCd")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("futan_kbn_cd");

                    b.HasKey("HpId", "SeikyuYm", "PtId", "SinYm", "HokenId", "HokenPid");

                    b.ToTable("rece_futan_kbn");
                });

            modelBuilder.Entity("Entity.Tenant.ReceInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("SeikyuYm")
                        .HasColumnType("integer")
                        .HasColumnName("seikyu_ym")
                        .HasColumnOrder(2);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(3);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id")
                        .HasColumnOrder(5);

                    b.Property<int>("ChokiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("choki_kbn");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<double>("EnTen")
                        .HasColumnType("double precision")
                        .HasColumnName("en_ten");

                    b.Property<int>("GenmenGaku")
                        .HasColumnType("integer")
                        .HasColumnName("genmen_gaku");

                    b.Property<int>("GenmenGaku10en")
                        .HasColumnType("integer")
                        .HasColumnName("genmen_gaku_10en");

                    b.Property<int>("GenmenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("genmen_kbn");

                    b.Property<int>("HokenFutan")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_futan");

                    b.Property<int>("HokenFutan10en")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_futan_10en");

                    b.Property<int>("HokenIchibuFutan")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_ichibu_futan");

                    b.Property<int>("HokenIchibuFutan10en")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_ichibu_futan_10en");

                    b.Property<int>("HokenId2")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id2");

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_kbn");

                    b.Property<int?>("HokenNissu")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_nissu");

                    b.Property<int>("HokenRate")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_rate");

                    b.Property<int?>("HokenReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_rece_futan");

                    b.Property<int?>("HokenReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_rece_tensu");

                    b.Property<int>("HokenSbtCd")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_sbt_cd");

                    b.Property<int>("HokenTensu")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_tensu");

                    b.Property<string>("HokensyaNo")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("hokensya_no");

                    b.Property<int>("HonkeKbn")
                        .HasColumnType("integer")
                        .HasColumnName("honke_kbn");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("houbetu");

                    b.Property<int>("IchibuFutan")
                        .HasColumnType("integer")
                        .HasColumnName("ichibu_futan");

                    b.Property<int>("IchibuFutan10en")
                        .HasColumnType("integer")
                        .HasColumnName("ichibu_futan_10en");

                    b.Property<int>("IsTasukai")
                        .HasColumnType("integer")
                        .HasColumnName("is_tasukai");

                    b.Property<int>("IsTester")
                        .HasColumnType("integer")
                        .HasColumnName("is_tester");

                    b.Property<int>("IsTokurei")
                        .HasColumnType("integer")
                        .HasColumnName("is_tokurei");

                    b.Property<int>("IsZaiiso")
                        .HasColumnType("integer")
                        .HasColumnName("is_zaiiso");

                    b.Property<int>("JibaiAFutan")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_a_futan");

                    b.Property<int>("JibaiBFutan")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_b_futan");

                    b.Property<int>("JibaiCFutan")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_c_futan");

                    b.Property<int>("JibaiDFutan")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_d_futan");

                    b.Property<int>("JibaiHaFutan")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_ha_futan");

                    b.Property<int>("JibaiHeMeisai")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_he_meisai");

                    b.Property<int>("JibaiHeMeisaiCount")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_he_meisai_count");

                    b.Property<int>("JibaiHoSindan")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_ho_sindan");

                    b.Property<int>("JibaiHoSindanCount")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_ho_sindan_count");

                    b.Property<int>("JibaiITensu")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_i_tensu");

                    b.Property<int>("JibaiKenpoFutan")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_kenpo_futan");

                    b.Property<int>("JibaiKenpoTensu")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_kenpo_tensu");

                    b.Property<int>("JibaiNiFutan")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_ni_futan");

                    b.Property<int>("JibaiRoTensu")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_ro_tensu");

                    b.Property<int>("KaId")
                        .HasColumnType("integer")
                        .HasColumnName("ka_id");

                    b.Property<int>("KogakuFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_futan");

                    b.Property<int>("KogakuFutan10en")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_futan_10en");

                    b.Property<int>("KogakuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_kbn");

                    b.Property<int>("KogakuKohi1Limit")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_kohi1_limit");

                    b.Property<int>("KogakuKohi2Limit")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_kohi2_limit");

                    b.Property<int>("KogakuKohi3Limit")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_kohi3_limit");

                    b.Property<int>("KogakuKohi4Limit")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_kohi4_limit");

                    b.Property<int>("KogakuOverKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_over_kbn");

                    b.Property<int>("KogakuTekiyoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_tekiyo_kbn");

                    b.Property<int>("Kohi1Futan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_futan");

                    b.Property<int>("Kohi1Futan10en")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_futan_10en");

                    b.Property<string>("Kohi1Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi1_houbetu");

                    b.Property<int>("Kohi1IchibuFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_ichibu_futan");

                    b.Property<int>("Kohi1IchibuSotogaku")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_ichibu_sotogaku");

                    b.Property<int>("Kohi1IchibuSotogaku10en")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_ichibu_sotogaku_10en");

                    b.Property<int>("Kohi1Id")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_id");

                    b.Property<int>("Kohi1Limit")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_limit");

                    b.Property<string>("Kohi1NameCd")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("kohi1_name_cd");

                    b.Property<int?>("Kohi1Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_nissu");

                    b.Property<int>("Kohi1OtherFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_other_futan");

                    b.Property<int?>("Kohi1ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_rece_futan");

                    b.Property<int>("Kohi1ReceKisai")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_rece_kisai");

                    b.Property<int?>("Kohi1ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_rece_kyufu");

                    b.Property<int?>("Kohi1ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_rece_tensu");

                    b.Property<int>("Kohi1Tensu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_tensu");

                    b.Property<int>("Kohi2Futan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_futan");

                    b.Property<int>("Kohi2Futan10en")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_futan_10en");

                    b.Property<string>("Kohi2Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi2_houbetu");

                    b.Property<int>("Kohi2IchibuFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_ichibu_futan");

                    b.Property<int>("Kohi2IchibuSotogaku")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_ichibu_sotogaku");

                    b.Property<int>("Kohi2IchibuSotogaku10en")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_ichibu_sotogaku_10en");

                    b.Property<int>("Kohi2Id")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_id");

                    b.Property<int>("Kohi2Limit")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_limit");

                    b.Property<string>("Kohi2NameCd")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("kohi2_name_cd");

                    b.Property<int?>("Kohi2Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_nissu");

                    b.Property<int>("Kohi2OtherFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_other_futan");

                    b.Property<int?>("Kohi2ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_rece_futan");

                    b.Property<int>("Kohi2ReceKisai")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_rece_kisai");

                    b.Property<int?>("Kohi2ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_rece_kyufu");

                    b.Property<int?>("Kohi2ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_rece_tensu");

                    b.Property<int>("Kohi2Tensu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_tensu");

                    b.Property<int>("Kohi3Futan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_futan");

                    b.Property<int>("Kohi3Futan10en")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_futan_10en");

                    b.Property<string>("Kohi3Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi3_houbetu");

                    b.Property<int>("Kohi3IchibuFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_ichibu_futan");

                    b.Property<int>("Kohi3IchibuSotogaku")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_ichibu_sotogaku");

                    b.Property<int>("Kohi3IchibuSotogaku10en")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_ichibu_sotogaku_10en");

                    b.Property<int>("Kohi3Id")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_id");

                    b.Property<int>("Kohi3Limit")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_limit");

                    b.Property<string>("Kohi3NameCd")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("kohi3_name_cd");

                    b.Property<int?>("Kohi3Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_nissu");

                    b.Property<int>("Kohi3OtherFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_other_futan");

                    b.Property<int?>("Kohi3ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_rece_futan");

                    b.Property<int>("Kohi3ReceKisai")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_rece_kisai");

                    b.Property<int?>("Kohi3ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_rece_kyufu");

                    b.Property<int?>("Kohi3ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_rece_tensu");

                    b.Property<int>("Kohi3Tensu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_tensu");

                    b.Property<int>("Kohi4Futan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_futan");

                    b.Property<int>("Kohi4Futan10en")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_futan_10en");

                    b.Property<string>("Kohi4Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi4_houbetu");

                    b.Property<int>("Kohi4IchibuFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_ichibu_futan");

                    b.Property<int>("Kohi4IchibuSotogaku")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_ichibu_sotogaku");

                    b.Property<int>("Kohi4IchibuSotogaku10en")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_ichibu_sotogaku_10en");

                    b.Property<int>("Kohi4Id")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_id");

                    b.Property<int>("Kohi4Limit")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_limit");

                    b.Property<string>("Kohi4NameCd")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("kohi4_name_cd");

                    b.Property<int?>("Kohi4Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_nissu");

                    b.Property<int>("Kohi4OtherFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_other_futan");

                    b.Property<int?>("Kohi4ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_rece_futan");

                    b.Property<int>("Kohi4ReceKisai")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_rece_kisai");

                    b.Property<int?>("Kohi4ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_rece_kyufu");

                    b.Property<int?>("Kohi4ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_rece_tensu");

                    b.Property<int>("Kohi4Tensu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_tensu");

                    b.Property<int>("PtFutan")
                        .HasColumnType("integer")
                        .HasColumnName("pt_futan");

                    b.Property<int>("PtRate")
                        .HasColumnType("integer")
                        .HasColumnName("pt_rate");

                    b.Property<string>("PtStatus")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("pt_status");

                    b.Property<string>("ReceSbt")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("rece_sbt");

                    b.Property<int>("RousaiIFutan")
                        .HasColumnType("integer")
                        .HasColumnName("rousai_i_futan");

                    b.Property<int>("RousaiITensu")
                        .HasColumnType("integer")
                        .HasColumnName("rousai_i_tensu");

                    b.Property<int>("RousaiRoFutan")
                        .HasColumnType("integer")
                        .HasColumnName("rousai_ro_futan");

                    b.Property<int>("SeikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("seikyu_kbn");

                    b.Property<int>("Sinkei")
                        .HasColumnType("integer")
                        .HasColumnName("sinkei");

                    b.Property<int>("TantoId")
                        .HasColumnType("integer")
                        .HasColumnName("tanto_id");

                    b.Property<int>("Tenki")
                        .HasColumnType("integer")
                        .HasColumnName("tenki");

                    b.Property<int>("Tensu")
                        .HasColumnType("integer")
                        .HasColumnName("tensu");

                    b.Property<string>("Tokki")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki");

                    b.Property<string>("Tokki1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki1");

                    b.Property<string>("Tokki2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki2");

                    b.Property<string>("Tokki3")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki3");

                    b.Property<string>("Tokki4")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki4");

                    b.Property<string>("Tokki5")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki5");

                    b.Property<int>("TotalIchibuFutan")
                        .HasColumnType("integer")
                        .HasColumnName("total_ichibu_futan");

                    b.Property<int>("TotalIchibuFutan10en")
                        .HasColumnType("integer")
                        .HasColumnName("total_ichibu_futan_10en");

                    b.Property<int>("TotalIryohi")
                        .HasColumnType("integer")
                        .HasColumnName("total_iryohi");

                    b.Property<int>("TotalKogakuLimit")
                        .HasColumnType("integer")
                        .HasColumnName("total_kogaku_limit");

                    b.HasKey("HpId", "SeikyuYm", "PtId", "SinYm", "HokenId");

                    b.ToTable("rece_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ReceInfEdit", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("SeikyuYm")
                        .HasColumnType("integer")
                        .HasColumnName("seikyu_ym")
                        .HasColumnOrder(2);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(3);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id")
                        .HasColumnOrder(5);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(6);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int?>("HokenNissu")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_nissu");

                    b.Property<int?>("HokenReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_rece_futan");

                    b.Property<int?>("HokenReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_rece_tensu");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("houbetu");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Kohi1Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi1_houbetu");

                    b.Property<int?>("Kohi1Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_nissu");

                    b.Property<int?>("Kohi1ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_rece_futan");

                    b.Property<int?>("Kohi1ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_rece_kyufu");

                    b.Property<int?>("Kohi1ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_rece_tensu");

                    b.Property<string>("Kohi2Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi2_houbetu");

                    b.Property<int?>("Kohi2Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_nissu");

                    b.Property<int?>("Kohi2ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_rece_futan");

                    b.Property<int?>("Kohi2ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_rece_kyufu");

                    b.Property<int?>("Kohi2ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_rece_tensu");

                    b.Property<string>("Kohi3Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi3_houbetu");

                    b.Property<int?>("Kohi3Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_nissu");

                    b.Property<int?>("Kohi3ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_rece_futan");

                    b.Property<int?>("Kohi3ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_rece_kyufu");

                    b.Property<int?>("Kohi3ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_rece_tensu");

                    b.Property<string>("Kohi4Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi4_houbetu");

                    b.Property<int?>("Kohi4Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_nissu");

                    b.Property<int?>("Kohi4ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_rece_futan");

                    b.Property<int?>("Kohi4ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_rece_kyufu");

                    b.Property<int?>("Kohi4ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_rece_tensu");

                    b.Property<string>("ReceSbt")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("rece_sbt");

                    b.Property<string>("Tokki")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki");

                    b.Property<string>("Tokki1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki1");

                    b.Property<string>("Tokki2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki2");

                    b.Property<string>("Tokki3")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki3");

                    b.Property<string>("Tokki4")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki4");

                    b.Property<string>("Tokki5")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki5");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "SeikyuYm", "PtId", "SinYm", "HokenId", "SeqNo");

                    b.ToTable("rece_inf_edit");
                });

            modelBuilder.Entity("Entity.Tenant.ReceInfJd", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("SeikyuYm")
                        .HasColumnType("integer")
                        .HasColumnName("seikyu_ym")
                        .HasColumnOrder(2);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(3);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id")
                        .HasColumnOrder(5);

                    b.Property<int>("KohiId")
                        .HasColumnType("integer")
                        .HasColumnName("kohi_id")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("FutanSbtCd")
                        .HasColumnType("integer")
                        .HasColumnName("futan_sbt_cd");

                    b.Property<int>("Nissu1")
                        .HasColumnType("integer")
                        .HasColumnName("nissu1");

                    b.Property<int>("Nissu10")
                        .HasColumnType("integer")
                        .HasColumnName("nissu10");

                    b.Property<int>("Nissu11")
                        .HasColumnType("integer")
                        .HasColumnName("nissu11");

                    b.Property<int>("Nissu12")
                        .HasColumnType("integer")
                        .HasColumnName("nissu12");

                    b.Property<int>("Nissu13")
                        .HasColumnType("integer")
                        .HasColumnName("nissu13");

                    b.Property<int>("Nissu14")
                        .HasColumnType("integer")
                        .HasColumnName("nissu14");

                    b.Property<int>("Nissu15")
                        .HasColumnType("integer")
                        .HasColumnName("nissu15");

                    b.Property<int>("Nissu16")
                        .HasColumnType("integer")
                        .HasColumnName("nissu16");

                    b.Property<int>("Nissu17")
                        .HasColumnType("integer")
                        .HasColumnName("nissu17");

                    b.Property<int>("Nissu18")
                        .HasColumnType("integer")
                        .HasColumnName("nissu18");

                    b.Property<int>("Nissu19")
                        .HasColumnType("integer")
                        .HasColumnName("nissu19");

                    b.Property<int>("Nissu2")
                        .HasColumnType("integer")
                        .HasColumnName("nissu2");

                    b.Property<int>("Nissu20")
                        .HasColumnType("integer")
                        .HasColumnName("nissu20");

                    b.Property<int>("Nissu21")
                        .HasColumnType("integer")
                        .HasColumnName("nissu21");

                    b.Property<int>("Nissu22")
                        .HasColumnType("integer")
                        .HasColumnName("nissu22");

                    b.Property<int>("Nissu23")
                        .HasColumnType("integer")
                        .HasColumnName("nissu23");

                    b.Property<int>("Nissu24")
                        .HasColumnType("integer")
                        .HasColumnName("nissu24");

                    b.Property<int>("Nissu25")
                        .HasColumnType("integer")
                        .HasColumnName("nissu25");

                    b.Property<int>("Nissu26")
                        .HasColumnType("integer")
                        .HasColumnName("nissu26");

                    b.Property<int>("Nissu27")
                        .HasColumnType("integer")
                        .HasColumnName("nissu27");

                    b.Property<int>("Nissu28")
                        .HasColumnType("integer")
                        .HasColumnName("nissu28");

                    b.Property<int>("Nissu29")
                        .HasColumnType("integer")
                        .HasColumnName("nissu29");

                    b.Property<int>("Nissu3")
                        .HasColumnType("integer")
                        .HasColumnName("nissu3");

                    b.Property<int>("Nissu30")
                        .HasColumnType("integer")
                        .HasColumnName("nissu30");

                    b.Property<int>("Nissu31")
                        .HasColumnType("integer")
                        .HasColumnName("nissu31");

                    b.Property<int>("Nissu4")
                        .HasColumnType("integer")
                        .HasColumnName("nissu4");

                    b.Property<int>("Nissu5")
                        .HasColumnType("integer")
                        .HasColumnName("nissu5");

                    b.Property<int>("Nissu6")
                        .HasColumnType("integer")
                        .HasColumnName("nissu6");

                    b.Property<int>("Nissu7")
                        .HasColumnType("integer")
                        .HasColumnName("nissu7");

                    b.Property<int>("Nissu8")
                        .HasColumnType("integer")
                        .HasColumnName("nissu8");

                    b.Property<int>("Nissu9")
                        .HasColumnType("integer")
                        .HasColumnName("nissu9");

                    b.HasKey("HpId", "SeikyuYm", "PtId", "SinYm", "HokenId", "KohiId");

                    b.ToTable("rece_inf_jd");
                });

            modelBuilder.Entity("Entity.Tenant.ReceInfPreEdit", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("SeikyuYm")
                        .HasColumnType("integer")
                        .HasColumnName("seikyu_ym")
                        .HasColumnOrder(2);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(3);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int?>("HokenNissu")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_nissu");

                    b.Property<int?>("HokenReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_rece_futan");

                    b.Property<int?>("HokenReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_rece_tensu");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("houbetu");

                    b.Property<string>("Kohi1Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi1_houbetu");

                    b.Property<int?>("Kohi1Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_nissu");

                    b.Property<int?>("Kohi1ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_rece_futan");

                    b.Property<int?>("Kohi1ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_rece_kyufu");

                    b.Property<int?>("Kohi1ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_rece_tensu");

                    b.Property<string>("Kohi2Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi2_houbetu");

                    b.Property<int?>("Kohi2Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_nissu");

                    b.Property<int?>("Kohi2ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_rece_futan");

                    b.Property<int?>("Kohi2ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_rece_kyufu");

                    b.Property<int?>("Kohi2ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_rece_tensu");

                    b.Property<string>("Kohi3Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi3_houbetu");

                    b.Property<int?>("Kohi3Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_nissu");

                    b.Property<int?>("Kohi3ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_rece_futan");

                    b.Property<int?>("Kohi3ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_rece_kyufu");

                    b.Property<int?>("Kohi3ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_rece_tensu");

                    b.Property<string>("Kohi4Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi4_houbetu");

                    b.Property<int?>("Kohi4Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_nissu");

                    b.Property<int?>("Kohi4ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_rece_futan");

                    b.Property<int?>("Kohi4ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_rece_kyufu");

                    b.Property<int?>("Kohi4ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_rece_tensu");

                    b.Property<string>("ReceSbt")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("rece_sbt");

                    b.Property<string>("Tokki")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki");

                    b.Property<string>("Tokki1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki1");

                    b.Property<string>("Tokki2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki2");

                    b.Property<string>("Tokki3")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki3");

                    b.Property<string>("Tokki4")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki4");

                    b.Property<string>("Tokki5")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki5");

                    b.HasKey("HpId", "SeikyuYm", "PtId", "SinYm", "HokenId");

                    b.ToTable("rece_inf_pre_edit");
                });

            modelBuilder.Entity("Entity.Tenant.ReceSeikyu", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("PreHokenId")
                        .HasColumnType("integer")
                        .HasColumnName("pre_hoken_id");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SeikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("seikyu_kbn");

                    b.Property<int>("SeikyuYm")
                        .HasColumnType("integer")
                        .HasColumnName("seikyu_ym");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "SinYm", "SeqNo");

                    b.ToTable("rece_seikyu");
                });

            modelBuilder.Entity("Entity.Tenant.ReceStatus", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SeikyuYm")
                        .HasColumnType("integer")
                        .HasColumnName("seikyu_ym")
                        .HasColumnOrder(3);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id")
                        .HasColumnOrder(4);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("FusenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("fusen_kbn");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsPaperRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_paper_rece");

                    b.Property<int>("IsPrechecked")
                        .HasColumnType("integer")
                        .HasColumnName("is_prechecked");

                    b.Property<int>("Output")
                        .HasColumnType("integer")
                        .HasColumnName("output");

                    b.Property<int>("StatusKbn")
                        .HasColumnType("integer")
                        .HasColumnName("status_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SeikyuYm", "HokenId", "SinYm");

                    b.ToTable("rece_status");
                });

            modelBuilder.Entity("Entity.Tenant.RecedenCmtSelect", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("ItemNo")
                        .HasColumnType("integer")
                        .HasColumnName("item_no")
                        .HasColumnOrder(2);

                    b.Property<int>("EdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("eda_no")
                        .HasColumnOrder(3);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(4);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(5);

                    b.Property<string>("CommentCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("comment_cd")
                        .HasColumnOrder(6);

                    b.Property<int>("CondKbn")
                        .HasColumnType("integer")
                        .HasColumnName("cond_kbn");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("is_invalid");

                    b.Property<string>("KbnNo")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("kbn_no");

                    b.Property<int>("NotSanteiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("not_santei_kbn");

                    b.Property<int>("NyugaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("nyugai_kbn");

                    b.Property<int>("PtStatus")
                        .HasColumnType("integer")
                        .HasColumnName("pt_status");

                    b.Property<int>("SanteiCnt")
                        .HasColumnType("integer")
                        .HasColumnName("santei_cnt");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "ItemNo", "EdaNo", "ItemCd", "StartDate", "CommentCd");

                    b.HasIndex(new[] { "HpId", "ItemCd", "StartDate", "CommentCd", "IsInvalid" }, "receden_cmt_select_idx01");

                    b.ToTable("receden_cmt_select");
                });

            modelBuilder.Entity("Entity.Tenant.RecedenHenJiyuu", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id")
                        .HasColumnOrder(3);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("HenreiJiyuu")
                        .HasColumnType("text")
                        .HasColumnName("henrei_jiyuu");

                    b.Property<string>("HenreiJiyuuCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("henrei_jiyuu_cd");

                    b.Property<string>("Hosoku")
                        .HasColumnType("text")
                        .HasColumnName("hosoku");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "HokenId", "SinYm", "SeqNo");

                    b.ToTable("receden_hen_jiyuu");
                });

            modelBuilder.Entity("Entity.Tenant.RecedenRirekiInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id")
                        .HasColumnOrder(3);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Rireki")
                        .HasColumnType("text")
                        .HasColumnName("rireki");

                    b.Property<string>("SearchNo")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("search_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "HokenId", "SinYm", "SeqNo");

                    b.ToTable("receden_rireki_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ReleasenoteRead", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.Property<string>("Version")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("version")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.HasKey("HpId", "UserId", "Version");

                    b.ToTable("releasenote_read");
                });

            modelBuilder.Entity("Entity.Tenant.RenkeiConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Biko")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("biko");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("is_invalid");

                    b.Property<string>("Param")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("param");

                    b.Property<int>("PtNumLength")
                        .HasColumnType("integer")
                        .HasColumnName("pt_num_length");

                    b.Property<int>("RenkeiId")
                        .HasColumnType("integer")
                        .HasColumnName("renkei_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("template_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "Id");

                    b.ToTable("renkei_conf");
                });

            modelBuilder.Entity("Entity.Tenant.RenkeiMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("RenkeiId")
                        .HasColumnType("integer")
                        .HasColumnName("renkei_id")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("FunctionType")
                        .HasColumnType("integer")
                        .HasColumnName("function_type");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("is_invalid");

                    b.Property<string>("RenkeiName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("renkei_name");

                    b.Property<int>("RenkeiSbt")
                        .HasColumnType("integer")
                        .HasColumnName("renkei_sbt");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("HpId", "RenkeiId");

                    b.ToTable("renkei_mst");
                });

            modelBuilder.Entity("Entity.Tenant.RenkeiPathConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("EdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("eda_no")
                        .HasColumnOrder(4);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Biko")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("biko");

                    b.Property<int>("CharCd")
                        .HasColumnType("integer")
                        .HasColumnName("char_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("Interval")
                        .HasColumnType("integer")
                        .HasColumnName("interval");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("is_invalid");

                    b.Property<string>("Machine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("machine");

                    b.Property<string>("Param")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("param");

                    b.Property<string>("PassWord")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password");

                    b.Property<string>("Path")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("path");

                    b.Property<int>("RenkeiId")
                        .HasColumnType("integer")
                        .HasColumnName("renkei_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<string>("User")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user");

                    b.Property<string>("WorkPath")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("work_path");

                    b.HasKey("HpId", "EdaNo", "Id");

                    b.ToTable("renkei_path_conf");
                });

            modelBuilder.Entity("Entity.Tenant.RenkeiReq", b =>
                {
                    b.Property<long>("ReqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("req_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ReqId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("ErrMst")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("err_mst");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    b.Property<int>("ReqSbt")
                        .HasColumnType("integer")
                        .HasColumnName("req_sbt");

                    b.Property<string>("ReqType")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("req_type");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("ReqId");

                    b.ToTable("renkei_req");
                });

            modelBuilder.Entity("Entity.Tenant.RenkeiTemplateMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("template_id")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("File")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("file");

                    b.Property<string>("Param")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("param");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<string>("TemplateName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("template_name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("HpId", "TemplateId");

                    b.ToTable("renkei_template_mst");
                });

            modelBuilder.Entity("Entity.Tenant.RenkeiTimingConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("EventCd")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("event_cd")
                        .HasColumnOrder(4);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("is_invalid");

                    b.Property<int>("RenkeiId")
                        .HasColumnType("integer")
                        .HasColumnName("renkei_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "EventCd", "Id");

                    b.ToTable("renkei_timing_conf");
                });

            modelBuilder.Entity("Entity.Tenant.RenkeiTimingMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("RenkeiId")
                        .HasColumnType("integer")
                        .HasColumnName("renkei_id")
                        .HasColumnOrder(2);

                    b.Property<string>("EventCd")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("event_cd")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("is_invalid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("HpId", "RenkeiId", "EventCd");

                    b.ToTable("renkei_timing_mst");
                });

            modelBuilder.Entity("Entity.Tenant.RoudouMst", b =>
                {
                    b.Property<string>("RoudouCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("roudou_cd")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("RoudouName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("roudou_name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("RoudouCd");

                    b.ToTable("roudou_mst");
                });

            modelBuilder.Entity("Entity.Tenant.RousaiGoseiMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GoseiGrp")
                        .HasColumnType("integer")
                        .HasColumnName("gosei_grp")
                        .HasColumnOrder(2);

                    b.Property<string>("GoseiItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gosei_item_cd")
                        .HasColumnOrder(3);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(4);

                    b.Property<int>("SisiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sisi_kbn")
                        .HasColumnOrder(5);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GoseiGrp", "GoseiItemCd", "ItemCd", "SisiKbn", "StartDate");

                    b.ToTable("rousai_gosei_mst");
                });

            modelBuilder.Entity("Entity.Tenant.RsvDayComment", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "SinDate", "SeqNo");

                    b.ToTable("rsv_day_comment");
                });

            modelBuilder.Entity("Entity.Tenant.RsvFrameDayPtn", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("RsvFrameId")
                        .HasColumnType("integer")
                        .HasColumnName("rsv_frame_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndTime")
                        .HasColumnType("integer")
                        .HasColumnName("end_time");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsHoliday")
                        .HasColumnType("integer")
                        .HasColumnName("is_holiday");

                    b.Property<int>("Minutes")
                        .HasColumnType("integer")
                        .HasColumnName("minutes");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<int>("StartTime")
                        .HasColumnType("integer")
                        .HasColumnName("start_time");

                    b.Property<int>("UketukeSbt")
                        .HasColumnType("integer")
                        .HasColumnName("uketuke_sbt");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "RsvFrameId", "SinDate", "SeqNo");

                    b.ToTable("rsv_frame_day_ptn");
                });

            modelBuilder.Entity("Entity.Tenant.RsvFrameInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<int>("RsvFrameId")
                        .HasColumnType("integer")
                        .HasColumnName("rsv_frame_id")
                        .HasColumnOrder(3);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date")
                        .HasColumnOrder(4);

                    b.Property<int>("StartTime")
                        .HasColumnType("integer")
                        .HasColumnName("start_time")
                        .HasColumnOrder(5);

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndTime")
                        .HasColumnType("integer")
                        .HasColumnName("end_time");

                    b.Property<int>("FrameNo")
                        .HasColumnType("integer")
                        .HasColumnName("frame_no");

                    b.Property<int>("FrameSbt")
                        .HasColumnType("integer")
                        .HasColumnName("frame_sbt");

                    b.Property<int>("IsHoliday")
                        .HasColumnType("integer")
                        .HasColumnName("is_holiday");

                    b.Property<long>("Number")
                        .HasColumnType("bigint")
                        .HasColumnName("number");

                    b.Property<int>("UketukeSbt")
                        .HasColumnType("integer")
                        .HasColumnName("uketuke_sbt");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "RsvFrameId", "SinDate", "StartTime", "Id");

                    b.ToTable("rsv_frame_inf");
                });

            modelBuilder.Entity("Entity.Tenant.RsvFrameMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("RsvFrameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rsv_frame_id")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RsvFrameId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("KaId")
                        .HasColumnType("integer")
                        .HasColumnName("ka_id");

                    b.Property<int>("MakeRaiin")
                        .HasColumnType("integer")
                        .HasColumnName("make_raiin");

                    b.Property<string>("RsvFrameName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("rsv_frame_name");

                    b.Property<int>("RsvGrpId")
                        .HasColumnType("integer")
                        .HasColumnName("rsv_grp_id");

                    b.Property<int>("SortKey")
                        .HasColumnType("integer")
                        .HasColumnName("sort_key");

                    b.Property<int>("TantoId")
                        .HasColumnType("integer")
                        .HasColumnName("tanto_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "RsvFrameId");

                    b.ToTable("rsv_frame_mst");
                });

            modelBuilder.Entity("Entity.Tenant.RsvFrameWeekPtn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<int>("RsvFrameId")
                        .HasColumnType("integer")
                        .HasColumnName("rsv_frame_id")
                        .HasColumnOrder(3);

                    b.Property<int>("Week")
                        .HasColumnType("integer")
                        .HasColumnName("week")
                        .HasColumnOrder(5);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(6);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("EndTime")
                        .HasColumnType("integer")
                        .HasColumnName("end_time");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsHoliday")
                        .HasColumnType("integer")
                        .HasColumnName("is_holiday");

                    b.Property<int>("Minutes")
                        .HasColumnType("integer")
                        .HasColumnName("minutes");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(4);

                    b.Property<int>("StartTime")
                        .HasColumnType("integer")
                        .HasColumnName("start_time");

                    b.Property<int>("UketukeSbt")
                        .HasColumnType("integer")
                        .HasColumnName("uketuke_sbt");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id", "HpId", "RsvFrameId", "Week", "SeqNo");

                    b.ToTable("rsv_frame_week_ptn");
                });

            modelBuilder.Entity("Entity.Tenant.RsvFrameWith", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<int>("RsvFrameId")
                        .HasColumnType("integer")
                        .HasColumnName("rsv_frame_id")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("SortKey")
                        .HasColumnType("integer")
                        .HasColumnName("sort_key");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<int>("WithFrameId")
                        .HasColumnType("integer")
                        .HasColumnName("with_frame_id")
                        .HasColumnOrder(4);

                    b.HasKey("Id", "HpId", "RsvFrameId");

                    b.ToTable("rsv_frame_with");
                });

            modelBuilder.Entity("Entity.Tenant.RsvGrpMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("RsvGrpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rsv_grp_id")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RsvGrpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("RsvGrpName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("rsv_grp_name");

                    b.Property<int>("SortKey")
                        .HasColumnType("integer")
                        .HasColumnName("sort_key");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "RsvGrpId");

                    b.ToTable("rsv_grp_mst");
                });

            modelBuilder.Entity("Entity.Tenant.RsvInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("RsvFrameId")
                        .HasColumnType("integer")
                        .HasColumnName("rsv_frame_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date")
                        .HasColumnOrder(3);

                    b.Property<int>("StartTime")
                        .HasColumnType("integer")
                        .HasColumnName("start_time")
                        .HasColumnOrder(4);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("KaId")
                        .HasColumnType("integer")
                        .HasColumnName("ka_id");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("RsvSbt")
                        .HasColumnType("integer")
                        .HasColumnName("rsv_sbt");

                    b.Property<int>("TantoId")
                        .HasColumnType("integer")
                        .HasColumnName("tanto_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "RsvFrameId", "SinDate", "StartTime", "RaiinNo");

                    b.ToTable("rsv_inf");
                });

            modelBuilder.Entity("Entity.Tenant.RsvRenkeiInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<long>("OtherPtId")
                        .HasColumnType("bigint")
                        .HasColumnName("other_pt_id");

                    b.Property<long>("OtherSeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("other_seq_no");

                    b.Property<long>("OtherSeqNo2")
                        .HasColumnType("bigint")
                        .HasColumnName("other_seq_no2");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "RaiinNo");

                    b.ToTable("rsv_renkei_inf");
                });

            modelBuilder.Entity("Entity.Tenant.RsvRenkeiInfTk", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(2);

                    b.Property<int>("SystemKbn")
                        .HasColumnType("integer")
                        .HasColumnName("system_kbn")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<long>("OtherPtId")
                        .HasColumnType("bigint")
                        .HasColumnName("other_pt_id");

                    b.Property<long>("OtherSeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("other_seq_no");

                    b.Property<long>("OtherSeqNo2")
                        .HasColumnType("bigint")
                        .HasColumnName("other_seq_no2");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "RaiinNo", "SystemKbn");

                    b.ToTable("rsv_renkei_inf_tk");
                });

            modelBuilder.Entity("Entity.Tenant.RsvkrtByomei", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("RsvkrtNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rsvkrt_no")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Byomei")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("byomei");

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("byomei_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("HosokuCmt")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("hosoku_cmt");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsNodspKarte")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_karte");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_rece");

                    b.Property<int>("NanbyoCd")
                        .HasColumnType("integer")
                        .HasColumnName("nanbyo_cd");

                    b.Property<int>("SikkanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sikkan_kbn");

                    b.Property<int>("SyobyoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("syubyo_kbn");

                    b.Property<string>("SyusyokuCd1")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd1");

                    b.Property<string>("SyusyokuCd10")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd10");

                    b.Property<string>("SyusyokuCd11")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd11");

                    b.Property<string>("SyusyokuCd12")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd12");

                    b.Property<string>("SyusyokuCd13")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd13");

                    b.Property<string>("SyusyokuCd14")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd14");

                    b.Property<string>("SyusyokuCd15")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd15");

                    b.Property<string>("SyusyokuCd16")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd16");

                    b.Property<string>("SyusyokuCd17")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd17");

                    b.Property<string>("SyusyokuCd18")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd18");

                    b.Property<string>("SyusyokuCd19")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd19");

                    b.Property<string>("SyusyokuCd2")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd2");

                    b.Property<string>("SyusyokuCd20")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd20");

                    b.Property<string>("SyusyokuCd21")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd21");

                    b.Property<string>("SyusyokuCd3")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd3");

                    b.Property<string>("SyusyokuCd4")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd4");

                    b.Property<string>("SyusyokuCd5")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd5");

                    b.Property<string>("SyusyokuCd6")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd6");

                    b.Property<string>("SyusyokuCd7")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd7");

                    b.Property<string>("SyusyokuCd8")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd8");

                    b.Property<string>("SyusyokuCd9")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd9");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "RsvkrtNo", "SeqNo", "Id");

                    b.ToTable("rsvkrt_byomei");
                });

            modelBuilder.Entity("Entity.Tenant.RsvkrtKarteImgInf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("file_name");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("KarteKbn")
                        .HasColumnType("integer")
                        .HasColumnName("karte_kbn");

                    b.Property<string>("Message")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("message");

                    b.Property<long>("Position")
                        .HasColumnType("bigint")
                        .HasColumnName("position");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("RsvkrtNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rsvkrt_no");

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    b.HasKey("Id");

                    b.ToTable("rsvkrt_karte_img_inf");
                });

            modelBuilder.Entity("Entity.Tenant.RsvkrtKarteInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("RsvkrtNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rsvkrt_no")
                        .HasColumnOrder(3);

                    b.Property<int>("KarteKbn")
                        .HasColumnType("integer")
                        .HasColumnName("karte_kbn")
                        .HasColumnOrder(4);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<byte[]>("RichText")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("rich_text");

                    b.Property<int>("RsvDate")
                        .HasColumnType("integer")
                        .HasColumnName("rsv_date");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "RsvkrtNo", "KarteKbn", "SeqNo");

                    b.ToTable("rsvkrt_karte_inf");
                });

            modelBuilder.Entity("Entity.Tenant.RsvkrtMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("RsvkrtNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("rsvkrt_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("RsvkrtNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("RsvDate")
                        .HasColumnType("integer")
                        .HasColumnName("rsv_date");

                    b.Property<string>("RsvName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("rsv_name");

                    b.Property<int>("RsvkrtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("rsvkrt_kbn");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "RsvkrtNo");

                    b.HasIndex("HpId", "PtId", "RsvDate")
                        .IsUnique()
                        .HasFilter("\"rsvkrt_kbn\" = 0 AND \"is_deleted\" = 0");

                    b.ToTable("rsvkrt_mst");
                });

            modelBuilder.Entity("Entity.Tenant.RsvkrtOdrInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("RsvkrtNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rsvkrt_no")
                        .HasColumnOrder(3);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_no")
                        .HasColumnOrder(4);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_eda_no")
                        .HasColumnOrder(5);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(6);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("DaysCnt")
                        .HasColumnType("integer")
                        .HasColumnName("days_cnt");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_pid");

                    b.Property<int>("InoutKbn")
                        .HasColumnType("integer")
                        .HasColumnName("inout_kbn");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("OdrKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("odr_koui_kbn");

                    b.Property<string>("RpName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("rp_name");

                    b.Property<int>("RsvDate")
                        .HasColumnType("integer")
                        .HasColumnName("rsv_date");

                    b.Property<int>("SanteiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("santei_kbn");

                    b.Property<int>("SikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sikyu_kbn");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("SyohoSbt")
                        .HasColumnType("integer")
                        .HasColumnName("syoho_sbt");

                    b.Property<int>("TosekiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("toseki_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "RsvkrtNo", "RpNo", "RpEdaNo", "Id");

                    b.ToTable("rsvkrt_odr_inf");
                });

            modelBuilder.Entity("Entity.Tenant.RsvkrtOdrInfCmt", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("RsvkrtNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rsvkrt_no")
                        .HasColumnOrder(3);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_eda_no")
                        .HasColumnOrder(5);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_no")
                        .HasColumnOrder(4);

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("row_no")
                        .HasColumnOrder(6);

                    b.Property<int>("EdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("eda_no")
                        .HasColumnOrder(7);

                    b.Property<string>("CmtCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cmt_cd");

                    b.Property<string>("CmtName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("cmt_name");

                    b.Property<string>("CmtOpt")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("cmt_opt");

                    b.Property<int>("FontColor")
                        .HasColumnType("integer")
                        .HasColumnName("font_color");

                    b.Property<int>("RsvDate")
                        .HasColumnType("integer")
                        .HasColumnName("rsv_date");

                    b.HasKey("HpId", "PtId", "RsvkrtNo", "RpEdaNo", "RpNo", "RowNo", "EdaNo");

                    b.ToTable("rsvkrt_odr_inf_cmt");
                });

            modelBuilder.Entity("Entity.Tenant.RsvkrtOdrInfDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("RsvkrtNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rsvkrt_no")
                        .HasColumnOrder(3);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_no")
                        .HasColumnOrder(4);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_eda_no")
                        .HasColumnOrder(5);

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("row_no")
                        .HasColumnOrder(6);

                    b.Property<string>("Bunkatu")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("bunkatu");

                    b.Property<string>("CmtName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("cmt_name");

                    b.Property<string>("CmtOpt")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("cmt_opt");

                    b.Property<int>("CommentNewline")
                        .HasColumnType("integer")
                        .HasColumnName("comment_newline");

                    b.Property<int>("DrugKbn")
                        .HasColumnType("integer")
                        .HasColumnName("drug_kbn");

                    b.Property<string>("FontColor")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("font_color");

                    b.Property<string>("IpnCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("ipn_cd");

                    b.Property<string>("IpnName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("ipn_name");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_rece");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<string>("ItemName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("item_name");

                    b.Property<int>("KohatuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kohatu_kbn");

                    b.Property<string>("Kokuji1")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("kokuji1");

                    b.Property<string>("Kokuji2")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("kokuji2");

                    b.Property<int>("RsvDate")
                        .HasColumnType("integer")
                        .HasColumnName("rsv_date");

                    b.Property<int>("SinKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sin_koui_kbn");

                    b.Property<double>("Suryo")
                        .HasColumnType("double precision")
                        .HasColumnName("suryo");

                    b.Property<int>("SyohoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("syoho_kbn");

                    b.Property<int>("SyohoLimitKbn")
                        .HasColumnType("integer")
                        .HasColumnName("syoho_limit_kbn");

                    b.Property<double>("TermVal")
                        .HasColumnType("double precision")
                        .HasColumnName("term_val");

                    b.Property<string>("UnitName")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("unit_name");

                    b.Property<int>("UnitSbt")
                        .HasColumnType("integer")
                        .HasColumnName("unit_sbt");

                    b.Property<int>("YohoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("yoho_kbn");

                    b.HasKey("HpId", "PtId", "RsvkrtNo", "RpNo", "RpEdaNo", "RowNo");

                    b.ToTable("rsvkrt_odr_inf_detail");
                });

            modelBuilder.Entity("Entity.Tenant.SanteiAutoOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SanteiGrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("santei_grp_cd")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<int>("AddTarget")
                        .HasColumnType("integer")
                        .HasColumnName("add_target");

                    b.Property<int>("AddType")
                        .HasColumnType("integer")
                        .HasColumnName("add_type");

                    b.Property<int>("CntType")
                        .HasColumnType("integer")
                        .HasColumnName("cnt_type");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<long>("MaxCnt")
                        .HasColumnType("bigint")
                        .HasColumnName("max_cnt");

                    b.Property<int>("SpCondition")
                        .HasColumnType("integer")
                        .HasColumnName("sp_condition");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<int>("TermCnt")
                        .HasColumnType("integer")
                        .HasColumnName("term_cnt");

                    b.Property<int>("TermSbt")
                        .HasColumnType("integer")
                        .HasColumnName("term_sbt");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id", "HpId", "SanteiGrpCd", "SeqNo");

                    b.ToTable("santei_auto_order");
                });

            modelBuilder.Entity("Entity.Tenant.SanteiAutoOrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SanteiGrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("santei_grp_cd")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<double>("Suryo")
                        .HasColumnType("double precision")
                        .HasColumnName("suryo");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id", "HpId", "SanteiGrpCd", "SeqNo", "ItemCd");

                    b.ToTable("santei_auto_order_detail");
                });

            modelBuilder.Entity("Entity.Tenant.SanteiCntCheck", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("SanteiGrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("santei_grp_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    b.Property<int>("CntType")
                        .HasColumnType("integer")
                        .HasColumnName("cnt_type");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("ErrKbn")
                        .HasColumnType("integer")
                        .HasColumnName("err_kbn");

                    b.Property<long>("MaxCnt")
                        .HasColumnType("bigint")
                        .HasColumnName("max_cnt");

                    b.Property<int>("SpCondition")
                        .HasColumnType("integer")
                        .HasColumnName("sp_condition");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<string>("TargetCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("target_cd");

                    b.Property<int>("TermCnt")
                        .HasColumnType("integer")
                        .HasColumnName("term_cnt");

                    b.Property<int>("TermSbt")
                        .HasColumnType("integer")
                        .HasColumnName("term_sbt");

                    b.Property<string>("UnitName")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("unit_name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "SanteiGrpCd", "SeqNo");

                    b.ToTable("santei_cnt_check");
                });

            modelBuilder.Entity("Entity.Tenant.SanteiGrpDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("SanteiGrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("santei_grp_cd")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd")
                        .HasColumnType("text")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "SanteiGrpCd", "ItemCd");

                    b.ToTable("santei_grp_detail");
                });

            modelBuilder.Entity("Entity.Tenant.SanteiGrpMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("SanteiGrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("santei_grp_cd")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("SanteiGrpName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("santei_grp_name");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "SanteiGrpCd");

                    b.ToTable("santei_grp_mst");
                });

            modelBuilder.Entity("Entity.Tenant.SanteiInf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AlertDays")
                        .HasColumnType("integer")
                        .HasColumnName("alert_days");

                    b.Property<int>("AlertTerm")
                        .HasColumnType("integer")
                        .HasColumnName("alert_term");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id");

                    b.ToTable("santei_inf");
                });

            modelBuilder.Entity("Entity.Tenant.SanteiInfDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Byomei")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("byomei");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<string>("HosokuComment")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("hosoku_comment");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<int>("KisanDate")
                        .HasColumnType("integer")
                        .HasColumnName("kisan_date");

                    b.Property<int>("KisanSbt")
                        .HasColumnType("integer")
                        .HasColumnName("kisan_sbt");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id");

                    b.ToTable("santei_inf_detail");
                });

            modelBuilder.Entity("Entity.Tenant.SchemaCmtMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("CommentCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("comment_cd")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommentCd"));

                    b.Property<string>("Comment")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "CommentCd");

                    b.ToTable("schema_cmt_mst");
                });

            modelBuilder.Entity("Entity.Tenant.SeikaturekiInf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id");

                    b.ToTable("seikatureki_inf");
                });

            modelBuilder.Entity("Entity.Tenant.SentenceList", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("Sentence")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("sentence");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("KarteKbn")
                        .HasColumnType("integer")
                        .HasColumnName("karte_kbn");

                    b.Property<long>("Level1")
                        .HasColumnType("bigint")
                        .HasColumnName("level1");

                    b.Property<long>("Level2")
                        .HasColumnType("bigint")
                        .HasColumnName("level2");

                    b.Property<long>("Level3")
                        .HasColumnType("bigint")
                        .HasColumnName("level3");

                    b.Property<int>("NewLine")
                        .HasColumnType("integer")
                        .HasColumnName("new_line");

                    b.Property<int>("SelectType")
                        .HasColumnType("integer")
                        .HasColumnName("select_type");

                    b.Property<int>("SetCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("sentence_cd")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SetCd"));

                    b.Property<int>("SetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("set_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "Sentence");

                    b.ToTable("sentence_list");
                });

            modelBuilder.Entity("Entity.Tenant.SessionInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("Machine")
                        .HasColumnType("text")
                        .HasColumnName("machine")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("login_date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("HpId", "Machine");

                    b.ToTable("session_inf");
                });

            modelBuilder.Entity("Entity.Tenant.SetByomei", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("SetCd")
                        .HasColumnType("integer")
                        .HasColumnName("set_cd")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    b.Property<string>("Byomei")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("byomei");

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("byomei_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("HosokuCmt")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("hosoku_cmt");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsNodspKarte")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_karte");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_rece");

                    b.Property<int>("NanbyoCd")
                        .HasColumnType("integer")
                        .HasColumnName("nanbyo_cd");

                    b.Property<int>("SikkanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sikkan_kbn");

                    b.Property<int>("SyobyoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("syubyo_kbn");

                    b.Property<string>("SyusyokuCd1")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd1");

                    b.Property<string>("SyusyokuCd10")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd10");

                    b.Property<string>("SyusyokuCd11")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd11");

                    b.Property<string>("SyusyokuCd12")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd12");

                    b.Property<string>("SyusyokuCd13")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd13");

                    b.Property<string>("SyusyokuCd14")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd14");

                    b.Property<string>("SyusyokuCd15")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd15");

                    b.Property<string>("SyusyokuCd16")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd16");

                    b.Property<string>("SyusyokuCd17")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd17");

                    b.Property<string>("SyusyokuCd18")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd18");

                    b.Property<string>("SyusyokuCd19")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd19");

                    b.Property<string>("SyusyokuCd2")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd2");

                    b.Property<string>("SyusyokuCd20")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd20");

                    b.Property<string>("SyusyokuCd21")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd21");

                    b.Property<string>("SyusyokuCd3")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd3");

                    b.Property<string>("SyusyokuCd4")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd4");

                    b.Property<string>("SyusyokuCd5")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd5");

                    b.Property<string>("SyusyokuCd6")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd6");

                    b.Property<string>("SyusyokuCd7")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd7");

                    b.Property<string>("SyusyokuCd8")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd8");

                    b.Property<string>("SyusyokuCd9")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("syusyoku_cd9");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id", "HpId", "SetCd", "SeqNo");

                    b.ToTable("set_byomei");
                });

            modelBuilder.Entity("Entity.Tenant.SetGenerationMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GenerationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("generation_id")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenerationId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GenerationId");

                    b.ToTable("set_generation_mst");
                });

            modelBuilder.Entity("Entity.Tenant.SetKarteImgInf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("file_name");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("KarteKbn")
                        .HasColumnType("integer")
                        .HasColumnName("karte_kbn");

                    b.Property<long>("Position")
                        .HasColumnType("bigint")
                        .HasColumnName("position");

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    b.Property<int>("SetCd")
                        .HasColumnType("integer")
                        .HasColumnName("set_cd");

                    b.HasKey("Id");

                    b.ToTable("set_karte_img_inf");
                });

            modelBuilder.Entity("Entity.Tenant.SetKarteInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("SetCd")
                        .HasColumnType("integer")
                        .HasColumnName("set_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("KarteKbn")
                        .HasColumnType("integer")
                        .HasColumnName("karte_kbn")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<byte[]>("RichText")
                        .HasColumnType("bytea")
                        .HasColumnName("rich_text");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "SetCd", "KarteKbn", "SeqNo");

                    b.ToTable("set_karte_inf");
                });

            modelBuilder.Entity("Entity.Tenant.SetKbnMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("SetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("set_kbn")
                        .HasColumnOrder(2);

                    b.Property<int>("SetKbnEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("set_kbn_eda_no")
                        .HasColumnOrder(3);

                    b.Property<int>("GenerationId")
                        .HasColumnType("integer")
                        .HasColumnName("generation_id")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("DocCd")
                        .HasColumnType("integer")
                        .HasColumnName("doc_cd");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("KaCd")
                        .HasColumnType("integer")
                        .HasColumnName("ka_cd");

                    b.Property<string>("SetKbnName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("set_kbn_name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "SetKbn", "SetKbnEdaNo", "GenerationId");

                    b.ToTable("set_kbn_mst");
                });

            modelBuilder.Entity("Entity.Tenant.SetMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("SetCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("set_cd")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SetCd"));

                    b.Property<int>("Color")
                        .HasColumnType("integer")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("GenerationId")
                        .HasColumnType("integer")
                        .HasColumnName("generation_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsGroup")
                        .HasColumnType("integer")
                        .HasColumnName("is_group");

                    b.Property<int>("Level1")
                        .HasColumnType("integer")
                        .HasColumnName("level1");

                    b.Property<int>("Level2")
                        .HasColumnType("integer")
                        .HasColumnName("level2");

                    b.Property<int>("Level3")
                        .HasColumnType("integer")
                        .HasColumnName("level3");

                    b.Property<int>("SetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("set_kbn");

                    b.Property<int>("SetKbnEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("set_kbn_eda_no");

                    b.Property<string>("SetName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("set_name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<int>("WeightKbn")
                        .HasColumnType("integer")
                        .HasColumnName("weight_kbn");

                    b.HasKey("HpId", "SetCd");

                    b.HasIndex("HpId", "SetCd", "SetKbn", "SetKbnEdaNo", "GenerationId", "Level1", "Level2", "Level3")
                        .IsUnique()
                        .HasFilter("\"is_deleted\" = 0");

                    b.ToTable("set_mst");
                });

            modelBuilder.Entity("Entity.Tenant.SetOdrInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("SetCd")
                        .HasColumnType("integer")
                        .HasColumnName("set_cd")
                        .HasColumnOrder(2);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_no")
                        .HasColumnOrder(3);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_eda_no")
                        .HasColumnOrder(4);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("DaysCnt")
                        .HasColumnType("integer")
                        .HasColumnName("days_cnt");

                    b.Property<int>("InoutKbn")
                        .HasColumnType("integer")
                        .HasColumnName("inout_kbn");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("OdrKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("odr_koui_kbn");

                    b.Property<string>("RpName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("rp_name");

                    b.Property<int>("SanteiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("santei_kbn");

                    b.Property<int>("SikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sikyu_kbn");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("SyohoSbt")
                        .HasColumnType("integer")
                        .HasColumnName("syoho_sbt");

                    b.Property<int>("TosekiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("toseki_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "SetCd", "RpNo", "RpEdaNo", "Id");

                    b.ToTable("set_odr_inf");
                });

            modelBuilder.Entity("Entity.Tenant.SetOdrInfCmt", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("SetCd")
                        .HasColumnType("integer")
                        .HasColumnName("set_cd")
                        .HasColumnOrder(2);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_no")
                        .HasColumnOrder(3);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_eda_no")
                        .HasColumnOrder(4);

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("row_no")
                        .HasColumnOrder(5);

                    b.Property<int>("EdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("eda_no")
                        .HasColumnOrder(6);

                    b.Property<string>("CmtCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cmt_cd");

                    b.Property<string>("CmtName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("cmt_name");

                    b.Property<string>("CmtOpt")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("cmt_opt");

                    b.Property<int>("FontColor")
                        .HasColumnType("integer")
                        .HasColumnName("font_color");

                    b.HasKey("HpId", "SetCd", "RpNo", "RpEdaNo", "RowNo", "EdaNo");

                    b.ToTable("set_odr_inf_cmt");
                });

            modelBuilder.Entity("Entity.Tenant.SetOdrInfDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("SetCd")
                        .HasColumnType("integer")
                        .HasColumnName("set_cd")
                        .HasColumnOrder(2);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_no")
                        .HasColumnOrder(3);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_eda_no")
                        .HasColumnOrder(4);

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("row_no")
                        .HasColumnOrder(5);

                    b.Property<string>("Bunkatu")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("bunkatu");

                    b.Property<string>("CmtName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("cmt_name");

                    b.Property<string>("CmtOpt")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("cmt_opt");

                    b.Property<int>("CommentNewline")
                        .HasColumnType("integer")
                        .HasColumnName("comment_newline");

                    b.Property<int>("DrugKbn")
                        .HasColumnType("integer")
                        .HasColumnName("drug_kbn");

                    b.Property<string>("FontColor")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("font_color");

                    b.Property<string>("IpnCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("ipn_cd");

                    b.Property<string>("IpnName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("ipn_name");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_rece");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<string>("ItemName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("item_name");

                    b.Property<int>("KohatuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kohatu_kbn");

                    b.Property<string>("Kokuji1")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("kokuji1");

                    b.Property<string>("Kokuji2")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("kokuji2");

                    b.Property<double>("OdrTermVal")
                        .HasColumnType("double precision")
                        .HasColumnName("odr_term_val");

                    b.Property<int>("SinKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sin_koui_kbn");

                    b.Property<double>("Suryo")
                        .HasColumnType("double precision")
                        .HasColumnName("suryo");

                    b.Property<int>("SyohoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("syoho_kbn");

                    b.Property<int>("SyohoLimitKbn")
                        .HasColumnType("integer")
                        .HasColumnName("syoho_limit_kbn");

                    b.Property<string>("UnitName")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("unit_name");

                    b.Property<int>("UnitSbt")
                        .HasColumnType("integer")
                        .HasColumnName("unit_sbt");

                    b.Property<int>("YohoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("yoho_kbn");

                    b.HasKey("HpId", "SetCd", "RpNo", "RpEdaNo", "RowNo");

                    b.ToTable("set_odr_inf_detail");
                });

            modelBuilder.Entity("Entity.Tenant.SinKoui", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(3);

                    b.Property<int>("RpNo")
                        .HasColumnType("integer")
                        .HasColumnName("rp_no")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(5);

                    b.Property<string>("CdKbn")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("cd_kbn");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("Day1")
                        .HasColumnType("integer")
                        .HasColumnName("day1");

                    b.Property<int>("Day10")
                        .HasColumnType("integer")
                        .HasColumnName("day10");

                    b.Property<int>("Day11")
                        .HasColumnType("integer")
                        .HasColumnName("day11");

                    b.Property<int>("Day12")
                        .HasColumnType("integer")
                        .HasColumnName("day12");

                    b.Property<int>("Day13")
                        .HasColumnType("integer")
                        .HasColumnName("day13");

                    b.Property<int>("Day14")
                        .HasColumnType("integer")
                        .HasColumnName("day14");

                    b.Property<int>("Day15")
                        .HasColumnType("integer")
                        .HasColumnName("day15");

                    b.Property<int>("Day16")
                        .HasColumnType("integer")
                        .HasColumnName("day16");

                    b.Property<int>("Day17")
                        .HasColumnType("integer")
                        .HasColumnName("day17");

                    b.Property<int>("Day18")
                        .HasColumnType("integer")
                        .HasColumnName("day18");

                    b.Property<int>("Day19")
                        .HasColumnType("integer")
                        .HasColumnName("day19");

                    b.Property<int>("Day2")
                        .HasColumnType("integer")
                        .HasColumnName("day2");

                    b.Property<int>("Day20")
                        .HasColumnType("integer")
                        .HasColumnName("day20");

                    b.Property<int>("Day21")
                        .HasColumnType("integer")
                        .HasColumnName("day21");

                    b.Property<int>("Day22")
                        .HasColumnType("integer")
                        .HasColumnName("day22");

                    b.Property<int>("Day23")
                        .HasColumnType("integer")
                        .HasColumnName("day23");

                    b.Property<int>("Day24")
                        .HasColumnType("integer")
                        .HasColumnName("day24");

                    b.Property<int>("Day25")
                        .HasColumnType("integer")
                        .HasColumnName("day25");

                    b.Property<int>("Day26")
                        .HasColumnType("integer")
                        .HasColumnName("day26");

                    b.Property<int>("Day27")
                        .HasColumnType("integer")
                        .HasColumnName("day27");

                    b.Property<int>("Day28")
                        .HasColumnType("integer")
                        .HasColumnName("day28");

                    b.Property<int>("Day29")
                        .HasColumnType("integer")
                        .HasColumnName("day29");

                    b.Property<int>("Day3")
                        .HasColumnType("integer")
                        .HasColumnName("day3");

                    b.Property<int>("Day30")
                        .HasColumnType("integer")
                        .HasColumnName("day30");

                    b.Property<int>("Day31")
                        .HasColumnType("integer")
                        .HasColumnName("day31");

                    b.Property<int>("Day4")
                        .HasColumnType("integer")
                        .HasColumnName("day4");

                    b.Property<int>("Day5")
                        .HasColumnType("integer")
                        .HasColumnName("day5");

                    b.Property<int>("Day6")
                        .HasColumnType("integer")
                        .HasColumnName("day6");

                    b.Property<int>("Day7")
                        .HasColumnType("integer")
                        .HasColumnName("day7");

                    b.Property<int>("Day8")
                        .HasColumnType("integer")
                        .HasColumnName("day8");

                    b.Property<int>("Day9")
                        .HasColumnType("integer")
                        .HasColumnName("day9");

                    b.Property<string>("DetailData")
                        .HasColumnType("text")
                        .HasColumnName("detail_data");

                    b.Property<int>("EfFlg")
                        .HasColumnType("integer")
                        .HasColumnName("ef_flg");

                    b.Property<double>("EfTen")
                        .HasColumnType("double precision")
                        .HasColumnName("ef_ten");

                    b.Property<string>("EfTenCount")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ef_ten_count");

                    b.Property<double>("EfTotalTen")
                        .HasColumnType("double precision")
                        .HasColumnName("ef_total_ten");

                    b.Property<int>("EntenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("enten_kbn");

                    b.Property<int>("HokatuKensa")
                        .HasColumnType("integer")
                        .HasColumnName("hokatu_kensa");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_pid");

                    b.Property<int>("InoutKbn")
                        .HasColumnType("integer")
                        .HasColumnName("inout_kbn");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsNodspPaperRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_paper_rece");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_rece");

                    b.Property<int>("JihiSbt")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_sbt");

                    b.Property<int>("KazeiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kazei_kbn");

                    b.Property<string>("RecId")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("rec_id");

                    b.Property<string>("SyukeiSaki")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("syukei_saki");

                    b.Property<double>("Ten")
                        .HasColumnType("double precision")
                        .HasColumnName("ten");

                    b.Property<int>("TenColCount")
                        .HasColumnType("integer")
                        .HasColumnName("ten_col_count");

                    b.Property<string>("TenCount")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ten_count");

                    b.Property<double>("TotalTen")
                        .HasColumnType("double precision")
                        .HasColumnName("total_ten");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<double>("Zei")
                        .HasColumnType("double precision")
                        .HasColumnName("zei");

                    b.HasKey("HpId", "PtId", "SinYm", "RpNo", "SeqNo");

                    b.ToTable("sin_koui");
                });

            modelBuilder.Entity("Entity.Tenant.SinKouiCount", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(3);

                    b.Property<int>("SinDay")
                        .HasColumnType("integer")
                        .HasColumnName("sin_day")
                        .HasColumnOrder(4);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(5);

                    b.Property<int>("RpNo")
                        .HasColumnType("integer")
                        .HasColumnName("rp_no")
                        .HasColumnOrder(6);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(7);

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SinYm", "SinDay", "RaiinNo", "RpNo", "SeqNo");

                    b.ToTable("sin_koui_count");
                });

            modelBuilder.Entity("Entity.Tenant.SinKouiDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(3);

                    b.Property<int>("RpNo")
                        .HasColumnType("integer")
                        .HasColumnName("rp_no")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(5);

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("row_no")
                        .HasColumnOrder(6);

                    b.Property<string>("Cmt1")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("cmt1");

                    b.Property<string>("Cmt2")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("cmt2");

                    b.Property<string>("Cmt3")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("cmt3");

                    b.Property<string>("CmtCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cmt_cd1");

                    b.Property<string>("CmtCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cmt_cd2");

                    b.Property<string>("CmtCd3")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cmt_cd3");

                    b.Property<string>("CmtOpt")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("cmt_opt");

                    b.Property<string>("CmtOpt1")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("cmt_opt1");

                    b.Property<string>("CmtOpt2")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("cmt_opt2");

                    b.Property<string>("CmtOpt3")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("cmt_opt3");

                    b.Property<int>("EfFlg")
                        .HasColumnType("integer")
                        .HasColumnName("ef_flg");

                    b.Property<double>("EfTen")
                        .HasColumnType("double precision")
                        .HasColumnName("ef_ten");

                    b.Property<int>("FmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("fmt_kbn");

                    b.Property<int>("IpnFlg")
                        .HasColumnType("integer")
                        .HasColumnName("ipn_flg");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsNodspPaperRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_paper_rece");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_rece");

                    b.Property<int>("IsNodspRyosyu")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_ryosyu");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<string>("ItemName")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("item_name");

                    b.Property<int>("ItemSbt")
                        .HasColumnType("integer")
                        .HasColumnName("item_sbt");

                    b.Property<string>("OdrItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("odr_item_cd");

                    b.Property<string>("RecId")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("rec_id");

                    b.Property<double>("Suryo")
                        .HasColumnType("double precision")
                        .HasColumnName("suryo");

                    b.Property<double>("Suryo2")
                        .HasColumnType("double precision")
                        .HasColumnName("suryo2");

                    b.Property<double>("Ten")
                        .HasColumnType("double precision")
                        .HasColumnName("ten");

                    b.Property<int>("UnitCd")
                        .HasColumnType("integer")
                        .HasColumnName("unit_cd");

                    b.Property<string>("UnitName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unit_name");

                    b.Property<double>("Zei")
                        .HasColumnType("double precision")
                        .HasColumnName("zei");

                    b.HasKey("HpId", "PtId", "SinYm", "RpNo", "SeqNo", "RowNo");

                    b.ToTable("sin_koui_detail");
                });

            modelBuilder.Entity("Entity.Tenant.SinRpInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(3);

                    b.Property<int>("RpNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rp_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RpNo"));

                    b.Property<string>("CdNo")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("cd_no");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EfFlg")
                        .HasColumnType("integer")
                        .HasColumnName("ef_flg");

                    b.Property<int>("FirstDay")
                        .HasColumnType("integer")
                        .HasColumnName("first_day");

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_kbn");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("KouiData")
                        .HasColumnType("text")
                        .HasColumnName("koui_data");

                    b.Property<int>("SanteiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("santei_kbn");

                    b.Property<int>("SinId")
                        .HasColumnType("integer")
                        .HasColumnName("sin_id");

                    b.Property<int>("SinKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sin_koui_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SinYm", "RpNo");

                    b.ToTable("sin_rp_inf");
                });

            modelBuilder.Entity("Entity.Tenant.SinRpNoInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(3);

                    b.Property<int>("SinDay")
                        .HasColumnType("integer")
                        .HasColumnName("sin_day")
                        .HasColumnOrder(4);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(5);

                    b.Property<int>("RpNo")
                        .HasColumnType("integer")
                        .HasColumnName("rp_no")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SinYm", "SinDay", "RaiinNo", "RpNo");

                    b.ToTable("sin_rp_no_inf");
                });

            modelBuilder.Entity("Entity.Tenant.SingleDoseMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("UnitName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("unit_name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "Id");

                    b.ToTable("single_dose_mst");
                });

            modelBuilder.Entity("Entity.Tenant.SinrekiFilterMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("grp_cd")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GrpCd");

                    b.ToTable("sinreki_filter_mst");
                });

            modelBuilder.Entity("Entity.Tenant.SinrekiFilterMstDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<int>("GrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("grp_cd")
                        .HasColumnOrder(3);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsExclude")
                        .HasColumnType("integer")
                        .HasColumnName("is_exclude");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GrpCd", "Id");

                    b.ToTable("sinreki_filter_mst_detail");
                });

            modelBuilder.Entity("Entity.Tenant.SinrekiFilterMstKoui", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("grp_cd")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date")
                        .HasColumnOrder(6);

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id")
                        .HasColumnOrder(7);

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine")
                        .HasColumnOrder(8);

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted")
                        .HasColumnOrder(5);

                    b.Property<int>("KouiKbnId")
                        .HasColumnType("integer")
                        .HasColumnName("koui_kbn_id")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date")
                        .HasColumnOrder(9);

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id")
                        .HasColumnOrder(10);

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine")
                        .HasColumnOrder(11);

                    b.HasKey("HpId", "GrpCd", "SeqNo");

                    b.ToTable("sinreki_filter_mst_koui");
                });

            modelBuilder.Entity("Entity.Tenant.SmartKarteAppSignalRPort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("Ip")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("ip");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("MachineName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("machine_name");

                    b.Property<int>("PortNumber")
                        .HasColumnType("integer")
                        .HasColumnName("port_number");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.HasKey("Id");

                    b.ToTable("smartkarte_app_signalr_port");
                });

            modelBuilder.Entity("Entity.Tenant.SokatuMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("PrefNo")
                        .HasColumnType("integer")
                        .HasColumnName("pref_no")
                        .HasColumnOrder(2);

                    b.Property<int>("StartYm")
                        .HasColumnType("integer")
                        .HasColumnName("start_ym")
                        .HasColumnOrder(3);

                    b.Property<int>("ReportEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("report_eda_no")
                        .HasColumnOrder(5);

                    b.Property<int>("ReportId")
                        .HasColumnType("integer")
                        .HasColumnName("report_id")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("DataAll")
                        .HasColumnType("integer")
                        .HasColumnName("data_all");

                    b.Property<int>("DataDisk")
                        .HasColumnType("integer")
                        .HasColumnName("data_disk");

                    b.Property<int>("DataKbn")
                        .HasColumnType("integer")
                        .HasColumnName("data_kbn");

                    b.Property<int>("DataPaper")
                        .HasColumnType("integer")
                        .HasColumnName("data_paper");

                    b.Property<int>("DiskCnt")
                        .HasColumnType("integer")
                        .HasColumnName("disk_cnt");

                    b.Property<string>("DiskKind")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("disk_kind");

                    b.Property<int>("EndYm")
                        .HasColumnType("integer")
                        .HasColumnName("end_ym");

                    b.Property<int>("IsSort")
                        .HasColumnType("integer")
                        .HasColumnName("is_sort");

                    b.Property<int>("PrintNoType")
                        .HasColumnType("integer")
                        .HasColumnName("print_no_type");

                    b.Property<int>("PrintType")
                        .HasColumnType("integer")
                        .HasColumnName("print_type");

                    b.Property<string>("ReportName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("report_name");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PrefNo", "StartYm", "ReportEdaNo", "ReportId");

                    b.ToTable("sokatu_mst");
                });

            modelBuilder.Entity("Entity.Tenant.StaConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("MenuId")
                        .HasColumnType("integer")
                        .HasColumnName("menu_id")
                        .HasColumnOrder(2);

                    b.Property<int>("ConfId")
                        .HasColumnType("integer")
                        .HasColumnName("conf_id")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<string>("Val")
                        .HasMaxLength(1200)
                        .HasColumnType("character varying(1200)")
                        .HasColumnName("val");

                    b.HasKey("HpId", "MenuId", "ConfId");

                    b.ToTable("sta_conf");
                });

            modelBuilder.Entity("Entity.Tenant.StaCsv", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Columns")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("columns");

                    b.Property<string>("ConfName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("conf_name");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("DataSbt")
                        .HasColumnType("integer")
                        .HasColumnName("data_sbt");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("ReportId")
                        .HasColumnType("integer")
                        .HasColumnName("report_id");

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("row_no");

                    b.Property<int>("SortKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sort_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id");

                    b.ToTable("sta_csv");
                });

            modelBuilder.Entity("Entity.Tenant.StaGrp", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id")
                        .HasColumnOrder(2);

                    b.Property<int>("ReportId")
                        .HasColumnType("integer")
                        .HasColumnName("report_id")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "GrpId", "ReportId");

                    b.ToTable("sta_grp");
                });

            modelBuilder.Entity("Entity.Tenant.StaMenu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("menu_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MenuId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsPrint")
                        .HasColumnType("integer")
                        .HasColumnName("is_print");

                    b.Property<string>("MenuName")
                        .HasMaxLength(130)
                        .HasColumnType("character varying(130)")
                        .HasColumnName("menu_name");

                    b.Property<int>("ReportId")
                        .HasColumnType("integer")
                        .HasColumnName("report_id");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("MenuId");

                    b.ToTable("sta_menu");
                });

            modelBuilder.Entity("Entity.Tenant.StaMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("ReportId")
                        .HasColumnType("integer")
                        .HasColumnName("report_id")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("ReportName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("report_name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "ReportId");

                    b.ToTable("sta_mst");
                });

            modelBuilder.Entity("Entity.Tenant.SummaryInf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<byte[]>("Rtext")
                        .HasColumnType("bytea")
                        .HasColumnName("rtext");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("Id");

                    b.ToTable("summary_inf");
                });

            modelBuilder.Entity("Entity.Tenant.SyobyoKeika", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(3);

                    b.Property<int>("SinDay")
                        .HasColumnType("integer")
                        .HasColumnName("sin_day")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id")
                        .HasColumnOrder(5);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(6);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Keika")
                        .HasColumnType("text")
                        .HasColumnName("keika");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SinYm", "SinDay", "HokenId", "SeqNo");

                    b.ToTable("syobyo_keika");
                });

            modelBuilder.Entity("Entity.Tenant.SyoukiInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(3);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<string>("Syouki")
                        .HasColumnType("text")
                        .HasColumnName("syouki");

                    b.Property<int>("SyoukiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("syouki_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SinYm", "HokenId", "SeqNo");

                    b.ToTable("syouki_inf");
                });

            modelBuilder.Entity("Entity.Tenant.SyoukiKbnMst", b =>
                {
                    b.Property<int>("SyoukiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("syouki_kbn")
                        .HasColumnOrder(1);

                    b.Property<int>("StartYm")
                        .HasColumnType("integer")
                        .HasColumnName("start_ym")
                        .HasColumnOrder(2);

                    b.Property<int>("EndYm")
                        .HasColumnType("integer")
                        .HasColumnName("end_ym");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("SyoukiKbn", "StartYm");

                    b.ToTable("syouki_kbn_mst");
                });

            modelBuilder.Entity("Entity.Tenant.SystemChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("ErrMessage")
                        .HasColumnType("text")
                        .HasColumnName("err_message");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<int>("IsDb")
                        .HasColumnType("integer")
                        .HasColumnName("is_db");

                    b.Property<int>("IsDrugPhoto")
                        .HasColumnType("integer")
                        .HasColumnName("is_drug_photo");

                    b.Property<int>("IsMaster")
                        .HasColumnType("integer")
                        .HasColumnName("is_master");

                    b.Property<int>("IsNote")
                        .HasColumnType("integer")
                        .HasColumnName("is_note");

                    b.Property<int>("IsPg")
                        .HasColumnType("integer")
                        .HasColumnName("is_pg");

                    b.Property<int>("IsRun")
                        .HasColumnType("integer")
                        .HasColumnName("is_run");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<string>("Version")
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("system_change_log");
                });

            modelBuilder.Entity("Entity.Tenant.SystemConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("grp_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("GrpEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("grp_eda_no")
                        .HasColumnOrder(3);

                    b.Property<string>("Biko")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("biko");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("Param")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("param");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<double>("Val")
                        .HasColumnType("double precision")
                        .HasColumnName("val");

                    b.HasKey("HpId", "GrpCd", "GrpEdaNo");

                    b.ToTable("system_conf");
                });

            modelBuilder.Entity("Entity.Tenant.SystemConfItem", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("MenuId")
                        .HasColumnType("integer")
                        .HasColumnName("menu_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("ItemName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("item_name");

                    b.Property<int>("ParamMax")
                        .HasColumnType("integer")
                        .HasColumnName("param_max");

                    b.Property<int>("ParamMin")
                        .HasColumnType("integer")
                        .HasColumnName("param_min");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<int>("Val")
                        .HasColumnType("integer")
                        .HasColumnName("val");

                    b.HasKey("HpId", "MenuId", "SeqNo");

                    b.ToTable("system_conf_item");
                });

            modelBuilder.Entity("Entity.Tenant.SystemConfMenu", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("MenuId")
                        .HasColumnType("integer")
                        .HasColumnName("menu_id")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("GrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("grp_cd");

                    b.Property<int>("GrpEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("grp_eda_no");

                    b.Property<int>("IsParam")
                        .HasColumnType("integer")
                        .HasColumnName("is_param");

                    b.Property<int>("IsValue")
                        .HasColumnType("integer")
                        .HasColumnName("is_value");

                    b.Property<int>("IsVisible")
                        .HasColumnType("integer")
                        .HasColumnName("is_visible");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<int>("ManagerKbn")
                        .HasColumnType("integer")
                        .HasColumnName("manager_kbn");

                    b.Property<int>("MenuGrp")
                        .HasColumnType("integer")
                        .HasColumnName("menu_grp");

                    b.Property<string>("MenuName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("menu_name");

                    b.Property<string>("ParamHint")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("param_hint");

                    b.Property<int>("ParamMask")
                        .HasColumnType("integer")
                        .HasColumnName("param_mask");

                    b.Property<double>("ParamMax")
                        .HasColumnType("double precision")
                        .HasColumnName("param_max");

                    b.Property<int>("ParamMaxLength")
                        .HasColumnType("integer")
                        .HasColumnName("param_max_length");

                    b.Property<double>("ParamMin")
                        .HasColumnType("double precision")
                        .HasColumnName("param_min");

                    b.Property<int>("ParamType")
                        .HasColumnType("integer")
                        .HasColumnName("param_type");

                    b.Property<int>("PathGrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("path_grp_cd");

                    b.Property<int>("PrefNo")
                        .HasColumnType("integer")
                        .HasColumnName("pref_no");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<double>("ValMax")
                        .HasColumnType("double precision")
                        .HasColumnName("val_max");

                    b.Property<double>("ValMin")
                        .HasColumnType("double precision")
                        .HasColumnName("val_min");

                    b.HasKey("HpId", "MenuId");

                    b.ToTable("system_conf_menu");
                });

            modelBuilder.Entity("Entity.Tenant.SystemGenerationConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(2);

                    b.Property<int>("GrpEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("grp_eda_no")
                        .HasColumnOrder(4);

                    b.Property<int>("GrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("grp_cd")
                        .HasColumnOrder(3);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Biko")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("biko");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<string>("Param")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("param");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<int>("Val")
                        .HasColumnType("integer")
                        .HasColumnName("val");

                    b.HasKey("HpId", "GrpEdaNo", "GrpCd", "Id");

                    b.ToTable("system_generation_conf");
                });

            modelBuilder.Entity("Entity.Tenant.SyunoNyukin", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("AdjustFutan")
                        .HasColumnType("integer")
                        .HasColumnName("adjust_futan");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("NyukinCmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nyukin_cmt");

                    b.Property<int>("NyukinDate")
                        .HasColumnType("integer")
                        .HasColumnName("nyukin_date");

                    b.Property<int>("NyukinGaku")
                        .HasColumnType("integer")
                        .HasColumnName("nyukin_gaku");

                    b.Property<string>("NyukinjiDetail")
                        .HasColumnType("text")
                        .HasColumnName("nyukinji_detail");

                    b.Property<int>("NyukinjiSeikyu")
                        .HasColumnType("integer")
                        .HasColumnName("nyukinji_seikyu");

                    b.Property<int>("NyukinjiTensu")
                        .HasColumnType("integer")
                        .HasColumnName("nyukinji_tensu");

                    b.Property<int>("PaymentMethodCd")
                        .HasColumnType("integer")
                        .HasColumnName("payment_method_cd");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("UketukeSbt")
                        .HasColumnType("integer")
                        .HasColumnName("uketuke_sbt");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "RaiinNo", "SeqNo");

                    b.ToTable("syuno_nyukin");
                });

            modelBuilder.Entity("Entity.Tenant.SyunoSeikyu", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(4);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date")
                        .HasColumnOrder(3);

                    b.Property<int>("AdjustFutan")
                        .HasColumnType("integer")
                        .HasColumnName("adjust_futan");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("NewAdjustFutan")
                        .HasColumnType("integer")
                        .HasColumnName("new_adjust_futan");

                    b.Property<string>("NewSeikyuDetail")
                        .HasColumnType("text")
                        .HasColumnName("new_seikyu_detail");

                    b.Property<int>("NewSeikyuGaku")
                        .HasColumnType("integer")
                        .HasColumnName("new_seikyu_gaku");

                    b.Property<int>("NewSeikyuTensu")
                        .HasColumnType("integer")
                        .HasColumnName("new_seikyu_tensu");

                    b.Property<int>("NyukinKbn")
                        .HasColumnType("integer")
                        .HasColumnName("nyukin_kbn");

                    b.Property<string>("SeikyuDetail")
                        .HasColumnType("text")
                        .HasColumnName("seikyu_detail");

                    b.Property<int>("SeikyuGaku")
                        .HasColumnType("integer")
                        .HasColumnName("seikyu_gaku");

                    b.Property<int>("SeikyuTensu")
                        .HasColumnType("integer")
                        .HasColumnName("seikyu_tensu");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "RaiinNo", "PtId", "SinDate");

                    b.ToTable("syuno_seikyu");
                });

            modelBuilder.Entity("Entity.Tenant.TagGrpMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("TagGrpNo")
                        .HasColumnType("integer")
                        .HasColumnName("tag_grp_no")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("GrpColor")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("grp_color");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<string>("TagGrpName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tag_grp_name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "TagGrpNo");

                    b.ToTable("tag_grp_mst");
                });

            modelBuilder.Entity("Entity.Tenant.TekiouByomeiMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(2);

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("byomei_cd")
                        .HasColumnOrder(3);

                    b.Property<int>("SystemData")
                        .HasColumnType("integer")
                        .HasColumnName("system_data")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EditKbn")
                        .HasColumnType("integer")
                        .HasColumnName("edit_kbn");

                    b.Property<int>("EndYM")
                        .HasColumnType("integer")
                        .HasColumnName("end_ym");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("is_invalid");

                    b.Property<int>("IsInvalidTokusyo")
                        .HasColumnType("integer")
                        .HasColumnName("is_invalid_tokusyo");

                    b.Property<int>("StartYM")
                        .HasColumnType("integer")
                        .HasColumnName("start_ym");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "ItemCd", "ByomeiCd", "SystemData");

                    b.ToTable("tekiou_byomei_mst");
                });

            modelBuilder.Entity("Entity.Tenant.TekiouByomeiMstExcluded", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "ItemCd", "SeqNo");

                    b.ToTable("tekiou_byomei_mst_excluded");
                });

            modelBuilder.Entity("Entity.Tenant.TemplateDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("TemplateCd")
                        .HasColumnType("integer")
                        .HasColumnName("template_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("ControlId")
                        .HasColumnType("integer")
                        .HasColumnName("control_id")
                        .HasColumnOrder(4);

                    b.Property<string>("BackgroundColor")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("background_color");

                    b.Property<int>("ColCount")
                        .HasColumnType("integer")
                        .HasColumnName("col_count");

                    b.Property<int>("ControlType")
                        .HasColumnType("integer")
                        .HasColumnName("control_type");

                    b.Property<int>("ControlWidth")
                        .HasColumnType("integer")
                        .HasColumnName("control_width");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("Decimal")
                        .HasColumnType("integer")
                        .HasColumnName("decimal");

                    b.Property<string>("DefaultVal")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("default_val");

                    b.Property<int>("FontBold")
                        .HasColumnType("integer")
                        .HasColumnName("font_bold");

                    b.Property<string>("FontColor")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("font_color");

                    b.Property<int>("FontItalic")
                        .HasColumnType("integer")
                        .HasColumnName("font_italic");

                    b.Property<int>("FontUnderLine")
                        .HasColumnType("integer")
                        .HasColumnName("font_under_line");

                    b.Property<string>("Formula")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("formula");

                    b.Property<int>("Ime")
                        .HasColumnType("integer")
                        .HasColumnName("ime");

                    b.Property<int>("KarteKbn")
                        .HasColumnType("integer")
                        .HasColumnName("karte_kbn");

                    b.Property<int>("LeftMargin")
                        .HasColumnType("integer")
                        .HasColumnName("left_margin");

                    b.Property<int>("MenuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("menu_kbn");

                    b.Property<int>("NewLine")
                        .HasColumnType("integer")
                        .HasColumnName("new_line");

                    b.Property<int?>("OyaControlId")
                        .HasColumnType("integer")
                        .HasColumnName("oya_control_id");

                    b.Property<string>("RenkeiCd")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("renkei_cd");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<int>("TitleWidth")
                        .HasColumnType("integer")
                        .HasColumnName("title_width");

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unit");

                    b.Property<int>("UnitWidth")
                        .HasColumnType("integer")
                        .HasColumnName("unit_width");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<double?>("Val")
                        .HasColumnType("double precision")
                        .HasColumnName("val");

                    b.Property<int>("Wordwrap")
                        .HasColumnType("integer")
                        .HasColumnName("wordwrap");

                    b.HasKey("HpId", "TemplateCd", "SeqNo", "ControlId");

                    b.ToTable("template_detail");
                });

            modelBuilder.Entity("Entity.Tenant.TemplateDspConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("TemplateCd")
                        .HasColumnType("integer")
                        .HasColumnName("template_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("DspKbn")
                        .HasColumnType("integer")
                        .HasColumnName("dsp_kbn")
                        .HasColumnOrder(4);

                    b.Property<int>("IsDsp")
                        .HasColumnType("integer")
                        .HasColumnName("is_dsp");

                    b.HasKey("HpId", "TemplateCd", "SeqNo", "DspKbn");

                    b.ToTable("template_dsp_conf");
                });

            modelBuilder.Entity("Entity.Tenant.TemplateMenuDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("MenuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("menu_kbn")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("ItemName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("item_name");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<double?>("Val")
                        .HasColumnType("double precision")
                        .HasColumnName("val");

                    b.HasKey("HpId", "MenuKbn", "SeqNo");

                    b.ToTable("template_menu_detail");
                });

            modelBuilder.Entity("Entity.Tenant.TemplateMenuMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("MenuKbn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("menu_kbn")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MenuKbn"));

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("KbnName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("kbn_name");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "MenuKbn", "SeqNo");

                    b.ToTable("template_menu_mst");
                });

            modelBuilder.Entity("Entity.Tenant.TemplateMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("TemplateCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("template_cd")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TemplateCd"));

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("InsertionDestination")
                        .HasColumnType("integer")
                        .HasColumnName("insertion_destination");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<string>("Title")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "TemplateCd", "SeqNo");

                    b.ToTable("template_mst");
                });

            modelBuilder.Entity("Entity.Tenant.TenMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(3);

                    b.Property<int>("AgeCheck")
                        .HasColumnType("integer")
                        .HasColumnName("age_check");

                    b.Property<string>("AgekasanCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("agekasan_cd1");

                    b.Property<string>("AgekasanCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("agekasan_cd2");

                    b.Property<string>("AgekasanCd3")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("agekasan_cd3");

                    b.Property<string>("AgekasanCd4")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("agekasan_cd4");

                    b.Property<string>("AgekasanMax1")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("agekasan_max1");

                    b.Property<string>("AgekasanMax2")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("agekasan_max2");

                    b.Property<string>("AgekasanMax3")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("agekasan_max3");

                    b.Property<string>("AgekasanMax4")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("agekasan_max4");

                    b.Property<string>("AgekasanMin1")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("agekasan_min1");

                    b.Property<string>("AgekasanMin2")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("agekasan_min2");

                    b.Property<string>("AgekasanMin3")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("agekasan_min3");

                    b.Property<string>("AgekasanMin4")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("agekasan_min4");

                    b.Property<int>("AutoFungoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("auto_fungo_kbn");

                    b.Property<int>("AutoHougouKbn")
                        .HasColumnType("integer")
                        .HasColumnName("auto_hougou_kbn");

                    b.Property<int>("BuiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("bui_kbn");

                    b.Property<int>("ByomeiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("byomei_kbn");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<int>("CdBu")
                        .HasColumnType("integer")
                        .HasColumnName("cd_bu");

                    b.Property<int>("CdEdano")
                        .HasColumnType("integer")
                        .HasColumnName("cd_edano");

                    b.Property<string>("CdKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("cd_kbn");

                    b.Property<int>("CdKbnno")
                        .HasColumnType("integer")
                        .HasColumnName("cd_kbnno");

                    b.Property<int>("CdKouno")
                        .HasColumnType("integer")
                        .HasColumnName("cd_kouno");

                    b.Property<int>("CdSyo")
                        .HasColumnType("integer")
                        .HasColumnName("cd_syo");

                    b.Property<int>("ChusyaDrugSbt")
                        .HasColumnType("integer")
                        .HasColumnName("chusya_drug_sbt");

                    b.Property<int>("CmtCol1")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_col1");

                    b.Property<int>("CmtCol2")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_col2");

                    b.Property<int>("CmtCol3")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_col3");

                    b.Property<int>("CmtCol4")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_col4");

                    b.Property<int>("CmtColKeta1")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_col_keta1");

                    b.Property<int>("CmtColKeta2")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_col_keta2");

                    b.Property<int>("CmtColKeta3")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_col_keta3");

                    b.Property<int>("CmtColKeta4")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_col_keta4");

                    b.Property<int>("CmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_kbn");

                    b.Property<int>("CmtSbt")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_sbt");

                    b.Property<double>("CnvTermVal")
                        .HasColumnType("double precision")
                        .HasColumnName("cnv_term_val");

                    b.Property<string>("CnvUnitName")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("cnv_unit_name");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("DayCount")
                        .HasColumnType("integer")
                        .HasColumnName("day_count");

                    b.Property<double>("DefaultVal")
                        .HasColumnType("double precision")
                        .HasColumnName("default_val");

                    b.Property<int>("DelDate")
                        .HasColumnType("integer")
                        .HasColumnName("del_date");

                    b.Property<int>("DrugKanrenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("drug_kanren_kbn");

                    b.Property<int>("DrugKbn")
                        .HasColumnType("integer")
                        .HasColumnName("drug_kbn");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("FukubikuKotunanKasan")
                        .HasColumnType("integer")
                        .HasColumnName("fukubiku_kotunan_kasan");

                    b.Property<int>("FukubikuNaisiKasan")
                        .HasColumnType("integer")
                        .HasColumnName("fukubiku_naisi_kasan");

                    b.Property<int>("FukuyoDaytime")
                        .HasColumnType("integer")
                        .HasColumnName("fukuyo_daytime");

                    b.Property<int>("FukuyoMorning")
                        .HasColumnType("integer")
                        .HasColumnName("fukuyo_morning");

                    b.Property<int>("FukuyoNight")
                        .HasColumnType("integer")
                        .HasColumnName("fukuyo_night");

                    b.Property<int>("FukuyoRise")
                        .HasColumnType("integer")
                        .HasColumnName("fukuyo_rise");

                    b.Property<int>("FukuyoSleep")
                        .HasColumnType("integer")
                        .HasColumnName("fukuyo_sleep");

                    b.Property<int>("FutekiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("futeki_kbn");

                    b.Property<int>("FutekiSisetuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("futeki_sisetu_kbn");

                    b.Property<int>("GairaiKanriKbn")
                        .HasColumnType("integer")
                        .HasColumnName("gairai_kanri_kbn");

                    b.Property<int>("GairaiKansen")
                        .HasColumnType("integer")
                        .HasColumnName("gairai_kansen");

                    b.Property<int>("GazoKasan")
                        .HasColumnType("integer")
                        .HasColumnName("gazo_kasan");

                    b.Property<int>("HandanGrpKbn")
                        .HasColumnType("integer")
                        .HasColumnName("handan_grp_kbn");

                    b.Property<int>("HandanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("handan_kbn");

                    b.Property<int>("HokatuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("hokatu_kbn");

                    b.Property<int>("HokatuKensa")
                        .HasColumnType("integer")
                        .HasColumnName("hokatu_kensa");

                    b.Property<int>("Igakukanri")
                        .HasColumnType("integer")
                        .HasColumnName("igakukanri");

                    b.Property<string>("IpnNameCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("ipn_name_cd");

                    b.Property<int>("IsAdopted")
                        .HasColumnType("integer")
                        .HasColumnName("is_adopted");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsNodspKarte")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_karte");

                    b.Property<int>("IsNodspPaperRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_paper_rece");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_rece");

                    b.Property<int>("IsNodspRyosyu")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_ryosyu");

                    b.Property<int>("IsNodspYakutai")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_yakutai");

                    b.Property<int>("IsNosearch")
                        .HasColumnType("integer")
                        .HasColumnName("is_nosearch");

                    b.Property<int>("JibiAgeKasan")
                        .HasColumnType("integer")
                        .HasColumnName("jibi_age_kasan");

                    b.Property<int>("JibiSyonikokin")
                        .HasColumnType("integer")
                        .HasColumnName("jibi_syonikokin");

                    b.Property<int>("JihiSbt")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_sbt");

                    b.Property<int>("Jituday")
                        .HasColumnType("integer")
                        .HasColumnName("jituday");

                    b.Property<int>("JitudayCount")
                        .HasColumnType("integer")
                        .HasColumnName("jituday_count");

                    b.Property<string>("KanaName1")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("kana_name1");

                    b.Property<string>("KanaName2")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("kana_name2");

                    b.Property<string>("KanaName3")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("kana_name3");

                    b.Property<string>("KanaName4")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("kana_name4");

                    b.Property<string>("KanaName5")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("kana_name5");

                    b.Property<string>("KanaName6")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("kana_name6");

                    b.Property<string>("KanaName7")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("kana_name7");

                    b.Property<int>("KansatuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kansatu_kbn");

                    b.Property<int>("KazeiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kazei_kbn");

                    b.Property<int>("KeibuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("keibu_kbn");

                    b.Property<int>("KeikaDate")
                        .HasColumnType("integer")
                        .HasColumnName("keika_date");

                    b.Property<int>("KensaCmt")
                        .HasColumnType("integer")
                        .HasColumnName("kensa_cmt");

                    b.Property<int>("KensaFukusuSantei")
                        .HasColumnType("integer")
                        .HasColumnName("kensa_fukusu_santei");

                    b.Property<string>("KensaItemCd")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("kensa_item_cd");

                    b.Property<int>("KensaItemSeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("kensa_item_seq_no");

                    b.Property<int>("KensaLabel")
                        .HasColumnType("integer")
                        .HasColumnName("kensa_label");

                    b.Property<int>("KizamiErr")
                        .HasColumnType("integer")
                        .HasColumnName("kizami_err");

                    b.Property<int>("KizamiId")
                        .HasColumnType("integer")
                        .HasColumnName("kizami_id");

                    b.Property<int>("KizamiMax")
                        .HasColumnType("integer")
                        .HasColumnName("kizami_max");

                    b.Property<int>("KizamiMin")
                        .HasColumnType("integer")
                        .HasColumnName("kizami_min");

                    b.Property<double>("KizamiTen")
                        .HasColumnType("double precision")
                        .HasColumnName("kizami_ten");

                    b.Property<int>("KizamiVal")
                        .HasColumnType("integer")
                        .HasColumnName("kizami_val");

                    b.Property<int>("KohatuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kohatu_kbn");

                    b.Property<int>("KohyoJun")
                        .HasColumnType("integer")
                        .HasColumnName("kohyo_jun");

                    b.Property<string>("Kokuji1")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("kokuji1");

                    b.Property<string>("Kokuji2")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("kokuji2");

                    b.Property<int>("KokujiBetuno")
                        .HasColumnType("integer")
                        .HasColumnName("kokuji_betuno");

                    b.Property<int>("KokujiBu")
                        .HasColumnType("integer")
                        .HasColumnName("kokuji_bu");

                    b.Property<int>("KokujiEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("kokuji_eda_no");

                    b.Property<string>("KokujiKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("kokuji_kbn");

                    b.Property<int>("KokujiKbnNo")
                        .HasColumnType("integer")
                        .HasColumnName("kokuji_kbn_no");

                    b.Property<int>("KokujiKbnno")
                        .HasColumnType("integer")
                        .HasColumnName("kokuji_kbnno");

                    b.Property<int>("KokujiKouNo")
                        .HasColumnType("integer")
                        .HasColumnName("kokuji_kou_no");

                    b.Property<int>("KokujiSyo")
                        .HasColumnType("integer")
                        .HasColumnName("kokuji_syo");

                    b.Property<int>("KoukiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kouki_kbn");

                    b.Property<int>("KouseisinKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kouseisin_kbn");

                    b.Property<int>("LowWeightKbn")
                        .HasColumnType("integer")
                        .HasColumnName("low_weight_kbn");

                    b.Property<int>("MadokuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("madoku_kbn");

                    b.Property<string>("MasterSbt")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("master_sbt");

                    b.Property<int>("MasuiKasan")
                        .HasColumnType("integer")
                        .HasColumnName("masui_kasan");

                    b.Property<int>("MasuiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("masui_kbn");

                    b.Property<string>("MaxAge")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("max_age");

                    b.Property<int>("MaxCount")
                        .HasColumnType("integer")
                        .HasColumnName("max_count");

                    b.Property<int>("MaxCountErr")
                        .HasColumnType("integer")
                        .HasColumnName("max_count_err");

                    b.Property<int>("MaxPrice")
                        .HasColumnType("integer")
                        .HasColumnName("max_price");

                    b.Property<int>("MaxTen")
                        .HasColumnType("integer")
                        .HasColumnName("max_ten");

                    b.Property<string>("MinAge")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("min_age");

                    b.Property<int>("MoniterKasan")
                        .HasColumnType("integer")
                        .HasColumnName("moniter_kasan");

                    b.Property<string>("Name")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("name");

                    b.Property<double>("OdrTermVal")
                        .HasColumnType("double precision")
                        .HasColumnName("odr_term_val");

                    b.Property<string>("OdrUnitName")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("odr_unit_name");

                    b.Property<string>("ReceName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("rece_name");

                    b.Property<string>("ReceUnitCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("rece_unit_cd");

                    b.Property<string>("ReceUnitName")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("rece_unit_name");

                    b.Property<string>("RenkeiCd1")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("renkei_cd1");

                    b.Property<string>("RenkeiCd2")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("renkei_cd2");

                    b.Property<int>("RousaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("rousai_kbn");

                    b.Property<string>("RyosyuName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("ryosyu_name");

                    b.Property<int>("SaiketuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("saiketu_kbn");

                    b.Property<int>("SansoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sanso_kbn");

                    b.Property<string>("SanteiItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("santei_item_cd");

                    b.Property<int>("SanteigaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("santeigai_kbn");

                    b.Property<int>("SeibutuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("seibutu_kbn");

                    b.Property<int>("SekituiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sekitui_kbn");

                    b.Property<int>("SelectCmtId")
                        .HasColumnType("integer")
                        .HasColumnName("select_cmt_id");

                    b.Property<int>("ShortstayOpe")
                        .HasColumnType("integer")
                        .HasColumnName("shortstay_ope");

                    b.Property<int>("ShotCnt")
                        .HasColumnType("integer")
                        .HasColumnName("shot_cnt");

                    b.Property<int>("SinKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sin_koui_kbn");

                    b.Property<int>("SinkeiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sinkei_kbn");

                    b.Property<int>("Sisetucd1")
                        .HasColumnType("integer")
                        .HasColumnName("sisetucd1");

                    b.Property<int>("Sisetucd10")
                        .HasColumnType("integer")
                        .HasColumnName("sisetucd10");

                    b.Property<int>("Sisetucd2")
                        .HasColumnType("integer")
                        .HasColumnName("sisetucd2");

                    b.Property<int>("Sisetucd3")
                        .HasColumnType("integer")
                        .HasColumnName("sisetucd3");

                    b.Property<int>("Sisetucd4")
                        .HasColumnType("integer")
                        .HasColumnName("sisetucd4");

                    b.Property<int>("Sisetucd5")
                        .HasColumnType("integer")
                        .HasColumnName("sisetucd5");

                    b.Property<int>("Sisetucd6")
                        .HasColumnType("integer")
                        .HasColumnName("sisetucd6");

                    b.Property<int>("Sisetucd7")
                        .HasColumnType("integer")
                        .HasColumnName("sisetucd7");

                    b.Property<int>("Sisetucd8")
                        .HasColumnType("integer")
                        .HasColumnName("sisetucd8");

                    b.Property<int>("Sisetucd9")
                        .HasColumnType("integer")
                        .HasColumnName("sisetucd9");

                    b.Property<int>("SisiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sisi_kbn");

                    b.Property<int>("SuryoRoundupKbn")
                        .HasColumnType("integer")
                        .HasColumnName("suryo_roundup_kbn");

                    b.Property<string>("SyohinKanren")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("syohin_kanren");

                    b.Property<int>("SyotiNyuyojiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("syoti_nyuyoji_kbn");

                    b.Property<string>("SyukeiSaki")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("syukei_saki");

                    b.Property<int>("SyusaiSbt")
                        .HasColumnType("integer")
                        .HasColumnName("syusai_sbt");

                    b.Property<int>("TeigenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("teigen_kbn");

                    b.Property<double>("Ten")
                        .HasColumnType("double precision")
                        .HasColumnName("ten");

                    b.Property<int>("TenId")
                        .HasColumnType("integer")
                        .HasColumnName("ten_id");

                    b.Property<string>("TenKbnNo")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("ten_kbn_no");

                    b.Property<int>("TimeKasanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("time_kasan_kbn");

                    b.Property<int>("ToketuKasan")
                        .HasColumnType("integer")
                        .HasColumnName("toketu_kasan");

                    b.Property<int>("TokuzaiAgeKbn")
                        .HasColumnType("integer")
                        .HasColumnName("tokuzai_age_kbn");

                    b.Property<int>("TokuzaiSbt")
                        .HasColumnType("integer")
                        .HasColumnName("tokuzai_sbt");

                    b.Property<int>("TusokuAge")
                        .HasColumnType("integer")
                        .HasColumnName("tusoku_age");

                    b.Property<int>("TusokuTargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("tusoku_target_kbn");

                    b.Property<int>("TyoonpaGyokoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("tyoonpa_gyoko_kbn");

                    b.Property<int>("TyoonpaNaisiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("tyoonpa_naisi_kbn");

                    b.Property<string>("TyuCd")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("tyu_cd");

                    b.Property<string>("TyuSeq")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("tyu_seq");

                    b.Property<int>("UpdDate")
                        .HasColumnType("integer")
                        .HasColumnName("upd_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<string>("YakkaCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("yakka_cd");

                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("yj_cd");

                    b.Property<string>("YohoCd")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("yoho_cd");

                    b.Property<int>("YohoHosokuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("yoho_hosoku_kbn");

                    b.Property<int>("YohoHosokuRec")
                        .HasColumnType("integer")
                        .HasColumnName("yoho_hosoku_rec");

                    b.Property<int>("YohoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("yoho_kbn");

                    b.Property<int>("ZaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("zai_kbn");

                    b.Property<double>("ZaikeiPoint")
                        .HasColumnType("double precision")
                        .HasColumnName("zaikei_point");

                    b.Property<int>("ZoueiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("zouei_kbn");

                    b.HasKey("HpId", "ItemCd", "StartDate");

                    b.HasIndex(new[] { "HpId", "ItemCd", "StartDate", "EndDate", "Name", "KanaName1", "KanaName2", "KanaName3", "KanaName4", "KanaName5", "KanaName6", "KanaName7", "IsDeleted", "IsAdopted" }, "ten_mst_idx08");

                    b.ToTable("ten_mst");
                });

            modelBuilder.Entity("Entity.Tenant.TenMstMother", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(3);

                    b.Property<int>("AgeCheck")
                        .HasColumnType("integer")
                        .HasColumnName("age_check");

                    b.Property<string>("AgekasanCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("agekasan_cd1");

                    b.Property<string>("AgekasanCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("agekasan_cd2");

                    b.Property<string>("AgekasanCd3")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("agekasan_cd3");

                    b.Property<string>("AgekasanCd4")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("agekasan_cd4");

                    b.Property<string>("AgekasanMax1")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("agekasan_max1");

                    b.Property<string>("AgekasanMax2")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("agekasan_max2");

                    b.Property<string>("AgekasanMax3")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("agekasan_max3");

                    b.Property<string>("AgekasanMax4")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("agekasan_max4");

                    b.Property<string>("AgekasanMin1")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("agekasan_min1");

                    b.Property<string>("AgekasanMin2")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("agekasan_min2");

                    b.Property<string>("AgekasanMin3")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("agekasan_min3");

                    b.Property<string>("AgekasanMin4")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("agekasan_min4");

                    b.Property<int>("AutoFungoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("auto_fungo_kbn");

                    b.Property<int>("AutoHougouKbn")
                        .HasColumnType("integer")
                        .HasColumnName("auto_hougou_kbn");

                    b.Property<int>("BuiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("bui_kbn");

                    b.Property<int>("ByomeiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("byomei_kbn");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<int>("CdBu")
                        .HasColumnType("integer")
                        .HasColumnName("cd_bu");

                    b.Property<int>("CdEdano")
                        .HasColumnType("integer")
                        .HasColumnName("cd_edano");

                    b.Property<string>("CdKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("cd_kbn");

                    b.Property<int>("CdKbnno")
                        .HasColumnType("integer")
                        .HasColumnName("cd_kbnno");

                    b.Property<int>("CdKouno")
                        .HasColumnType("integer")
                        .HasColumnName("cd_kouno");

                    b.Property<int>("CdSyo")
                        .HasColumnType("integer")
                        .HasColumnName("cd_syo");

                    b.Property<int>("ChusyaDrugSbt")
                        .HasColumnType("integer")
                        .HasColumnName("chusya_drug_sbt");

                    b.Property<int>("CmtCol1")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_col1");

                    b.Property<int>("CmtCol2")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_col2");

                    b.Property<int>("CmtCol3")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_col3");

                    b.Property<int>("CmtCol4")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_col4");

                    b.Property<int>("CmtColKeta1")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_col_keta1");

                    b.Property<int>("CmtColKeta2")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_col_keta2");

                    b.Property<int>("CmtColKeta3")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_col_keta3");

                    b.Property<int>("CmtColKeta4")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_col_keta4");

                    b.Property<int>("CmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_kbn");

                    b.Property<double>("CnvTermVal")
                        .HasColumnType("double precision")
                        .HasColumnName("cnv_term_val");

                    b.Property<string>("CnvUnitName")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("cnv_unit_name");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("DayCount")
                        .HasColumnType("integer")
                        .HasColumnName("day_count");

                    b.Property<double>("DefaultVal")
                        .HasColumnType("double precision")
                        .HasColumnName("default_val");

                    b.Property<int>("DelDate")
                        .HasColumnType("integer")
                        .HasColumnName("del_date");

                    b.Property<int>("DrugKanrenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("drug_kanren_kbn");

                    b.Property<int>("DrugKbn")
                        .HasColumnType("integer")
                        .HasColumnName("drug_kbn");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("FukubikuKotunanKasan")
                        .HasColumnType("integer")
                        .HasColumnName("fukubiku_kotunan_kasan");

                    b.Property<int>("FukubikuNaisiKasan")
                        .HasColumnType("integer")
                        .HasColumnName("fukubiku_naisi_kasan");

                    b.Property<int>("FukuyoDaytime")
                        .HasColumnType("integer")
                        .HasColumnName("fukuyo_daytime");

                    b.Property<int>("FukuyoMorning")
                        .HasColumnType("integer")
                        .HasColumnName("fukuyo_morning");

                    b.Property<int>("FukuyoNight")
                        .HasColumnType("integer")
                        .HasColumnName("fukuyo_night");

                    b.Property<int>("FukuyoRise")
                        .HasColumnType("integer")
                        .HasColumnName("fukuyo_rise");

                    b.Property<int>("FukuyoSleep")
                        .HasColumnType("integer")
                        .HasColumnName("fukuyo_sleep");

                    b.Property<int>("FutekiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("futeki_kbn");

                    b.Property<int>("FutekiSisetuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("futeki_sisetu_kbn");

                    b.Property<int>("GairaiKanriKbn")
                        .HasColumnType("integer")
                        .HasColumnName("gairai_kanri_kbn");

                    b.Property<int>("GazoKasan")
                        .HasColumnType("integer")
                        .HasColumnName("gazo_kasan");

                    b.Property<int>("HandanGrpKbn")
                        .HasColumnType("integer")
                        .HasColumnName("handan_grp_kbn");

                    b.Property<int>("HandanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("handan_kbn");

                    b.Property<int>("HokatuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("hokatu_kbn");

                    b.Property<int>("HokatuKensa")
                        .HasColumnType("integer")
                        .HasColumnName("hokatu_kensa");

                    b.Property<int>("Igakukanri")
                        .HasColumnType("integer")
                        .HasColumnName("igakukanri");

                    b.Property<string>("IpnNameCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("ipn_name_cd");

                    b.Property<int>("IsAdopted")
                        .HasColumnType("integer")
                        .HasColumnName("is_adopted");

                    b.Property<int>("IsNodspKarte")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_karte");

                    b.Property<int>("IsNodspPaperRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_paper_rece");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_rece");

                    b.Property<int>("IsNodspRyosyu")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_ryosyu");

                    b.Property<int>("IsNosearch")
                        .HasColumnType("integer")
                        .HasColumnName("is_nosearch");

                    b.Property<int>("JihiSbt")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_sbt");

                    b.Property<int>("Jituday")
                        .HasColumnType("integer")
                        .HasColumnName("jituday");

                    b.Property<int>("JitudayCount")
                        .HasColumnType("integer")
                        .HasColumnName("jituday_count");

                    b.Property<string>("KanaName1")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("kana_name1");

                    b.Property<string>("KanaName2")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("kana_name2");

                    b.Property<string>("KanaName3")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("kana_name3");

                    b.Property<string>("KanaName4")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("kana_name4");

                    b.Property<string>("KanaName5")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("kana_name5");

                    b.Property<string>("KanaName6")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("kana_name6");

                    b.Property<string>("KanaName7")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("kana_name7");

                    b.Property<int>("KansatuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kansatu_kbn");

                    b.Property<int>("KazeiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kazei_kbn");

                    b.Property<int>("KeibuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("keibu_kbn");

                    b.Property<int>("KeikaDate")
                        .HasColumnType("integer")
                        .HasColumnName("keika_date");

                    b.Property<int>("KensaCmt")
                        .HasColumnType("integer")
                        .HasColumnName("kensa_cmt");

                    b.Property<int>("KensaFukusuSantei")
                        .HasColumnType("integer")
                        .HasColumnName("kensa_fukusu_santei");

                    b.Property<string>("KensaItemCd")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("kensa_item_cd");

                    b.Property<int>("KensaItemSeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("kensa_item_seq_no");

                    b.Property<int>("KizamiErr")
                        .HasColumnType("integer")
                        .HasColumnName("kizami_err");

                    b.Property<int>("KizamiId")
                        .HasColumnType("integer")
                        .HasColumnName("kizami_id");

                    b.Property<int>("KizamiMax")
                        .HasColumnType("integer")
                        .HasColumnName("kizami_max");

                    b.Property<int>("KizamiMin")
                        .HasColumnType("integer")
                        .HasColumnName("kizami_min");

                    b.Property<double>("KizamiTen")
                        .HasColumnType("double precision")
                        .HasColumnName("kizami_ten");

                    b.Property<int>("KizamiVal")
                        .HasColumnType("integer")
                        .HasColumnName("kizami_val");

                    b.Property<int>("KohatuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kohatu_kbn");

                    b.Property<int>("KohyoJun")
                        .HasColumnType("integer")
                        .HasColumnName("kohyo_jun");

                    b.Property<string>("Kokuji1")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("kokuji1");

                    b.Property<string>("Kokuji2")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("kokuji2");

                    b.Property<int>("KokujiBu")
                        .HasColumnType("integer")
                        .HasColumnName("kokuji_bu");

                    b.Property<int>("KokujiEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("kokuji_eda_no");

                    b.Property<string>("KokujiKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("kokuji_kbn");

                    b.Property<int>("KokujiKbnNo")
                        .HasColumnType("integer")
                        .HasColumnName("kokuji_kbn_no");

                    b.Property<int>("KokujiKouNo")
                        .HasColumnType("integer")
                        .HasColumnName("kokuji_kou_no");

                    b.Property<int>("KokujiSyo")
                        .HasColumnType("integer")
                        .HasColumnName("kokuji_syo");

                    b.Property<int>("KoukiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kouki_kbn");

                    b.Property<int>("KouseisinKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kouseisin_kbn");

                    b.Property<int>("LowWeightKbn")
                        .HasColumnType("integer")
                        .HasColumnName("low_weight_kbn");

                    b.Property<int>("MadokuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("madoku_kbn");

                    b.Property<string>("MasterSbt")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("master_sbt");

                    b.Property<int>("MasuiKasan")
                        .HasColumnType("integer")
                        .HasColumnName("masui_kasan");

                    b.Property<int>("MasuiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("masui_kbn");

                    b.Property<string>("MaxAge")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("max_age");

                    b.Property<int>("MaxCount")
                        .HasColumnType("integer")
                        .HasColumnName("max_count");

                    b.Property<int>("MaxCountErr")
                        .HasColumnType("integer")
                        .HasColumnName("max_count_err");

                    b.Property<int>("MaxPrice")
                        .HasColumnType("integer")
                        .HasColumnName("max_price");

                    b.Property<int>("MaxTen")
                        .HasColumnType("integer")
                        .HasColumnName("max_ten");

                    b.Property<string>("MinAge")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("min_age");

                    b.Property<int>("MoniterKasan")
                        .HasColumnType("integer")
                        .HasColumnName("moniter_kasan");

                    b.Property<string>("Name")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("name");

                    b.Property<double>("OdrTermVal")
                        .HasColumnType("double precision")
                        .HasColumnName("odr_term_val");

                    b.Property<string>("OdrUnitName")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("odr_unit_name");

                    b.Property<string>("ReceName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("rece_name");

                    b.Property<string>("ReceUnitCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("rece_unit_cd");

                    b.Property<string>("ReceUnitName")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("rece_unit_name");

                    b.Property<string>("RenkeiCd1")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("renkei_cd1");

                    b.Property<string>("RenkeiCd2")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("renkei_cd2");

                    b.Property<int>("RousaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("rousai_kbn");

                    b.Property<string>("RyosyuName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("ryosyu_name");

                    b.Property<int>("SaiketuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("saiketu_kbn");

                    b.Property<int>("SansoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sanso_kbn");

                    b.Property<string>("SanteiItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("santei_item_cd");

                    b.Property<int>("SanteigaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("santeigai_kbn");

                    b.Property<int>("SeibutuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("seibutu_kbn");

                    b.Property<int>("SekituiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sekitui_kbn");

                    b.Property<int>("SelectCmtId")
                        .HasColumnType("integer")
                        .HasColumnName("select_cmt_id");

                    b.Property<int>("ShortstayOpe")
                        .HasColumnType("integer")
                        .HasColumnName("shortstay_ope");

                    b.Property<int>("ShotCnt")
                        .HasColumnType("integer")
                        .HasColumnName("shot_cnt");

                    b.Property<int>("SinKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sin_koui_kbn");

                    b.Property<int>("SinkeiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sinkei_kbn");

                    b.Property<int>("Sisetucd1")
                        .HasColumnType("integer")
                        .HasColumnName("sisetucd1");

                    b.Property<int>("Sisetucd10")
                        .HasColumnType("integer")
                        .HasColumnName("sisetucd10");

                    b.Property<int>("Sisetucd2")
                        .HasColumnType("integer")
                        .HasColumnName("sisetucd2");

                    b.Property<int>("Sisetucd3")
                        .HasColumnType("integer")
                        .HasColumnName("sisetucd3");

                    b.Property<int>("Sisetucd4")
                        .HasColumnType("integer")
                        .HasColumnName("sisetucd4");

                    b.Property<int>("Sisetucd5")
                        .HasColumnType("integer")
                        .HasColumnName("sisetucd5");

                    b.Property<int>("Sisetucd6")
                        .HasColumnType("integer")
                        .HasColumnName("sisetucd6");

                    b.Property<int>("Sisetucd7")
                        .HasColumnType("integer")
                        .HasColumnName("sisetucd7");

                    b.Property<int>("Sisetucd8")
                        .HasColumnType("integer")
                        .HasColumnName("sisetucd8");

                    b.Property<int>("Sisetucd9")
                        .HasColumnType("integer")
                        .HasColumnName("sisetucd9");

                    b.Property<int>("SisiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sisi_kbn");

                    b.Property<int>("SuryoRoundupKbn")
                        .HasColumnType("integer")
                        .HasColumnName("suryo_roundup_kbn");

                    b.Property<string>("SyohinKanren")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("syohin_kanren");

                    b.Property<int>("SyotiNyuyojiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("syoti_nyuyoji_kbn");

                    b.Property<string>("SyukeiSaki")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("syukei_saki");

                    b.Property<int>("SyusaiSbt")
                        .HasColumnType("integer")
                        .HasColumnName("syusai_sbt");

                    b.Property<int>("TeigenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("teigen_kbn");

                    b.Property<double>("Ten")
                        .HasColumnType("double precision")
                        .HasColumnName("ten");

                    b.Property<int>("TenId")
                        .HasColumnType("integer")
                        .HasColumnName("ten_id");

                    b.Property<string>("TenKbnNo")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("ten_kbn_no");

                    b.Property<int>("TimeKasanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("time_kasan_kbn");

                    b.Property<int>("ToketuKasan")
                        .HasColumnType("integer")
                        .HasColumnName("toketu_kasan");

                    b.Property<int>("TokuzaiAgeKbn")
                        .HasColumnType("integer")
                        .HasColumnName("tokuzai_age_kbn");

                    b.Property<int>("TokuzaiSbt")
                        .HasColumnType("integer")
                        .HasColumnName("tokuzai_sbt");

                    b.Property<int>("TusokuAge")
                        .HasColumnType("integer")
                        .HasColumnName("tusoku_age");

                    b.Property<int>("TusokuTargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("tusoku_target_kbn");

                    b.Property<int>("TyoonpaGyokoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("tyoonpa_gyoko_kbn");

                    b.Property<int>("TyoonpaNaisiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("tyoonpa_naisi_kbn");

                    b.Property<string>("TyuCd")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("tyu_cd");

                    b.Property<string>("TyuSeq")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("tyu_seq");

                    b.Property<int>("UpdDate")
                        .HasColumnType("integer")
                        .HasColumnName("upd_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<string>("YakkaCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("yakka_cd");

                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("yj_cd");

                    b.Property<int>("YohoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("yoho_kbn");

                    b.Property<int>("ZaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("zai_kbn");

                    b.Property<int>("ZoueiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("zouei_kbn");

                    b.HasKey("HpId", "ItemCd", "StartDate");

                    b.ToTable("ten_mst_mother");
                });

            modelBuilder.Entity("Entity.Tenant.TimeZoneConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("YoubiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("youbi_kbn")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndTime")
                        .HasColumnType("integer")
                        .HasColumnName("end_time");

                    b.Property<int>("IsDelete")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("StartTime")
                        .HasColumnType("integer")
                        .HasColumnName("start_time");

                    b.Property<int>("TimeKbn")
                        .HasColumnType("integer")
                        .HasColumnName("time_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "YoubiKbn", "SeqNo");

                    b.ToTable("time_zone_conf");
                });

            modelBuilder.Entity("Entity.Tenant.TimeZoneDayInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndTime")
                        .HasColumnType("integer")
                        .HasColumnName("end_time");

                    b.Property<int>("StartTime")
                        .HasColumnType("integer")
                        .HasColumnName("start_time");

                    b.Property<int>("TimeKbn")
                        .HasColumnType("integer")
                        .HasColumnName("time_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "Id", "SinDate");

                    b.ToTable("time_zone_day_inf");
                });

            modelBuilder.Entity("Entity.Tenant.TodoGrpMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("TodoGrpNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("todo_grp_no")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TodoGrpNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("GrpColor")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("grp_color");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<string>("TodoGrpName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("todo_grp_name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "TodoGrpNo");

                    b.ToTable("todo_grp_mst");
                });

            modelBuilder.Entity("Entity.Tenant.TodoInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("TodoNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("todo_no")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TodoNo"));

                    b.Property<int>("TodoEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("todo_eda_no")
                        .HasColumnOrder(3);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(4);

                    b.Property<string>("Cmt1")
                        .HasColumnType("text")
                        .HasColumnName("cmt1");

                    b.Property<string>("Cmt2")
                        .HasColumnType("text")
                        .HasColumnName("cmt2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsDone")
                        .HasColumnType("integer")
                        .HasColumnName("is_done");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<int>("Tanto")
                        .HasColumnType("integer")
                        .HasColumnName("tanto");

                    b.Property<int>("Term")
                        .HasColumnType("integer")
                        .HasColumnName("term");

                    b.Property<int>("TodoGrpNo")
                        .HasColumnType("integer")
                        .HasColumnName("todo_grp_no");

                    b.Property<int>("TodoKbnNo")
                        .HasColumnType("integer")
                        .HasColumnName("todo_kbn_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "TodoNo", "TodoEdaNo", "PtId");

                    b.ToTable("todo_inf");
                });

            modelBuilder.Entity("Entity.Tenant.TodoKbnMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("TodoKbnNo")
                        .HasColumnType("integer")
                        .HasColumnName("todo_kbn_no")
                        .HasColumnOrder(2);

                    b.Property<int>("ActCd")
                        .HasColumnType("integer")
                        .HasColumnName("act_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("TodoKbnName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("todo_kbn_name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "TodoKbnNo");

                    b.ToTable("todo_kbn_mst");
                });

            modelBuilder.Entity("Entity.Tenant.TokkiMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("TokkiCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("tokki_cd")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<string>("TokkiName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tokki_name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "TokkiCd");

                    b.ToTable("tokki_mst");
                });

            modelBuilder.Entity("Entity.Tenant.UketukeSbtDayInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("UketukeSbt")
                        .HasColumnType("integer")
                        .HasColumnName("uketuke_sbt");

                    b.HasKey("HpId", "SinDate", "SeqNo");

                    b.ToTable("uketuke_sbt_day_inf");
                });

            modelBuilder.Entity("Entity.Tenant.UketukeSbtMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("KbnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("kbn_id")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("KbnId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("KbnName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("kbn_name");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "KbnId");

                    b.ToTable("uketuke_sbt_mst");
                });

            modelBuilder.Entity("Entity.Tenant.UnitMst", b =>
                {
                    b.Property<int>("UnitCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("unit_cd")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UnitCd"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<string>("UnitName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("unit_name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("UnitCd");

                    b.ToTable("unit_mst");
                });

            modelBuilder.Entity("Entity.Tenant.UserConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.Property<int>("GrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("grp_cd")
                        .HasColumnOrder(3);

                    b.Property<int>("GrpItemCd")
                        .HasColumnType("integer")
                        .HasColumnName("grp_item_cd")
                        .HasColumnOrder(4);

                    b.Property<int>("GrpItemEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("grp_item_eda_no")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("Param")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("param");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<int>("Val")
                        .HasColumnType("integer")
                        .HasColumnName("val");

                    b.HasKey("HpId", "UserId", "GrpCd", "GrpItemCd", "GrpItemEdaNo");

                    b.ToTable("user_conf");
                });

            modelBuilder.Entity("Entity.Tenant.UserMst", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("DrName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("dr_name");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<byte[]>("HashPassword")
                        .HasColumnType("bytea")
                        .HasColumnName("hash_password");

                    b.Property<string>("HpkiIssuerDn")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("hpki_issuer_dn");

                    b.Property<string>("HpkiSn")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("hpki_sn");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("JobCd")
                        .HasColumnType("integer")
                        .HasColumnName("job_cd");

                    b.Property<int>("KaId")
                        .HasColumnType("integer")
                        .HasColumnName("ka_id");

                    b.Property<string>("KanaName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("kana_name");

                    b.Property<string>("LoginId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("login_id");

                    b.Property<int>("LoginType")
                        .HasColumnType("integer")
                        .HasColumnName("login_type");

                    b.Property<int>("ManagerKbn")
                        .HasColumnType("integer")
                        .HasColumnName("manager_kbn");

                    b.Property<string>("MayakuLicenseNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("mayaku_license_no");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("name");

                    b.Property<string>("RenkeiCd1")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("renkei_cd1");

                    b.Property<byte[]>("Salt")
                        .HasMaxLength(14)
                        .HasColumnType("bytea")
                        .HasColumnName("salt");

                    b.Property<string>("Sname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("sname");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id", "HpId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("\"is_deleted\" = 0");

                    b.ToTable("user_mst");
                });

            modelBuilder.Entity("Entity.Tenant.UserPermission", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.Property<string>("FunctionCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("function_cd")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("Permission")
                        .HasColumnType("integer")
                        .HasColumnName("permission");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "UserId", "FunctionCd");

                    b.ToTable("user_permission");
                });

            modelBuilder.Entity("Entity.Tenant.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id")
                        .HasColumnOrder(1);

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("token_expiry_time")
                        .HasColumnOrder(3);

                    b.Property<bool>("RefreshTokenIsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("refresh_token_is_used")
                        .HasColumnOrder(4);

                    b.HasKey("UserId", "RefreshToken");

                    b.ToTable("user_token");
                });

            modelBuilder.Entity("Entity.Tenant.WrkSinKoui", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_kbn")
                        .HasColumnOrder(3);

                    b.Property<int>("RpNo")
                        .HasColumnType("integer")
                        .HasColumnName("rp_no")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(5);

                    b.Property<string>("CdKbn")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("cd_kbn");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EfFlg")
                        .HasColumnType("integer")
                        .HasColumnName("ef_flg");

                    b.Property<int>("HokatuKensa")
                        .HasColumnType("integer")
                        .HasColumnName("hokatu_kensa");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_pid");

                    b.Property<int>("InoutKbn")
                        .HasColumnType("integer")
                        .HasColumnName("inout_kbn");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsNodspPaperRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_paper_rece");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_rece");

                    b.Property<int>("JihiSbt")
                        .HasColumnType("integer")
                        .HasColumnName("jihi_sbt");

                    b.Property<int>("KazeiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kazei_kbn");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<string>("RecId")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("rec_id");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<string>("SyukeiSaki")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("syukei_saki");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "RaiinNo", "HokenKbn", "RpNo", "SeqNo");

                    b.ToTable("wrk_sin_koui");
                });

            modelBuilder.Entity("Entity.Tenant.WrkSinKouiDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_kbn")
                        .HasColumnOrder(3);

                    b.Property<int>("RpNo")
                        .HasColumnType("integer")
                        .HasColumnName("rp_no")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(5);

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("row_no")
                        .HasColumnOrder(6);

                    b.Property<int>("CdEdano")
                        .HasColumnType("integer")
                        .HasColumnName("cd_edano");

                    b.Property<string>("CdKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("cd_kbn");

                    b.Property<int>("CdKbnno")
                        .HasColumnType("integer")
                        .HasColumnName("cd_kbnno");

                    b.Property<int>("CdKouno")
                        .HasColumnType("integer")
                        .HasColumnName("cd_kouno");

                    b.Property<string>("Cmt1")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("cmt1");

                    b.Property<string>("Cmt2")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("cmt2");

                    b.Property<string>("Cmt3")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("cmt3");

                    b.Property<string>("CmtCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cmt_cd1");

                    b.Property<string>("CmtCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cmt_cd2");

                    b.Property<string>("CmtCd3")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cmt_cd3");

                    b.Property<string>("CmtOpt")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("cmt_opt");

                    b.Property<string>("CmtOpt1")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("cmt_opt1");

                    b.Property<string>("CmtOpt2")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("cmt_opt2");

                    b.Property<string>("CmtOpt3")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("cmt_opt3");

                    b.Property<int>("EfFlg")
                        .HasColumnType("integer")
                        .HasColumnName("ef_flg");

                    b.Property<int>("FmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("fmt_kbn");

                    b.Property<int>("IpnFlg")
                        .HasColumnType("integer")
                        .HasColumnName("ipn_flg");

                    b.Property<int>("IsAutoAdd")
                        .HasColumnType("integer")
                        .HasColumnName("is_auto_add");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsNodspPaperRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_paper_rece");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_rece");

                    b.Property<int>("IsNodspRyosyu")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_ryosyu");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<int>("ItemEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("item_eda_no");

                    b.Property<string>("ItemName")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("item_name");

                    b.Property<int>("ItemSbt")
                        .HasColumnType("integer")
                        .HasColumnName("item_sbt");

                    b.Property<int>("ItemSeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("item_seq_no");

                    b.Property<string>("Kokuji1")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("kokuji1");

                    b.Property<string>("Kokuji2")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("kokuji2");

                    b.Property<string>("OdrItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("odr_item_cd");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<string>("RecId")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("rec_id");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<double>("Suryo")
                        .HasColumnType("double precision")
                        .HasColumnName("suryo");

                    b.Property<double>("Suryo2")
                        .HasColumnType("double precision")
                        .HasColumnName("suryo2");

                    b.Property<double>("Ten")
                        .HasColumnType("double precision")
                        .HasColumnName("ten");

                    b.Property<int>("TenId")
                        .HasColumnType("integer")
                        .HasColumnName("ten_id");

                    b.Property<int>("TusokuAge")
                        .HasColumnType("integer")
                        .HasColumnName("tusoku_age");

                    b.Property<string>("TyuCd")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("tyu_cd");

                    b.Property<string>("TyuSeq")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("tyu_seq");

                    b.Property<int>("UnitCd")
                        .HasColumnType("integer")
                        .HasColumnName("unit_cd");

                    b.Property<string>("UnitName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unit_name");

                    b.HasKey("HpId", "RaiinNo", "HokenKbn", "RpNo", "SeqNo", "RowNo");

                    b.ToTable("wrk_sin_koui_detail");
                });

            modelBuilder.Entity("Entity.Tenant.WrkSinKouiDetailDel", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_kbn")
                        .HasColumnOrder(3);

                    b.Property<int>("RpNo")
                        .HasColumnType("integer")
                        .HasColumnName("rp_no")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(5);

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("row_no")
                        .HasColumnOrder(6);

                    b.Property<int>("ItemSeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("item_seq_no")
                        .HasColumnOrder(7);

                    b.Property<int>("CdEdano")
                        .HasColumnType("integer")
                        .HasColumnName("cd_edano");

                    b.Property<string>("CdKbn")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("cd_kbn");

                    b.Property<int>("CdKbnno")
                        .HasColumnType("integer")
                        .HasColumnName("cd_kbnno");

                    b.Property<int>("CdKouno")
                        .HasColumnType("integer")
                        .HasColumnName("cd_kouno");

                    b.Property<string>("DelItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("del_item_cd");

                    b.Property<int>("DelSbt")
                        .HasColumnType("integer")
                        .HasColumnName("del_sbt");

                    b.Property<int>("IsWarning")
                        .HasColumnType("integer")
                        .HasColumnName("is_warning");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<string>("Kokuji1")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("kokuji1");

                    b.Property<string>("Kokuji2")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("kokuji2");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SanteiDate")
                        .HasColumnType("integer")
                        .HasColumnName("santei_date");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<int>("TermCnt")
                        .HasColumnType("integer")
                        .HasColumnName("term_cnt");

                    b.Property<int>("TermSbt")
                        .HasColumnType("integer")
                        .HasColumnName("term_sbt");

                    b.HasKey("HpId", "RaiinNo", "HokenKbn", "RpNo", "SeqNo", "RowNo", "ItemSeqNo");

                    b.ToTable("wrk_sin_koui_detail_del");
                });

            modelBuilder.Entity("Entity.Tenant.WrkSinRpInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_kbn")
                        .HasColumnOrder(3);

                    b.Property<int>("RpNo")
                        .HasColumnType("integer")
                        .HasColumnName("rp_no")
                        .HasColumnOrder(4);

                    b.Property<string>("CdNo")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("cd_no");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EfFlg")
                        .HasColumnType("integer")
                        .HasColumnName("ef_flg");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SanteiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("santei_kbn");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<int>("SinId")
                        .HasColumnType("integer")
                        .HasColumnName("sin_id");

                    b.Property<int>("SinKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sin_koui_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "RaiinNo", "HokenKbn", "RpNo");

                    b.ToTable("wrk_sin_rp_inf");
                });

            modelBuilder.Entity("Entity.Tenant.YakkaSyusaiMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("YakkaCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("yakka_cd")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(3);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(4);

                    b.Property<string>("Biko")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("biko");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<string>("Hinmoku")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("hinmoku");

                    b.Property<int>("IsNotarget")
                        .HasColumnType("integer")
                        .HasColumnName("is_notarget");

                    b.Property<int>("JunSenpatu")
                        .HasColumnType("integer")
                        .HasColumnName("jun_senpatu");

                    b.Property<string>("Kbn")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("kbn");

                    b.Property<string>("Keika")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("keika");

                    b.Property<string>("Seibun")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("seibun");

                    b.Property<int>("SyusaiDate")
                        .HasColumnType("integer")
                        .HasColumnName("syusai_date");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("unit_name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<double>("Yakka")
                        .HasColumnType("double precision")
                        .HasColumnName("yakka");

                    b.HasKey("HpId", "YakkaCd", "ItemCd", "StartDate");

                    b.HasIndex(new[] { "StartDate", "EndDate" }, "yakka_syusai_mst_idx01");

                    b.ToTable("yakka_syusai_mst");
                });

            modelBuilder.Entity("Entity.Tenant.YohoHosoku", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("Hosoku")
                        .IsRequired()
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("hosoku");

                    b.Property<string>("HosokuItemCd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("hosoku_item_cd");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<int>("YohoHosokuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("yoho_hosoku_kbn");

                    b.Property<int>("YohoHosokuRec")
                        .HasColumnType("integer")
                        .HasColumnName("yoho_hosoku_rec");

                    b.HasKey("HpId", "ItemCd", "StartDate", "SeqNo");

                    b.ToTable("yoho_hosoku");
                });

            modelBuilder.Entity("Entity.Tenant.YohoInfMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<string>("YohoSuffix")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("yoho_suffix");

                    b.HasKey("HpId", "ItemCd");

                    b.ToTable("yoho_inf_mst");
                });

            modelBuilder.Entity("Entity.Tenant.YohoMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<string>("YohoCd")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("yoho_cd")
                        .HasColumnOrder(2);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date")
                        .HasColumnOrder(3);

                    b.Property<int>("Bui")
                        .HasColumnType("integer")
                        .HasColumnName("bui");

                    b.Property<int>("ChozaiYohoCd")
                        .HasColumnType("integer")
                        .HasColumnName("chozai_yoho_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("ReferenceNo")
                        .HasColumnType("integer")
                        .HasColumnName("reference_no");

                    b.Property<string>("TimingKbn")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("timing_kbn");

                    b.Property<int>("TimingKbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("timing_kbn_cd");

                    b.Property<int>("TonyoJoken")
                        .HasColumnType("integer")
                        .HasColumnName("tonyo_joken");

                    b.Property<int>("ToyoInterval")
                        .HasColumnType("integer")
                        .HasColumnName("toyo_interval");

                    b.Property<int>("ToyoTime")
                        .HasColumnType("integer")
                        .HasColumnName("toyo_time");

                    b.Property<int>("ToyoTiming")
                        .HasColumnType("integer")
                        .HasColumnName("toyo_timing");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<int>("YohoCdKbn")
                        .HasColumnType("integer")
                        .HasColumnName("yoho_cd_kbn");

                    b.Property<string>("YohoDetailKbn")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("yoho_detail_kbn");

                    b.Property<string>("YohoDetailKbnCd")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("yoho_detail_kbn_cd");

                    b.Property<string>("YohoKanaName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("yoho_kana_name");

                    b.Property<string>("YohoKbn")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("yoho_kbn");

                    b.Property<string>("YohoKbnCd")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("yoho_kbn_cd");

                    b.Property<string>("YohoName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("yoho_name");

                    b.HasKey("HpId", "YohoCd", "StartDate");

                    b.ToTable("yoho_mst");
                });

            modelBuilder.Entity("Entity.Tenant.YohoSetMst", b =>
                {
                    b.Property<int>("SetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("set_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SetId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("SetId");

                    b.ToTable("yoho_set_mst");
                });

            modelBuilder.Entity("Entity.Tenant.Yousiki1Inf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(3);

                    b.Property<int>("DataType")
                        .HasColumnType("integer")
                        .HasColumnName("data_type")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "PtId", "SinYm", "DataType", "SeqNo");

                    b.ToTable("yousiki1_inf");
                });

            modelBuilder.Entity("Entity.Tenant.Yousiki1InfDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym")
                        .HasColumnOrder(3);

                    b.Property<int>("DataType")
                        .HasColumnType("integer")
                        .HasColumnName("data_type")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no")
                        .HasColumnOrder(5);

                    b.Property<string>("CodeNo")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code_no")
                        .HasColumnOrder(6);

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("row_no")
                        .HasColumnOrder(7);

                    b.Property<int>("Payload")
                        .HasColumnType("integer")
                        .HasColumnName("payload")
                        .HasColumnOrder(8);

                    b.Property<string>("Value")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("value");

                    b.HasKey("HpId", "PtId", "SinYm", "DataType", "SeqNo", "CodeNo", "RowNo", "Payload");

                    b.ToTable("yousiki1_inf_detail");
                });

            modelBuilder.Entity("Entity.Tenant.YoyakuOdrInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("YoyakuKarteNo")
                        .HasColumnType("bigint")
                        .HasColumnName("yoyaku_karte_no")
                        .HasColumnOrder(3);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_no")
                        .HasColumnOrder(4);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_eda_no")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("DaysCnt")
                        .HasColumnType("integer")
                        .HasColumnName("days_cnt");

                    b.Property<int>("InoutKbn")
                        .HasColumnType("integer")
                        .HasColumnName("inout_kbn");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("OdrKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("odr_koui_kbn");

                    b.Property<string>("RpName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("rp_name");

                    b.Property<int>("SanteiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("santei_kbn");

                    b.Property<int>("SikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sikyu_kbn");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("SyohoSbt")
                        .HasColumnType("integer")
                        .HasColumnName("syoho_sbt");

                    b.Property<int>("TosekiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("toseki_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<int>("YoyakuDate")
                        .HasColumnType("integer")
                        .HasColumnName("yoyaku_date");

                    b.HasKey("HpId", "PtId", "YoyakuKarteNo", "RpNo", "RpEdaNo");

                    b.ToTable("yoyaku_odr_inf");
                });

            modelBuilder.Entity("Entity.Tenant.YoyakuOdrInfDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id")
                        .HasColumnOrder(2);

                    b.Property<long>("YoyakuKarteNo")
                        .HasColumnType("bigint")
                        .HasColumnName("yoyaku_karte_no")
                        .HasColumnOrder(3);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_no")
                        .HasColumnOrder(4);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("rp_eda_no")
                        .HasColumnOrder(5);

                    b.Property<long>("RowNo")
                        .HasColumnType("bigint")
                        .HasColumnName("row_no")
                        .HasColumnOrder(6);

                    b.Property<string>("Bunkatu")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("bunkatu");

                    b.Property<string>("CmtName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("cmt_name");

                    b.Property<string>("CmtOpt")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("cmt_opt");

                    b.Property<int>("DrugKbn")
                        .HasColumnType("integer")
                        .HasColumnName("drug_kbn");

                    b.Property<int>("FontColor")
                        .HasColumnType("integer")
                        .HasColumnName("font_color");

                    b.Property<string>("IpnCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("ipn_cd");

                    b.Property<string>("IpnName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("ipn_name");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_nodsp_rece");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<string>("ItemName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("item_name");

                    b.Property<int>("KohatuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kohatu_kbn");

                    b.Property<int>("Kokuji1")
                        .HasColumnType("integer")
                        .HasColumnName("kokuji1");

                    b.Property<int>("SinKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sin_koui_kbn");

                    b.Property<double>("Suryo")
                        .HasColumnType("double precision")
                        .HasColumnName("suryo");

                    b.Property<int>("SyohoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("syoho_kbn");

                    b.Property<int>("SyohoLimitKbn")
                        .HasColumnType("integer")
                        .HasColumnName("syoho_limit_kbn");

                    b.Property<double>("TermVal")
                        .HasColumnType("double precision")
                        .HasColumnName("term_val");

                    b.Property<string>("UnitName")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("unit_name");

                    b.Property<int>("UnitSbt")
                        .HasColumnType("integer")
                        .HasColumnName("unit_sbt");

                    b.Property<int>("YohoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("yoho_kbn");

                    b.Property<int>("YoyakuDate")
                        .HasColumnType("integer")
                        .HasColumnName("yoyaku_date");

                    b.HasKey("HpId", "PtId", "YoyakuKarteNo", "RpNo", "RpEdaNo", "RowNo");

                    b.ToTable("yoyaku_odr_inf_detail");
                });

            modelBuilder.Entity("Entity.Tenant.YoyakuSbtMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id")
                        .HasColumnOrder(1);

                    b.Property<int>("YoyakuSbt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("yoyaku_sbt")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("YoyakuSbt"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("DefaultCmt")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("default_cmt");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("SbtName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("sbt_name");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("HpId", "YoyakuSbt");

                    b.ToTable("yoyaku_sbt_mst");
                });

            modelBuilder.Entity("Entity.Tenant.ZDocInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<int>("CategoryCd")
                        .HasColumnType("integer")
                        .HasColumnName("category_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("DspFileName")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("dsp_file_name");

                    b.Property<string>("FileName")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("file_name");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsLocked")
                        .HasColumnType("integer")
                        .HasColumnName("is_locked");

                    b.Property<DateTime?>("LockDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lock_date");

                    b.Property<int>("LockId")
                        .HasColumnType("integer")
                        .HasColumnName("lock_id");

                    b.Property<string>("LockMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("lock_machine");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_doc_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ZFilingInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<int>("CategoryCd")
                        .HasColumnType("integer")
                        .HasColumnName("category_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("DspFileName")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("dsp_file_name");

                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("file_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FileId"));

                    b.Property<string>("FileName")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("file_name");

                    b.Property<int>("FileNo")
                        .HasColumnType("integer")
                        .HasColumnName("file_no");

                    b.Property<int>("GetDate")
                        .HasColumnType("integer")
                        .HasColumnName("get_date");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_filing_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ZKensaInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Bilirubin")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("bilirubin");

                    b.Property<string>("CenterCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("center_cd");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("InoutKbn")
                        .HasColumnType("integer")
                        .HasColumnName("inout_kbn");

                    b.Property<long>("IraiCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("irai_cd");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IraiCd"));

                    b.Property<int>("IraiDate")
                        .HasColumnType("integer")
                        .HasColumnName("irai_date");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Nyubi")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("nyubi");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    b.Property<int>("ResultCheck")
                        .HasColumnType("integer")
                        .HasColumnName("result_check");

                    b.Property<int>("SikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("sikyu_kbn");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TosekiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("toseki_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<string>("Yoketu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("yoketu");

                    b.HasKey("OpId");

                    b.ToTable("z_kensa_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ZKensaInfDetail", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("AbnormalKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("abnormal_kbn");

                    b.Property<string>("CmtCd1")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("cmt_cd1");

                    b.Property<string>("CmtCd2")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("cmt_cd2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<long>("IraiCd")
                        .HasColumnType("bigint")
                        .HasColumnName("irai_cd");

                    b.Property<int>("IraiDate")
                        .HasColumnType("integer")
                        .HasColumnName("irai_date");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("KensaItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("kensa_item_cd");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    b.Property<string>("ResultType")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("result_type");

                    b.Property<string>("ResultVal")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("result_val");

                    b.Property<long>("SeqGroupNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_group_no");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<long>("SeqParentNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_parent_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_kensa_inf_detail");
                });

            modelBuilder.Entity("Entity.Tenant.ZLimitCntListInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Biko")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("biko");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_pid");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("KohiId")
                        .HasColumnType("integer")
                        .HasColumnName("kohi_id");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("OyaRaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("oya_raiin_no");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<string>("SortKey")
                        .HasMaxLength(61)
                        .HasColumnType("character varying(61)")
                        .HasColumnName("sort_key");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_limit_cnt_list_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ZLimitListInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Biko")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("biko");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("FutanGaku")
                        .HasColumnType("integer")
                        .HasColumnName("futan_gaku");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_pid");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("KohiId")
                        .HasColumnType("integer")
                        .HasColumnName("kohi_id");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<string>("SortKey")
                        .HasMaxLength(61)
                        .HasColumnType("character varying(61)")
                        .HasColumnName("sort_key");

                    b.Property<int>("TotalGaku")
                        .HasColumnType("integer")
                        .HasColumnName("total_gaku");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_limit_list_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ZMonshinInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("GetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("get_kbn");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    b.Property<string>("Rtext")
                        .HasColumnType("text")
                        .HasColumnName("rtext");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_monshin_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtAlrgyDrug", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("DrugName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("drug_name");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_alrgy_drug");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtAlrgyElse", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("AlrgyName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("alrgy_name");

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_alrgy_else");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtAlrgyFood", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("AlrgyKbn")
                        .HasColumnType("text")
                        .HasColumnName("alrgy_kbn");

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_alrgy_food");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtCmtInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_cmt_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtFamily", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Biko")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("biko");

                    b.Property<int>("Birthday")
                        .HasColumnType("integer")
                        .HasColumnName("birthday");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<long>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("family_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FamilyId"));

                    b.Property<long>("FamilyPtId")
                        .HasColumnType("bigint")
                        .HasColumnName("family_pt_id");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDead")
                        .HasColumnType("integer")
                        .HasColumnName("is_dead");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsSeparated")
                        .HasColumnType("integer")
                        .HasColumnName("is_separated");

                    b.Property<string>("KanaName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("kana_name");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("Sex")
                        .HasColumnType("integer")
                        .HasColumnName("sex");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<string>("ZokugaraCd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("zokugara_cd");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_family");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtFamilyReki", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Byomei")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("byomei");

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("byomei_cd");

                    b.Property<string>("ByotaiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("byotai_cd");

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<long>("FamilyId")
                        .HasColumnType("bigint")
                        .HasColumnName("family_id");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_family_reki");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtGrpInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("GroupCode")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("grp_code");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_grp_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtHokenCheck", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("CheckCmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("check_cmt");

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("check_date");

                    b.Property<int>("CheckId")
                        .HasColumnType("integer")
                        .HasColumnName("check_id");

                    b.Property<string>("CheckMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("check_machine");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HokenGrp")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_grp");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtID")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_hoken_check");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtHokenInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Bango")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("bango");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("EdaNo")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("eda_no");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("Gendogaku")
                        .HasColumnType("integer")
                        .HasColumnName("gendogaku");

                    b.Property<int>("GenmenGaku")
                        .HasColumnType("integer")
                        .HasColumnName("genmen_gaku");

                    b.Property<int>("GenmenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("genmen_kbn");

                    b.Property<int>("GenmenRate")
                        .HasColumnType("integer")
                        .HasColumnName("genmen_rate");

                    b.Property<int>("HokenEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_eda_no");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id");

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_kbn");

                    b.Property<int>("HokenNo")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_no");

                    b.Property<string>("HokensyaAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("hokensya_address");

                    b.Property<string>("HokensyaName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("hokensya_name");

                    b.Property<string>("HokensyaNo")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("hokensya_no");

                    b.Property<string>("HokensyaPost")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("hokensya_post");

                    b.Property<string>("HokensyaTel")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("hokensya_tel");

                    b.Property<int>("HonkeKbn")
                        .HasColumnType("integer")
                        .HasColumnName("honke_kbn");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("houbetu");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("JibaiHokenName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("jibai_hoken_name");

                    b.Property<string>("JibaiHokenTanto")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("jibai_hoken_tanto");

                    b.Property<string>("JibaiHokenTel")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("jibai_hoken_tel");

                    b.Property<int>("JibaiJyusyouDate")
                        .HasColumnType("integer")
                        .HasColumnName("jibai_jyusyou_date");

                    b.Property<int>("KeizokuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("keizoku_kbn");

                    b.Property<string>("Kigo")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("kigo");

                    b.Property<int>("KofuDate")
                        .HasColumnType("integer")
                        .HasColumnName("kofu_date");

                    b.Property<int>("KogakuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_kbn");

                    b.Property<int>("KogakuType")
                        .HasColumnType("integer")
                        .HasColumnName("kogaku_type");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("Rate")
                        .HasColumnType("integer")
                        .HasColumnName("rate");

                    b.Property<string>("RousaiCityName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("rousai_city_name");

                    b.Property<string>("RousaiJigyosyoName")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("rousai_jigyosyo_name");

                    b.Property<string>("RousaiKantokuCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("rousai_kantoku_cd");

                    b.Property<string>("RousaiKofuNo")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("rousai_kofu_no");

                    b.Property<string>("RousaiPrefName")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("rousai_pref_name");

                    b.Property<int>("RousaiReceCount")
                        .HasColumnType("integer")
                        .HasColumnName("rousai_rece_count");

                    b.Property<string>("RousaiRoudouCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("rousai_roudou_cd");

                    b.Property<int>("RousaiSaigaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("rousai_saigai_kbn");

                    b.Property<string>("RousaiSyobyoCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("rousai_syobyo_cd");

                    b.Property<int>("RousaiSyobyoDate")
                        .HasColumnType("integer")
                        .HasColumnName("rousai_syobyo_date");

                    b.Property<int>("RyoyoEndDate")
                        .HasColumnType("integer")
                        .HasColumnName("ryoyo_end_date");

                    b.Property<int>("RyoyoStartDate")
                        .HasColumnType("integer")
                        .HasColumnName("ryoyo_start_date");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SikakuDate")
                        .HasColumnType("integer")
                        .HasColumnName("sikaku_date");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<int>("SyokumuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("syokumu_kbn");

                    b.Property<int>("TasukaiYm")
                        .HasColumnType("integer")
                        .HasColumnName("tasukai_ym");

                    b.Property<string>("Tokki1")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("tokki1");

                    b.Property<string>("Tokki2")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("tokki2");

                    b.Property<string>("Tokki3")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("tokki3");

                    b.Property<string>("Tokki4")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("tokki4");

                    b.Property<string>("Tokki5")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("tokki5");

                    b.Property<int>("TokureiYm1")
                        .HasColumnType("integer")
                        .HasColumnName("tokurei_ym1");

                    b.Property<int>("TokureiYm2")
                        .HasColumnType("integer")
                        .HasColumnName("tokurei_ym2");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_hoken_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtHokenPattern", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id");

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_kbn");

                    b.Property<string>("HokenMemo")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("hoken_memo");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_pid");

                    b.Property<int>("HokenSbtCd")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_sbt_cd");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Kohi1Id")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_id");

                    b.Property<int>("Kohi2Id")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_id");

                    b.Property<int>("Kohi3Id")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_id");

                    b.Property<int>("Kohi4Id")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_id");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_hoken_pattern");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtHokenScan", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("file_name");

                    b.Property<int>("HokenGrp")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_grp");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_hoken_scan");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<int>("Birthday")
                        .HasColumnType("integer")
                        .HasColumnName("birthday");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("DeathDate")
                        .HasColumnType("integer")
                        .HasColumnName("death_date");

                    b.Property<string>("HomeAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("home_address1");

                    b.Property<string>("HomeAddress2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("home_address2");

                    b.Property<string>("HomePost")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("home_post");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDead")
                        .HasColumnType("integer")
                        .HasColumnName("is_dead");

                    b.Property<int>("IsDelete")
                        .HasColumnType("integer")
                        .HasColumnName("is_delete");

                    b.Property<int>("IsRyosyoDetail")
                        .HasColumnType("integer")
                        .HasColumnName("is_ryosyo_detail");

                    b.Property<int>("IsTester")
                        .HasColumnType("integer")
                        .HasColumnName("is_tester");

                    b.Property<string>("Job")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("job");

                    b.Property<string>("KanaName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("kana_name");

                    b.Property<int>("LimitConsFlg")
                        .HasColumnType("integer")
                        .HasColumnName("limit_cons_flg");

                    b.Property<string>("Mail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("mail");

                    b.Property<int>("MainHokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("main_hoken_pid");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("OfficeAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("office_address1");

                    b.Property<string>("OfficeAddress2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("office_address2");

                    b.Property<string>("OfficeMemo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("office_memo");

                    b.Property<string>("OfficeName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("office_name");

                    b.Property<string>("OfficePost")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("office_post");

                    b.Property<string>("OfficeTel")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("office_tel");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<int>("PrimaryDoctor")
                        .HasColumnType("integer")
                        .HasColumnName("primary_doctor");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("PtNum")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_num");

                    b.Property<long>("ReferenceNo")
                        .HasColumnType("bigint")
                        .HasColumnName("reference_no");

                    b.Property<string>("RenrakuAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("renraku_address1");

                    b.Property<string>("RenrakuAddress2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("renraku_address2");

                    b.Property<string>("RenrakuMemo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("renraku_memo");

                    b.Property<string>("RenrakuName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("renraku_name");

                    b.Property<string>("RenrakuPost")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("renraku_post");

                    b.Property<string>("RenrakuTel")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("renraku_tel");

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    b.Property<string>("Setanusi")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("setainusi");

                    b.Property<int>("Sex")
                        .HasColumnType("integer")
                        .HasColumnName("sex");

                    b.Property<string>("Tel1")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("tel1");

                    b.Property<string>("Tel2")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("tel2");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<string>("Zokugara")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("zokugara");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtInfection", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Byomei")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("byomei");

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("byomei_cd");

                    b.Property<string>("ByotaiCd")
                        .HasColumnType("text")
                        .HasColumnName("byotai_cd");

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_infection");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtJibkar", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<int>("ByomeiKaiji")
                        .HasColumnType("integer")
                        .HasColumnName("byomei_kaiji");

                    b.Property<DateTime>("ByomeiUpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("byomei_update_date");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("KarteKaiji")
                        .HasColumnType("integer")
                        .HasColumnName("karte_kaiji");

                    b.Property<DateTime>("KarteUpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("karte_update_date");

                    b.Property<int>("KensaKaiji")
                        .HasColumnType("integer")
                        .HasColumnName("kensa_kaiji");

                    b.Property<DateTime>("KensaUpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("kensa_update_date");

                    b.Property<int>("OdrKaiji")
                        .HasColumnType("integer")
                        .HasColumnName("odr_kaiji");

                    b.Property<DateTime>("OdrUpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("odr_update_date");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<string>("WebId")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("web_id");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_jibkar");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtKioReki", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Byomei")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("byomei");

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("byomei_cd");

                    b.Property<string>("ByotaiCd")
                        .HasColumnType("text")
                        .HasColumnName("byotai_cd");

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_kio_reki");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtKohi", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<string>("FutansyaNo")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("futansya_no");

                    b.Property<int>("GendoGaku")
                        .HasColumnType("integer")
                        .HasColumnName("gendogaku");

                    b.Property<int>("HokenEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_eda_no");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id");

                    b.Property<int>("HokenNo")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_no");

                    b.Property<int>("HokenSbtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_sbt_kbn");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("houbetu");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("JyukyusyaNo")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("jyukyusya_no");

                    b.Property<int>("KofuDate")
                        .HasColumnType("integer")
                        .HasColumnName("kofu_date");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<int>("PrefNo")
                        .HasColumnType("integer")
                        .HasColumnName("pref_no");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("Rate")
                        .HasColumnType("integer")
                        .HasColumnName("rate");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SikakuDate")
                        .HasColumnType("integer")
                        .HasColumnName("sikaku_date");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<string>("TokusyuNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tokusyu_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_kohi");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtKyusei", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("KanaName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("kana_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.HasIndex(new[] { "HpId", "PtId", "EndDate", "IsDeleted" }, "pt_kyusei_idx01")
                        .HasDatabaseName("pt_kyusei_idx011");

                    b.ToTable("z_pt_kyusei");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtMemo", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Memo")
                        .HasColumnType("text")
                        .HasColumnName("memo");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_memo");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtOtcDrug", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SerialNum")
                        .HasColumnType("integer")
                        .HasColumnName("serial_num");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<string>("TradeName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("trade_name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_otc_drug");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtOtherDrug", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<string>("DrugName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("drug_name");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_other_drug");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtPregnancy", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<int>("OvulationDate")
                        .HasColumnType("integer")
                        .HasColumnName("ovulation_date");

                    b.Property<int>("OvulationDueDate")
                        .HasColumnType("integer")
                        .HasColumnName("ovulation_due_date");

                    b.Property<int>("PeriodDate")
                        .HasColumnType("integer")
                        .HasColumnName("period_date");

                    b.Property<int>("PeriodDueDate")
                        .HasColumnType("integer")
                        .HasColumnName("period_due_date");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_pregnancy");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtRousaiTenki", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("Sinkei")
                        .HasColumnType("integer")
                        .HasColumnName("sinkei");

                    b.Property<int>("Tenki")
                        .HasColumnType("integer")
                        .HasColumnName("tenki");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_rousai_tenki");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtSanteiConf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("eda_no");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("KbnNo")
                        .HasColumnType("integer")
                        .HasColumnName("kbn_no");

                    b.Property<int>("KbnVal")
                        .HasColumnType("integer")
                        .HasColumnName("kbn_val");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_santei_conf");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtSupple", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<string>("IndexCd")
                        .HasColumnType("text")
                        .HasColumnName("index_cd");

                    b.Property<string>("IndexWord")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("index_word");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_supple");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtTag", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<int>("AlphablendVal")
                        .HasColumnType("integer")
                        .HasColumnName("alphablend_val");

                    b.Property<string>("BackgroundColor")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("background_color");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<int>("FontSize")
                        .HasColumnType("integer")
                        .HasColumnName("fontsize");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsDspKaikei")
                        .HasColumnType("integer")
                        .HasColumnName("is_dsp_kaikei");

                    b.Property<int>("IsDspKarte")
                        .HasColumnType("integer")
                        .HasColumnName("is_dsp_karte");

                    b.Property<int>("IsDspRece")
                        .HasColumnType("integer")
                        .HasColumnName("is_dsp_rece");

                    b.Property<int>("IsDspUketuke")
                        .HasColumnType("integer")
                        .HasColumnName("is_dsp_uketuke");

                    b.Property<int>("Left")
                        .HasColumnType("integer")
                        .HasColumnName("left");

                    b.Property<string>("Memo")
                        .HasColumnType("text")
                        .HasColumnName("memo");

                    b.Property<byte[]>("MemoData")
                        .HasColumnType("bytea")
                        .HasColumnName("memo_data");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("start_date");

                    b.Property<int>("TagGrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("tag_grp_cd");

                    b.Property<int>("Top")
                        .HasColumnType("integer")
                        .HasColumnName("top");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("OpId");

                    b.ToTable("z_pt_tag");
                });

            modelBuilder.Entity("Entity.Tenant.ZRaiinCmtInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<int>("CmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_kbn");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDelete")
                        .HasColumnType("integer")
                        .HasColumnName("is_delete");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<string>("Text")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_raiin_cmt_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ZRaiinInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("ConfirmationResult")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("confirmation_result");

                    b.Property<int>("ConfirmationState")
                        .HasColumnType("integer")
                        .HasColumnName("confirmation_state");

                    b.Property<int>("ConfirmationType")
                        .HasColumnType("integer")
                        .HasColumnName("confirmation_type");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_pid");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<string>("InfoConsFlg")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("info_cons_flg");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsYoyaku")
                        .HasColumnType("integer")
                        .HasColumnName("is_yoyaku");

                    b.Property<int>("JikanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("jikan_kbn");

                    b.Property<int>("KaId")
                        .HasColumnType("integer")
                        .HasColumnName("ka_id");

                    b.Property<int>("KaikeiId")
                        .HasColumnType("integer")
                        .HasColumnName("kaikei_id");

                    b.Property<string>("KaikeiTime")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("kaikei_time");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("OyaRaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("oya_raiin_no");

                    b.Property<int>("PrescriptionIssueType")
                        .HasColumnType("integer")
                        .HasColumnName("prescription_issue_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("RaiinNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("RaiinNo"));

                    b.Property<int>("SanteiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("santei_kbn");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<string>("SinEndTime")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("sin_end_time");

                    b.Property<string>("SinStartTime")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("sin_start_time");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("SyosaisinKbn")
                        .HasColumnType("integer")
                        .HasColumnName("syosaisin_kbn");

                    b.Property<int>("TantoId")
                        .HasColumnType("integer")
                        .HasColumnName("tanto_id");

                    b.Property<int>("UketukeId")
                        .HasColumnType("integer")
                        .HasColumnName("uketuke_id");

                    b.Property<int>("UketukeNo")
                        .HasColumnType("integer")
                        .HasColumnName("uketuke_no");

                    b.Property<int>("UketukeSbt")
                        .HasColumnType("integer")
                        .HasColumnName("uketuke_sbt");

                    b.Property<string>("UketukeTime")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("uketuke_time");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.Property<int>("YoyakuId")
                        .HasColumnType("integer")
                        .HasColumnName("yoyaku_id");

                    b.Property<string>("YoyakuTime")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("yoyaku_time");

                    b.HasKey("OpId");

                    b.ToTable("z_raiin_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ZRaiinKbnInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDelete")
                        .HasColumnType("integer")
                        .HasColumnName("is_delete");

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("kbn_cd");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_raiin_kbn_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ZRaiinListCmt", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<int>("CmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_kbn");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<string>("Text")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_raiin_list_cmt");
                });

            modelBuilder.Entity("Entity.Tenant.ZRaiinListTag", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<int>("TagNo")
                        .HasColumnType("integer")
                        .HasColumnName("tag_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_raiin_list_tag");
                });

            modelBuilder.Entity("Entity.Tenant.ZReceCheckCmt", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsChecked")
                        .HasColumnType("integer")
                        .HasColumnName("is_checked");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsPending")
                        .HasColumnType("integer")
                        .HasColumnName("is_pending");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_rece_check_cmt");
                });

            modelBuilder.Entity("Entity.Tenant.ZReceCmt", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Cmt")
                        .HasColumnType("text")
                        .HasColumnName("cmt");

                    b.Property<string>("CmtData")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("cmt_data");

                    b.Property<int>("CmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_kbn");

                    b.Property<int>("CmtSbt")
                        .HasColumnType("integer")
                        .HasColumnName("cmt_sbt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_rece_cmt");
                });

            modelBuilder.Entity("Entity.Tenant.ZReceInfEdit", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id");

                    b.Property<int?>("HokenNissu")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_nissu");

                    b.Property<int?>("HokenReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_rece_futan");

                    b.Property<int?>("HokenReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_rece_tensu");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("houbetu");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Kohi1Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi1_houbetu");

                    b.Property<int?>("Kohi1Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_nissu");

                    b.Property<int?>("Kohi1ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_rece_futan");

                    b.Property<int?>("Kohi1ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_rece_kyufu");

                    b.Property<int?>("Kohi1ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi1_rece_tensu");

                    b.Property<string>("Kohi2Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi2_houbetu");

                    b.Property<int?>("Kohi2Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_nissu");

                    b.Property<int?>("Kohi2ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_rece_futan");

                    b.Property<int?>("Kohi2ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_rece_kyufu");

                    b.Property<int?>("Kohi2ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi2_rece_tensu");

                    b.Property<string>("Kohi3Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi3_houbetu");

                    b.Property<int?>("Kohi3Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_nissu");

                    b.Property<int?>("Kohi3ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_rece_futan");

                    b.Property<int?>("Kohi3ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_rece_kyufu");

                    b.Property<int?>("Kohi3ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi3_rece_tensu");

                    b.Property<string>("Kohi4Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("kohi4_houbetu");

                    b.Property<int?>("Kohi4Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_nissu");

                    b.Property<int?>("Kohi4ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_rece_futan");

                    b.Property<int?>("Kohi4ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_rece_kyufu");

                    b.Property<int?>("Kohi4ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("kohi4_rece_tensu");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<string>("ReceSbt")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("rece_sbt");

                    b.Property<int>("SeikyuYm")
                        .HasColumnType("integer")
                        .HasColumnName("seikyu_ym");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym");

                    b.Property<string>("Tokki")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki");

                    b.Property<string>("Tokki1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki1");

                    b.Property<string>("Tokki2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki2");

                    b.Property<string>("Tokki3")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki3");

                    b.Property<string>("Tokki4")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki4");

                    b.Property<string>("Tokki5")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tokki5");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_rece_inf_edit");
                });

            modelBuilder.Entity("Entity.Tenant.ZReceSeikyu", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("cmt");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<int>("PreHokenId")
                        .HasColumnType("integer")
                        .HasColumnName("pre_hoken_id");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SeikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("seikyu_kbn");

                    b.Property<int>("SeikyuYm")
                        .HasColumnType("integer")
                        .HasColumnName("seikyu_ym");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_rece_seikyu");
                });

            modelBuilder.Entity("Entity.Tenant.ZRsvDayComment", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_rsv_day_comment");
                });

            modelBuilder.Entity("Entity.Tenant.ZRsvInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("KaId")
                        .HasColumnType("integer")
                        .HasColumnName("ka_id");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    b.Property<int>("RsvFrameId")
                        .HasColumnType("integer")
                        .HasColumnName("rsv_frame_id");

                    b.Property<int>("RsvSbt")
                        .HasColumnType("integer")
                        .HasColumnName("rsv_sbt");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<int>("StartTime")
                        .HasColumnType("integer")
                        .HasColumnName("start_time");

                    b.Property<int>("TantoId")
                        .HasColumnType("integer")
                        .HasColumnName("tanto_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_rsv_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ZSanteiInfDetail", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Byomei")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("byomei");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("end_date");

                    b.Property<string>("HosokuComment")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("hosoku_comment");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_cd");

                    b.Property<int>("KisanDate")
                        .HasColumnType("integer")
                        .HasColumnName("kisan_date");

                    b.Property<int>("KisanSbt")
                        .HasColumnType("integer")
                        .HasColumnName("kisan_sbt");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_santei_inf_detail");
                });

            modelBuilder.Entity("Entity.Tenant.ZSeikaturekiInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_seikatureki_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ZSummaryInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<byte[]>("Rtext")
                        .HasColumnType("bytea")
                        .HasColumnName("rtext");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_summary_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ZSyobyoKeika", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Keika")
                        .HasColumnType("text")
                        .HasColumnName("keika");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SinDay")
                        .HasColumnType("integer")
                        .HasColumnName("sin_day");

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_syobyo_keika");
                });

            modelBuilder.Entity("Entity.Tenant.ZSyoukiInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("hoken_id");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<string>("Syouki")
                        .HasColumnType("text")
                        .HasColumnName("syouki");

                    b.Property<int>("SyoukiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("syouki_kbn");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_syouki_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ZSyunoNyukin", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<int>("AdjustFutan")
                        .HasColumnType("integer")
                        .HasColumnName("adjust_futan");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("NyukinCmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nyukin_cmt");

                    b.Property<int>("NyukinDate")
                        .HasColumnType("integer")
                        .HasColumnName("nyukin_date");

                    b.Property<int>("NyukinGaku")
                        .HasColumnType("integer")
                        .HasColumnName("nyukin_gaku");

                    b.Property<string>("NyukinjiDetail")
                        .HasColumnType("text")
                        .HasColumnName("nyukinji_detail");

                    b.Property<int>("NyukinjiSeikyu")
                        .HasColumnType("integer")
                        .HasColumnName("nyukinji_seikyu");

                    b.Property<int>("NyukinjiTensu")
                        .HasColumnType("integer")
                        .HasColumnName("nyukinji_tensu");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<int>("PaymentMethodCd")
                        .HasColumnType("integer")
                        .HasColumnName("payment_method_cd");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("seq_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("sort_no");

                    b.Property<int>("UketukeSbt")
                        .HasColumnType("integer")
                        .HasColumnName("uketuke_sbt");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.HasIndex(new[] { "HpId", "PtId", "SinDate", "RaiinNo", "IsDeleted" }, "syuno_nyukin_idx01");

                    b.ToTable("z_syuno_nyukin");
                });

            modelBuilder.Entity("Entity.Tenant.ZTodoInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Cmt1")
                        .HasColumnType("text")
                        .HasColumnName("cmt1");

                    b.Property<string>("Cmt2")
                        .HasColumnType("text")
                        .HasColumnName("cmt2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<int>("IsDone")
                        .HasColumnType("integer")
                        .HasColumnName("is_done");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("raiin_no");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<int>("Tanto")
                        .HasColumnType("integer")
                        .HasColumnName("tanto");

                    b.Property<int>("Term")
                        .HasColumnType("integer")
                        .HasColumnName("term");

                    b.Property<int>("TodoEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("todo_eda_no");

                    b.Property<int>("TodoGrpNo")
                        .HasColumnType("integer")
                        .HasColumnName("todo_grp_no");

                    b.Property<int>("TodoKbnNo")
                        .HasColumnType("integer")
                        .HasColumnName("todo_kbn_no");

                    b.Property<int>("TodoNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("todo_no");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TodoNo"));

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_todo_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ZUketukeSbtDayInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("sin_date");

                    b.Property<int>("UketukeSbt")
                        .HasColumnType("integer")
                        .HasColumnName("uketuke_sbt");

                    b.HasKey("OpId");

                    b.ToTable("z_uketuke_sbt_day_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ZYousiki1Inf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("create_id");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("create_machine");

                    b.Property<int>("DataType")
                        .HasColumnType("integer")
                        .HasColumnName("data_type");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("update_id");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("update_machine");

                    b.HasKey("OpId");

                    b.ToTable("z_yousiki1_inf");
                });

            modelBuilder.Entity("Entity.Tenant.ZYousiki1InfDetail", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("op_id")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("CodeNo")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code_no");

                    b.Property<int>("DataType")
                        .HasColumnType("integer")
                        .HasColumnName("data_type");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("hp_id");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_addr");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("op_hostname");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("op_time");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("op_type");

                    b.Property<int>("Payload")
                        .HasColumnType("integer")
                        .HasColumnName("payload");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("pt_id");

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("row_no");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("seq_no");

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("sin_ym");

                    b.Property<string>("Value")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("value");

                    b.HasKey("OpId");

                    b.ToTable("z_yousiki1_inf_detail");
                });
#pragma warning restore 612, 618
        }
    }
}
