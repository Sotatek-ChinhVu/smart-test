// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PostgreDataContext;

#nullable disable

namespace TenantMigration.Migrations
{
    [DbContext(typeof(TenantDataContext))]
    partial class TenantDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Emr.DatabaseEntity.KacodeReceYousiki", b =>
                {
                    b.Property<string>("ReceKaCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("RECE_KA_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("YousikiKaCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("YOUSIKI_KA_CD")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("ReceKaCd", "YousikiKaCd");

                    b.ToTable("KACODE_RECE_YOUSIKI");
                });

            modelBuilder.Entity("Emr.DatabaseEntity.KacodeYousikiMst", b =>
                {
                    b.Property<string>("YousikiKaCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("YOUSIKI_KA_CD")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("KaName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("KA_NAME");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("YousikiKaCd");

                    b.ToTable("KACODE_YOUSIKI_MST");
                });

            modelBuilder.Entity("Entity.Tenant.AccountingFormMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("FormNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("FORM_NO")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FormNo"));

                    b.Property<int>("Base")
                        .HasColumnType("integer")
                        .HasColumnName("BASE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("Form")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("FORM");

                    b.Property<string>("FormName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("FORM_NAME");

                    b.Property<int>("FormType")
                        .HasColumnType("integer")
                        .HasColumnName("FORM_TYPE");

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_KBN");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("MiseisanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("MISEISAN_KBN");

                    b.Property<int>("MisyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("MISYU_KBN");

                    b.Property<int>("PrintSort")
                        .HasColumnType("integer")
                        .HasColumnName("PRINT_SORT");

                    b.Property<int>("SaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SAI_KBN");

                    b.Property<int>("SeikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SEIKYU_KBN");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "FormNo");

                    b.ToTable("ACCOUNTING_FORM_MST");
                });

            modelBuilder.Entity("Entity.Tenant.ApprovalInf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id", "HpId", "RaiinNo");

                    b.ToTable("APPROVAL_INF");
                });

            modelBuilder.Entity("Entity.Tenant.AuditTrailLog", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("LOG_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("LogId"));

                    b.Property<string>("EventCd")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("EVENT_CD");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LOG_DATE");

                    b.Property<string>("Machine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("MACHINE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO");

                    b.Property<int>("SinDay")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DAY");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("USER_ID");

                    b.HasKey("LogId");

                    b.ToTable("AUDIT_TRAIL_LOG");
                });

            modelBuilder.Entity("Entity.Tenant.AuditTrailLogDetail", b =>
                {
                    b.Property<long>("LogId")
                        .HasColumnType("bigint")
                        .HasColumnName("LOG_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("Hosoku")
                        .HasColumnType("text")
                        .HasColumnName("HOSOKU");

                    b.HasKey("LogId");

                    b.ToTable("AUDIT_TRAIL_LOG_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.AutoSanteiMst", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id", "HpId", "ItemCd");

                    b.ToTable("AUTO_SANTEI_MST");
                });

            modelBuilder.Entity("Entity.Tenant.BackupReq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("FromDate")
                        .HasColumnType("integer")
                        .HasColumnName("FROM_DATE");

                    b.Property<int>("OutputType")
                        .HasColumnType("integer")
                        .HasColumnName("OUTPUT_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("STATUS");

                    b.Property<int>("ToDate")
                        .HasColumnType("integer")
                        .HasColumnName("TO_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id");

                    b.ToTable("BACKUP_REQ");
                });

            modelBuilder.Entity("Entity.Tenant.BuiOdrByomeiMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("BuiId")
                        .HasColumnType("integer")
                        .HasColumnName("BUI_ID")
                        .HasColumnOrder(2);

                    b.Property<string>("ByomeiBui")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("BYOMEI_BUI")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "BuiId", "ByomeiBui");

                    b.ToTable("BUI_ODR_BYOMEI_MST");
                });

            modelBuilder.Entity("Entity.Tenant.BuiOdrItemByomeiMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(2);

                    b.Property<string>("ByomeiBui")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("BYOMEI_BUI")
                        .HasColumnOrder(3);

                    b.Property<int>("BothKbn")
                        .HasColumnType("integer")
                        .HasColumnName("BOTH_KBN");

                    b.Property<int>("LrKbn")
                        .HasColumnType("integer")
                        .HasColumnName("LR_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "ItemCd", "ByomeiBui");

                    b.ToTable("BUI_ODR_ITEM_BYOMEI_MST");
                });

            modelBuilder.Entity("Entity.Tenant.BuiOdrItemMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "ItemCd");

                    b.ToTable("BUI_ODR_ITEM_MST");
                });

            modelBuilder.Entity("Entity.Tenant.BuiOdrMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("BuiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("BUI_ID")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BuiId"));

                    b.Property<int>("BothKbn")
                        .HasColumnType("integer")
                        .HasColumnName("BOTH_KBN");

                    b.Property<int>("Koui30")
                        .HasColumnType("integer")
                        .HasColumnName("KOUI_30");

                    b.Property<int>("Koui40")
                        .HasColumnType("integer")
                        .HasColumnName("KOUI_40");

                    b.Property<int>("Koui50")
                        .HasColumnType("integer")
                        .HasColumnName("KOUI_50");

                    b.Property<int>("Koui60")
                        .HasColumnType("integer")
                        .HasColumnName("KOUI_60");

                    b.Property<int>("Koui70")
                        .HasColumnType("integer")
                        .HasColumnName("KOUI_70");

                    b.Property<int>("Koui80")
                        .HasColumnType("integer")
                        .HasColumnName("KOUI_80");

                    b.Property<int>("LrKbn")
                        .HasColumnType("integer")
                        .HasColumnName("LR_KBN");

                    b.Property<int>("MustLrKbn")
                        .HasColumnType("integer")
                        .HasColumnName("MUST_LR_KBN");

                    b.Property<string>("OdrBui")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ODR_BUI");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "BuiId");

                    b.ToTable("BUI_ODR_MST");
                });

            modelBuilder.Entity("Entity.Tenant.ByomeiMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("BYOMEI_CD")
                        .HasColumnOrder(2);

                    b.Property<string>("Byomei")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("BYOMEI");

                    b.Property<string>("ByomeiKanri")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("BYOMEI_KANRI");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("DelDate")
                        .HasColumnType("integer")
                        .HasColumnName("DEL_DATE");

                    b.Property<int>("HokenGai")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_GAI");

                    b.Property<string>("Icd101")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("ICD10_1");

                    b.Property<string>("Icd1012013")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("ICD10_1_2013");

                    b.Property<string>("Icd102")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("ICD10_2");

                    b.Property<string>("Icd1022013")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("ICD10_2_2013");

                    b.Property<string>("IkoCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("IKO_CD");

                    b.Property<int>("IsAdopted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_ADOPTED");

                    b.Property<string>("KanaName1")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("KANA_NAME1");

                    b.Property<string>("KanaName2")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("KANA_NAME2");

                    b.Property<string>("KanaName3")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("KANA_NAME3");

                    b.Property<string>("KanaName4")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("KANA_NAME4");

                    b.Property<string>("KanaName5")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("KANA_NAME5");

                    b.Property<string>("KanaName6")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("KANA_NAME6");

                    b.Property<string>("KanaName7")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("KANA_NAME7");

                    b.Property<string>("KoukanCd")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("KOUKAN_CD");

                    b.Property<int>("NanbyoCd")
                        .HasColumnType("integer")
                        .HasColumnName("NANBYO_CD");

                    b.Property<string>("SaitakuKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("SAITAKU_KBN");

                    b.Property<string>("Sbyomei")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("SBYOMEI");

                    b.Property<int>("SikkanCd")
                        .HasColumnType("integer")
                        .HasColumnName("SIKKAN_CD");

                    b.Property<int>("SyusaiDate")
                        .HasColumnType("integer")
                        .HasColumnName("SYUSAI_DATE");

                    b.Property<string>("SyusyokuKbn")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("SYUSYOKU_KBN");

                    b.Property<int>("TandokuKinsi")
                        .HasColumnType("integer")
                        .HasColumnName("TANDOKU_KINSI");

                    b.Property<int>("UpdDate")
                        .HasColumnType("integer")
                        .HasColumnName("UPD_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "ByomeiCd");

                    b.ToTable("BYOMEI_MST");
                });

            modelBuilder.Entity("Entity.Tenant.ByomeiMstAftercare", b =>
                {
                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("BYOMEI_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("Byomei")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("BYOMEI")
                        .HasColumnOrder(2);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("ByomeiCd", "Byomei", "StartDate");

                    b.ToTable("BYOMEI_MST_AFTERCARE");
                });

            modelBuilder.Entity("Entity.Tenant.ByomeiSetGenerationMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GenerationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("GENERATION_ID")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenerationId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GenerationId");

                    b.ToTable("BYOMEI_SET_GENERATION_MST");
                });

            modelBuilder.Entity("Entity.Tenant.ByomeiSetMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GenerationId")
                        .HasColumnType("integer")
                        .HasColumnName("GENERATION_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("BYOMEI_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsTitle")
                        .HasColumnType("integer")
                        .HasColumnName("IS_TITLE");

                    b.Property<int>("Level1")
                        .HasColumnType("integer")
                        .HasColumnName("LEVEL1");

                    b.Property<int>("Level2")
                        .HasColumnType("integer")
                        .HasColumnName("LEVEL2");

                    b.Property<int>("Level3")
                        .HasColumnType("integer")
                        .HasColumnName("LEVEL3");

                    b.Property<int>("Level4")
                        .HasColumnType("integer")
                        .HasColumnName("LEVEL4");

                    b.Property<int>("Level5")
                        .HasColumnType("integer")
                        .HasColumnName("LEVEL5");

                    b.Property<int>("SelectType")
                        .HasColumnType("integer")
                        .HasColumnName("SELECT_TYPE");

                    b.Property<string>("SetName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("SET_NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GenerationId", "SeqNo");

                    b.ToTable("BYOMEI_SET_MST");
                });

            modelBuilder.Entity("Entity.Tenant.CalcLog", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("DelItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("DEL_ITEM_CD");

                    b.Property<int>("DelSbt")
                        .HasColumnType("integer")
                        .HasColumnName("DEL_SBT");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID");

                    b.Property<int>("IsWarning")
                        .HasColumnType("integer")
                        .HasColumnName("IS_WARNING");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<int>("LogSbt")
                        .HasColumnType("integer")
                        .HasColumnName("LOG_SBT");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<int>("TermCnt")
                        .HasColumnType("integer")
                        .HasColumnName("TERM_CNT");

                    b.Property<int>("TermSbt")
                        .HasColumnType("integer")
                        .HasColumnName("TERM_SBT");

                    b.Property<string>("Text")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "RaiinNo", "SeqNo");

                    b.ToTable("CALC_LOG");
                });

            modelBuilder.Entity("Entity.Tenant.CalcStatus", b =>
                {
                    b.Property<long>("CalcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CALC_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CalcId"));

                    b.Property<string>("Biko")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("BIKO");

                    b.Property<int>("CalcMode")
                        .HasColumnType("integer")
                        .HasColumnName("CALC_MODE");

                    b.Property<int>("ClearReceChk")
                        .HasColumnType("integer")
                        .HasColumnName("CLEAR_RECE_CHK");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SeikyuUp")
                        .HasColumnType("integer")
                        .HasColumnName("SEIKYU_UP");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("STATUS");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("CalcId");

                    b.HasIndex(new[] { "HpId", "PtId", "SinDate", "Status", "CreateMachine" }, "CALC_STATUS_IDX01");

                    b.HasIndex(new[] { "HpId", "Status", "CreateMachine" }, "CALC_STATUS_IDX02");

                    b.ToTable("CALC_STATUS");
                });

            modelBuilder.Entity("Entity.Tenant.CmtCheckMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("KarteKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KARTE_KBN");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "ItemCd", "SeqNo");

                    b.ToTable("CMT_CHECK_MST");
                });

            modelBuilder.Entity("Entity.Tenant.CmtKbnMst", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_KBN");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<string>("ItemCd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "HpId", "ItemCd", "StartDate" }, "CMT_KBN_MST_IDX01");

                    b.ToTable("CMT_KBN_MST");
                });

            modelBuilder.Entity("Entity.Tenant.ColumnSetting", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("USER_ID");

                    b.Property<string>("TableName")
                        .HasColumnType("text")
                        .HasColumnName("TABLE_NAME");

                    b.Property<string>("ColumnName")
                        .HasColumnType("text")
                        .HasColumnName("COLUMN_NAME");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("DISPLAY_ORDER");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_HIDDEN");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("boolean")
                        .HasColumnName("IS_PINNED");

                    b.Property<string>("OrderBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ORDER_BY");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("WIDTH");

                    b.HasKey("UserId", "TableName", "ColumnName");

                    b.ToTable("COLUMN_SETTING");
                });

            modelBuilder.Entity("Entity.Tenant.ContainerMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("ContainerCd")
                        .HasColumnType("bigint")
                        .HasColumnName("CONTAINER_CD")
                        .HasColumnOrder(2);

                    b.Property<string>("ContainerName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("CONTAINER_NAME");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "ContainerCd");

                    b.ToTable("CONTAINER_MST");
                });

            modelBuilder.Entity("Entity.Tenant.ConversionItemInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("SourceItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("SOURCE_ITEM_CD")
                        .HasColumnOrder(2);

                    b.Property<string>("DestItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("DEST_ITEM_CD")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "SourceItemCd", "DestItemCd");

                    b.HasIndex(new[] { "HpId", "SourceItemCd" }, "CONVERSION_ITEM_INF_IDX01");

                    b.ToTable("CONVERSION_ITEM_INF");
                });

            modelBuilder.Entity("Entity.Tenant.DefHokenNo", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("Digit1")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("DIGIT_1")
                        .HasColumnOrder(2);

                    b.Property<string>("Digit2")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("DIGIT_2")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("Digit3")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("DIGIT_3");

                    b.Property<string>("Digit4")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("DIGIT_4");

                    b.Property<string>("Digit5")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("DIGIT_5");

                    b.Property<string>("Digit6")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("DIGIT_6");

                    b.Property<string>("Digit7")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("DIGIT_7");

                    b.Property<string>("Digit8")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("DIGIT_8");

                    b.Property<int>("HokenEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_EDA_NO");

                    b.Property<int>("HokenNo")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_NO");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "Digit1", "Digit2", "SeqNo");

                    b.HasIndex(new[] { "HpId", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "IsDeleted" }, "DEF_HOKEN_NO_IDX01");

                    b.ToTable("DEF_HOKEN_NO");
                });

            modelBuilder.Entity("Entity.Tenant.DensiHaihanCustom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD1")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("UserSetting")
                        .HasColumnType("integer")
                        .HasColumnName("USER_SETTING")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("HaihanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HAIHAN_KBN");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("IS_INVALID");

                    b.Property<string>("ItemCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD2");

                    b.Property<int>("SpJyoken")
                        .HasColumnType("integer")
                        .HasColumnName("SP_JYOKEN");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<int>("TargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TARGET_KBN");

                    b.Property<int>("TermCnt")
                        .HasColumnType("integer")
                        .HasColumnName("TERM_CNT");

                    b.Property<int>("TermSbt")
                        .HasColumnType("integer")
                        .HasColumnName("TERM_SBT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id", "HpId", "ItemCd1", "SeqNo", "UserSetting");

                    b.HasIndex(new[] { "HpId", "ItemCd1", "HaihanKbn", "StartDate", "TargetKbn", "IsInvalid" }, "DENSI_HAIHAN_CUSTOM_IDX03");

                    b.ToTable("DENSI_HAIHAN_CUSTOM");
                });

            modelBuilder.Entity("Entity.Tenant.DensiHaihanDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD1")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("UserSetting")
                        .HasColumnType("integer")
                        .HasColumnName("USER_SETTING")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("HaihanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HAIHAN_KBN");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("IS_INVALID");

                    b.Property<string>("ItemCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD2");

                    b.Property<int>("SpJyoken")
                        .HasColumnType("integer")
                        .HasColumnName("SP_JYOKEN");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<int>("TargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TARGET_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id", "HpId", "ItemCd1", "SeqNo", "UserSetting");

                    b.HasIndex(new[] { "HpId", "ItemCd1", "HaihanKbn", "StartDate", "EndDate", "TargetKbn", "IsInvalid" }, "DENSI_HAIHAN_DAY_IDX03");

                    b.ToTable("DENSI_HAIHAN_DAY");
                });

            modelBuilder.Entity("Entity.Tenant.DensiHaihanKarte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD1")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("UserSetting")
                        .HasColumnType("integer")
                        .HasColumnName("USER_SETTING")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("HaihanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HAIHAN_KBN");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("IS_INVALID");

                    b.Property<string>("ItemCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD2");

                    b.Property<int>("SpJyoken")
                        .HasColumnType("integer")
                        .HasColumnName("SP_JYOKEN");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<int>("TargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TARGET_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id", "HpId", "ItemCd1", "SeqNo", "UserSetting");

                    b.HasIndex(new[] { "HpId", "ItemCd1", "HaihanKbn", "StartDate", "EndDate", "TargetKbn", "IsInvalid" }, "DENSI_HAIHAN_KARTE_IDX03");

                    b.ToTable("DENSI_HAIHAN_KARTE");
                });

            modelBuilder.Entity("Entity.Tenant.DensiHaihanMonth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD1")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("UserSetting")
                        .HasColumnType("integer")
                        .HasColumnName("USER_SETTING")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("HaihanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HAIHAN_KBN");

                    b.Property<int>("IncAfter")
                        .HasColumnType("integer")
                        .HasColumnName("INC_AFTER");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("IS_INVALID");

                    b.Property<string>("ItemCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD2");

                    b.Property<int>("SpJyoken")
                        .HasColumnType("integer")
                        .HasColumnName("SP_JYOKEN");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<int>("TargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TARGET_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id", "HpId", "ItemCd1", "SeqNo", "UserSetting");

                    b.HasIndex(new[] { "HpId", "ItemCd1", "HaihanKbn", "StartDate", "EndDate", "TargetKbn", "IsInvalid" }, "DENSI_HAIHAN_MONTH_IDX03");

                    b.ToTable("DENSI_HAIHAN_MONTH");
                });

            modelBuilder.Entity("Entity.Tenant.DensiHaihanWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD1")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("UserSetting")
                        .HasColumnType("integer")
                        .HasColumnName("USER_SETTING")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("HaihanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HAIHAN_KBN");

                    b.Property<int>("IncAfter")
                        .HasColumnType("integer")
                        .HasColumnName("INC_AFTER");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("IS_INVALID");

                    b.Property<string>("ItemCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD2");

                    b.Property<int>("SpJyoken")
                        .HasColumnType("integer")
                        .HasColumnName("SP_JYOKEN");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<int>("TargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TARGET_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id", "HpId", "ItemCd1", "SeqNo", "UserSetting");

                    b.HasIndex(new[] { "HpId", "ItemCd1", "HaihanKbn", "StartDate", "EndDate", "TargetKbn", "IsInvalid" }, "DENSI_HAIHAN_WEEK_IDX03");

                    b.ToTable("DENSI_HAIHAN_WEEK");
                });

            modelBuilder.Entity("Entity.Tenant.DensiHojyo", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(2);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("HaihanDay")
                        .HasColumnType("integer")
                        .HasColumnName("HAIHAN_DAY");

                    b.Property<int>("HaihanKarte")
                        .HasColumnType("integer")
                        .HasColumnName("HAIHAN_KARTE");

                    b.Property<int>("HaihanMonth")
                        .HasColumnType("integer")
                        .HasColumnName("HAIHAN_MONTH");

                    b.Property<int>("HaihanWeek")
                        .HasColumnType("integer")
                        .HasColumnName("HAIHAN_WEEK");

                    b.Property<string>("HoukatuGrpNo1")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("HOUKATU_GRP_NO1");

                    b.Property<string>("HoukatuGrpNo2")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("HOUKATU_GRP_NO2");

                    b.Property<string>("HoukatuGrpNo3")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("HOUKATU_GRP_NO3");

                    b.Property<int>("HoukatuTerm1")
                        .HasColumnType("integer")
                        .HasColumnName("HOUKATU_TERM1");

                    b.Property<int>("HoukatuTerm2")
                        .HasColumnType("integer")
                        .HasColumnName("HOUKATU_TERM2");

                    b.Property<int>("HoukatuTerm3")
                        .HasColumnType("integer")
                        .HasColumnName("HOUKATU_TERM3");

                    b.Property<int>("NyuinId")
                        .HasColumnType("integer")
                        .HasColumnName("NYUIN_ID");

                    b.Property<int>("SanteiKaisu")
                        .HasColumnType("integer")
                        .HasColumnName("SANTEI_KAISU");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "ItemCd", "StartDate");

                    b.ToTable("DENSI_HOJYO");
                });

            modelBuilder.Entity("Entity.Tenant.DensiHoukatu", b =>
                {
                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(3);

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("UserSetting")
                        .HasColumnType("integer")
                        .HasColumnName("USER_SETTING")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<string>("HoukatuGrpNo")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("HOUKATU_GRP_NO");

                    b.Property<int>("HoukatuTerm")
                        .HasColumnType("integer")
                        .HasColumnName("HOUKATU_TERM");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("IS_INVALID");

                    b.Property<int>("TargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TARGET_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("StartDate", "HpId", "ItemCd", "SeqNo", "UserSetting");

                    b.ToTable("DENSI_HOUKATU");
                });

            modelBuilder.Entity("Entity.Tenant.DensiHoukatuGrp", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("HoukatuGrpNo")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("HOUKATU_GRP_NO")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(5);

                    b.Property<int>("UserSetting")
                        .HasColumnType("integer")
                        .HasColumnName("USER_SETTING")
                        .HasColumnOrder(6);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("IS_INVALID");

                    b.Property<int>("SpJyoken")
                        .HasColumnType("integer")
                        .HasColumnName("SP_JYOKEN");

                    b.Property<int>("TargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TARGET_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "HoukatuGrpNo", "ItemCd", "SeqNo", "UserSetting", "StartDate");

                    b.HasIndex(new[] { "HpId", "ItemCd", "StartDate", "EndDate", "TargetKbn", "IsInvalid" }, "DENSI_HOUKATU_GRP_IDX02");

                    b.ToTable("DENSI_HOUKATU_GRP");
                });

            modelBuilder.Entity("Entity.Tenant.DensiSanteiKaisu", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("UserSetting")
                        .HasColumnType("integer")
                        .HasColumnName("USER_SETTING")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("IS_INVALID");

                    b.Property<int>("ItemGrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("ITEM_GRP_CD");

                    b.Property<int>("MaxCount")
                        .HasColumnType("integer")
                        .HasColumnName("MAX_COUNT");

                    b.Property<int>("SpJyoken")
                        .HasColumnType("integer")
                        .HasColumnName("SP_JYOKEN");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<int>("TargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TARGET_KBN");

                    b.Property<int>("TermCount")
                        .HasColumnType("integer")
                        .HasColumnName("TERM_COUNT");

                    b.Property<int>("TermSbt")
                        .HasColumnType("integer")
                        .HasColumnName("TERM_SBT");

                    b.Property<int>("UnitCd")
                        .HasColumnType("integer")
                        .HasColumnName("UNIT_CD");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "Id", "ItemCd", "SeqNo", "UserSetting");

                    b.ToTable("DENSI_SANTEI_KAISU");
                });

            modelBuilder.Entity("Entity.Tenant.DocCategoryMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("CategoryCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CATEGORY_CD")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryCd"));

                    b.Property<string>("CategoryName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("CATEGORY_NAME");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "CategoryCd");

                    b.ToTable("DOC_CATEGORY_MST");
                });

            modelBuilder.Entity("Entity.Tenant.DocComment", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CATEGORY_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("CATEGORY_NAME");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("ReplaceWord")
                        .HasColumnType("text")
                        .HasColumnName("REPLACE_WORD");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("CategoryId");

                    b.ToTable("DOC_COMMENT");
                });

            modelBuilder.Entity("Entity.Tenant.DocCommentDetail", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("CATEGORY_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("EdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("EDA_NO")
                        .HasColumnOrder(2);

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("COMMENT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("CategoryId", "EdaNo");

                    b.ToTable("DOC_COMMENT_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.DocInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE")
                        .HasColumnOrder(3);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(5);

                    b.Property<int>("CategoryCd")
                        .HasColumnType("integer")
                        .HasColumnName("CATEGORY_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("DspFileName")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("DSP_FILE_NAME");

                    b.Property<string>("FileName")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("FILE_NAME");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsLocked")
                        .HasColumnType("integer")
                        .HasColumnName("IS_LOCKED");

                    b.Property<DateTime?>("LockDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LOCK_DATE");

                    b.Property<int>("LockId")
                        .HasColumnType("integer")
                        .HasColumnName("LOCK_ID");

                    b.Property<string>("LockMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("LOCK_MACHINE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SinDate", "RaiinNo", "SeqNo");

                    b.ToTable("DOC_INF");
                });

            modelBuilder.Entity("Entity.Tenant.DosageDosage", b =>
                {
                    b.Property<string>("DoeiCd")
                        .HasColumnType("text")
                        .HasColumnName("DOEI_CD")
                        .HasColumnOrder(1);

                    b.Property<int>("DoeiSeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("DOEI_SEQ_NO")
                        .HasColumnOrder(2);

                    b.Property<int>("AddTerm")
                        .HasColumnType("integer")
                        .HasColumnName("ADD_TERM");

                    b.Property<string>("AddTermUnit")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("ADD_TERM_UNIT");

                    b.Property<int>("AfterMeal")
                        .HasColumnType("integer")
                        .HasColumnName("AFTER_MEAL");

                    b.Property<string>("AgeCd")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("AGE_CD");

                    b.Property<double>("AgeOver")
                        .HasColumnType("double precision")
                        .HasColumnName("AGE_OVER");

                    b.Property<double>("AgeUnder")
                        .HasColumnType("double precision")
                        .HasColumnName("AGE_UNDER");

                    b.Property<int>("BeforeMeal")
                        .HasColumnType("integer")
                        .HasColumnName("BEFORE_MEAL");

                    b.Property<int>("BetweenMeal")
                        .HasColumnType("integer")
                        .HasColumnName("BETWEEN_MEAL");

                    b.Property<double>("BodyOver")
                        .HasColumnType("double precision")
                        .HasColumnName("BODY_OVER");

                    b.Property<double>("BodyUnder")
                        .HasColumnType("double precision")
                        .HasColumnName("BODY_UNDER");

                    b.Property<string>("CombiDrug")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("COMBI_DRUG");

                    b.Property<double>("DayLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("DAY_LIMIT");

                    b.Property<string>("DayLimitUnit")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("DAY_LIMIT_UNIT");

                    b.Property<double>("DayMax")
                        .HasColumnType("double precision")
                        .HasColumnName("DAY_MAX");

                    b.Property<double>("DayMaxCnt")
                        .HasColumnType("double precision")
                        .HasColumnName("DAY_MAX_CNT");

                    b.Property<double>("DayMin")
                        .HasColumnType("double precision")
                        .HasColumnName("DAY_MIN");

                    b.Property<double>("DayMinCnt")
                        .HasColumnType("double precision")
                        .HasColumnName("DAY_MIN_CNT");

                    b.Property<string>("DayUnit")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("DAY_UNIT");

                    b.Property<int>("Daytime")
                        .HasColumnType("integer")
                        .HasColumnName("DAYTIME");

                    b.Property<string>("DecFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("DEC_FLG");

                    b.Property<double>("DecLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("DEC_LIMIT");

                    b.Property<string>("DosageAddFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("DOSAGE_ADD_FLG");

                    b.Property<string>("DosageCheckFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("DOSAGE_CHECK_FLG");

                    b.Property<int>("DosageLimitTerm")
                        .HasColumnType("integer")
                        .HasColumnName("DOSAGE_LIMIT_TERM");

                    b.Property<string>("DosageLimitUnit")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("DOSAGE_LIMIT_UNIT");

                    b.Property<string>("DrugCondition")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("DRUG_CONDITION");

                    b.Property<int>("DrugLinkCd")
                        .HasColumnType("integer")
                        .HasColumnName("DRUG_LINK_CD");

                    b.Property<int>("DrugOrder")
                        .HasColumnType("integer")
                        .HasColumnName("DRUG_ORDER");

                    b.Property<string>("DrugRoute")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("DRUG_ROUTE");

                    b.Property<string>("DrugSyugi")
                        .HasColumnType("text")
                        .HasColumnName("DRUG_SYUGI");

                    b.Property<int>("ElseTime")
                        .HasColumnType("integer")
                        .HasColumnName("ELSE_TIME");

                    b.Property<string>("ExtendFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("EXTEND_FLG");

                    b.Property<string>("FilenameCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("FILENAME_CD");

                    b.Property<string>("HaitaFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("HAITA_FLG");

                    b.Property<string>("IncDecFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("INC_DEC_FLG");

                    b.Property<int>("IncDecInterval")
                        .HasColumnType("integer")
                        .HasColumnName("INC_DEC_INTERVAL");

                    b.Property<string>("IncDecIntervalUnit")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("INC_DEC_INTERVAL_UNIT");

                    b.Property<string>("IncDecLimitUnit")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("INC_DEC_LIMIT_UNIT");

                    b.Property<double>("IncLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("INC_LIMIT");

                    b.Property<string>("IntervalWarningFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("INTERVAL_WARNING_FLG");

                    b.Property<int>("JudgeTerm")
                        .HasColumnType("integer")
                        .HasColumnName("JUDGE_TERM");

                    b.Property<string>("JudgeTermUnit")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("JUDGE_TERM_UNIT");

                    b.Property<int>("JustAfterMeal")
                        .HasColumnType("integer")
                        .HasColumnName("JUST_AFTER_MEAL");

                    b.Property<int>("JustBeforeMeal")
                        .HasColumnType("integer")
                        .HasColumnName("JUST_BEFORE_MEAL");

                    b.Property<string>("KensaPcd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("KENSA_PCD");

                    b.Property<string>("Kisyakueki")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("KISYAKUEKI");

                    b.Property<string>("Konokoka")
                        .HasColumnType("text")
                        .HasColumnName("KONOKOKA");

                    b.Property<string>("KonokokaCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("KONOKOKA_CD");

                    b.Property<string>("KyugenCd")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("KYUGEN_CD");

                    b.Property<int>("Morning")
                        .HasColumnType("integer")
                        .HasColumnName("MORNING");

                    b.Property<string>("NgKisyakueki")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("NG_KISYAKUEKI");

                    b.Property<string>("NgYoukaieki")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("NG_YOUKAIEKI");

                    b.Property<int>("Night")
                        .HasColumnType("integer")
                        .HasColumnName("NIGHT");

                    b.Property<double>("OnceLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("ONCE_LIMIT");

                    b.Property<string>("OnceLimitUnit")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("ONCE_LIMIT_UNIT");

                    b.Property<double>("OnceMax")
                        .HasColumnType("double precision")
                        .HasColumnName("ONCE_MAX");

                    b.Property<double>("OnceMin")
                        .HasColumnType("double precision")
                        .HasColumnName("ONCE_MIN");

                    b.Property<string>("OnceUnit")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("ONCE_UNIT");

                    b.Property<int>("Rise")
                        .HasColumnType("integer")
                        .HasColumnName("RISE");

                    b.Property<string>("SingleDrugFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("SINGLE_DRUG_FLG");

                    b.Property<int>("Sleep")
                        .HasColumnType("integer")
                        .HasColumnName("SLEEP");

                    b.Property<string>("TekioBui")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("TEKIO_BUI");

                    b.Property<string>("TimeDepend")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("TIME_DEPEND");

                    b.Property<double>("UnittermLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("UNITTERM_LIMIT");

                    b.Property<string>("UnittermUnit")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("UNITTERM_UNIT");

                    b.Property<string>("UsageDosage")
                        .HasColumnType("text")
                        .HasColumnName("USAGE_DOSAGE");

                    b.Property<string>("UseFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("USE_FLG");

                    b.Property<double>("WeightOver")
                        .HasColumnType("double precision")
                        .HasColumnName("WEIGHT_OVER");

                    b.Property<double>("WeightUnder")
                        .HasColumnType("double precision")
                        .HasColumnName("WEIGHT_UNDER");

                    b.Property<string>("YoukaiKisyaku")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)")
                        .HasColumnName("YOUKAI_KISYAKU");

                    b.Property<string>("Youkaieki")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("YOUKAIEKI");

                    b.HasKey("DoeiCd", "DoeiSeqNo");

                    b.ToTable("M46_DOSAGE_DOSAGE");
                });

            modelBuilder.Entity("Entity.Tenant.DosageDrug", b =>
                {
                    b.Property<string>("DoeiCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("DOEI_CD")
                        .HasColumnOrder(2);

                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("YJ_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("DgurKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("DRUG_KBN");

                    b.Property<string>("KikakiUnit")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("KIKAKU_UNIT");

                    b.Property<decimal>("RikikaRate")
                        .HasColumnType("numeric")
                        .HasColumnName("RIKIKA_RATE");

                    b.Property<string>("RikikaUnit")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("RIKIKA_UNIT");

                    b.Property<string>("YakkaiUnit")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("YAKKA_UNIT");

                    b.Property<string>("YoukaiekiCd")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("YOUKAIEKI_CD");

                    b.HasKey("DoeiCd", "YjCd");

                    b.ToTable("M46_DOSAGE_DRUG");
                });

            modelBuilder.Entity("Entity.Tenant.DosageMst", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<double>("DayLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("DAY_LIMIT");

                    b.Property<double>("DayMax")
                        .HasColumnType("double precision")
                        .HasColumnName("DAY_MAX");

                    b.Property<double>("DayMin")
                        .HasColumnType("double precision")
                        .HasColumnName("DAY_MIN");

                    b.Property<int>("DayUnit")
                        .HasColumnType("integer")
                        .HasColumnName("DAY_UNIT");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<double>("OnceLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("ONCE_LIMIT");

                    b.Property<double>("OnceMax")
                        .HasColumnType("double precision")
                        .HasColumnName("ONCE_MAX");

                    b.Property<double>("OnceMin")
                        .HasColumnType("double precision")
                        .HasColumnName("ONCE_MIN");

                    b.Property<int>("OnceUnit")
                        .HasColumnType("integer")
                        .HasColumnName("ONCE_UNIT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id", "HpId", "ItemCd", "SeqNo");

                    b.ToTable("DOSAGE_MST");
                });

            modelBuilder.Entity("Entity.Tenant.DrugDayLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("LimitDay")
                        .HasColumnType("integer")
                        .HasColumnName("LIMIT_DAY");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id", "HpId", "ItemCd", "SeqNo");

                    b.ToTable("DRUG_DAY_LIMIT");
                });

            modelBuilder.Entity("Entity.Tenant.DrugInf", b =>
                {
                    b.Property<int>("InfKbn")
                        .HasColumnType("integer")
                        .HasColumnName("INF_KBN")
                        .HasColumnOrder(3);

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("DrugInfo")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("DRUG_INF");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("InfKbn", "HpId", "ItemCd", "SeqNo");

                    b.HasIndex(new[] { "HpId", "ItemCd", "InfKbn", "IsDeleted" }, "DRUG_INF_UKEY01");

                    b.ToTable("DRUG_INF");
                });

            modelBuilder.Entity("Entity.Tenant.DrugUnitConv", b =>
                {
                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(1);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(2);

                    b.Property<double>("CnvVal")
                        .HasColumnType("double precision")
                        .HasColumnName("CNV_VAL");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("ItemCd", "StartDate");

                    b.ToTable("DRUG_UNIT_CONV");
                });

            modelBuilder.Entity("Entity.Tenant.EventMst", b =>
                {
                    b.Property<string>("EventCd")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("EVENT_CD")
                        .HasColumnOrder(1);

                    b.Property<int>("AuditTrailing")
                        .HasColumnType("integer")
                        .HasColumnName("AUDIT_TRAILING");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("EventName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("EVENT_NAME");

                    b.HasKey("EventCd");

                    b.ToTable("EVENT_MST");
                });

            modelBuilder.Entity("Entity.Tenant.ExceptHokensya", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("PrefNo")
                        .HasColumnType("integer")
                        .HasColumnName("PREF_NO")
                        .HasColumnOrder(3);

                    b.Property<int>("HokenNo")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_EDA_NO")
                        .HasColumnOrder(5);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("HokensyaNo")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("HOKENSYA_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id", "HpId", "PrefNo", "HokenNo", "HokenEdaNo", "StartDate");

                    b.ToTable("EXCEPT_HOKENSYA");
                });

            modelBuilder.Entity("Entity.Tenant.FilingAutoImp", b =>
                {
                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("CategoryCd")
                        .HasColumnType("integer")
                        .HasColumnName("CATEGORY_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("ImpPath")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("IMP_PATH");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("Machine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("MACHINE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("SeqNo", "HpId");

                    b.ToTable("FILING_AUTO_IMP");
                });

            modelBuilder.Entity("Entity.Tenant.FilingCategoryMst", b =>
                {
                    b.Property<int>("CategoryCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("CATEGORY_CD")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryCd"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("CategoryName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("CATEGORY_NAME");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("DspKanzok")
                        .HasColumnType("integer")
                        .HasColumnName("DSP_KANZOK");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsFileDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_FILE_DELETED");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("CategoryCd", "HpId");

                    b.ToTable("FILING_CATEGORY_MST");
                });

            modelBuilder.Entity("Entity.Tenant.FilingInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("FILE_ID")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FileId"));

                    b.Property<int>("CategoryCd")
                        .HasColumnType("integer")
                        .HasColumnName("CATEGORY_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("DspFileName")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("DSP_FILE_NAME");

                    b.Property<string>("FileName")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("FILE_NAME");

                    b.Property<int>("FileNo")
                        .HasColumnType("integer")
                        .HasColumnName("FILE_NO")
                        .HasColumnOrder(5);

                    b.Property<int>("GetDate")
                        .HasColumnType("integer")
                        .HasColumnName("GET_DATE")
                        .HasColumnOrder(4);

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "FileId");

                    b.HasIndex(new[] { "PtId", "GetDate", "FileNo", "CategoryCd" }, "FILING_INF_IDX01");

                    b.ToTable("FILING_INF");
                });

            modelBuilder.Entity("Entity.Tenant.FunctionMst", b =>
                {
                    b.Property<string>("FunctionCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("FUNCTION_CD")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("FunctionName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("FUNCTION_NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("FunctionCd");

                    b.HasIndex(new[] { "FunctionCd" }, "FUNCTION_MST_PKEY");

                    b.ToTable("FUNCTION_MST");
                });

            modelBuilder.Entity("Entity.Tenant.GcStdMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("StdKbn")
                        .HasColumnType("integer")
                        .HasColumnName("STD_KBN")
                        .HasColumnOrder(2);

                    b.Property<int>("Sex")
                        .HasColumnType("integer")
                        .HasColumnName("SEX")
                        .HasColumnOrder(3);

                    b.Property<double>("Point")
                        .HasColumnType("double precision")
                        .HasColumnName("POINT")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<double>("Per03")
                        .HasColumnType("double precision")
                        .HasColumnName("PER_03");

                    b.Property<double>("Per10")
                        .HasColumnType("double precision")
                        .HasColumnName("PER_10");

                    b.Property<double>("Per25")
                        .HasColumnType("double precision")
                        .HasColumnName("PER_25");

                    b.Property<double>("Per50")
                        .HasColumnType("double precision")
                        .HasColumnName("PER_50");

                    b.Property<double>("Per75")
                        .HasColumnType("double precision")
                        .HasColumnName("PER_75");

                    b.Property<double>("Per90")
                        .HasColumnType("double precision")
                        .HasColumnName("PER_90");

                    b.Property<double>("Per97")
                        .HasColumnType("double precision")
                        .HasColumnName("PER_97");

                    b.Property<double>("SdAvg")
                        .HasColumnType("double precision")
                        .HasColumnName("SD_AVG");

                    b.Property<double>("SdM10")
                        .HasColumnType("double precision")
                        .HasColumnName("SD_M10");

                    b.Property<double>("SdM20")
                        .HasColumnType("double precision")
                        .HasColumnName("SD_M20");

                    b.Property<double>("SdM25")
                        .HasColumnType("double precision")
                        .HasColumnName("SD_M25");

                    b.Property<double>("SdP10")
                        .HasColumnType("double precision")
                        .HasColumnName("SD_P10");

                    b.Property<double>("SdP20")
                        .HasColumnType("double precision")
                        .HasColumnName("SD_P20");

                    b.Property<double>("SdP25")
                        .HasColumnType("double precision")
                        .HasColumnName("SD_P25");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "StdKbn", "Sex", "Point");

                    b.ToTable("GC_STD_MST");
                });

            modelBuilder.Entity("Entity.Tenant.HokenMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("PrefNo")
                        .HasColumnType("integer")
                        .HasColumnName("PREF_NO")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenNo")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_NO")
                        .HasColumnOrder(3);

                    b.Property<int>("HokenEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_EDA_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(5);

                    b.Property<int>("AgeEnd")
                        .HasColumnType("integer")
                        .HasColumnName("AGE_END");

                    b.Property<int>("AgeStart")
                        .HasColumnType("integer")
                        .HasColumnName("AGE_START");

                    b.Property<int>("CalcSpKbn")
                        .HasColumnType("integer")
                        .HasColumnName("CALC_SP_KBN");

                    b.Property<int>("CheckDigit")
                        .HasColumnType("integer")
                        .HasColumnName("CHECK_DIGIT");

                    b.Property<int>("CountKbn")
                        .HasColumnType("integer")
                        .HasColumnName("COUNT_KBN");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("DayLimitCount")
                        .HasColumnType("integer")
                        .HasColumnName("DAY_LIMIT_COUNT");

                    b.Property<int>("DayLimitFutan")
                        .HasColumnType("integer")
                        .HasColumnName("DAY_LIMIT_FUTAN");

                    b.Property<int>("EnTen")
                        .HasColumnType("integer")
                        .HasColumnName("EN_TEN");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("FutanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("FUTAN_KBN");

                    b.Property<int>("FutanRate")
                        .HasColumnType("integer")
                        .HasColumnName("FUTAN_RATE");

                    b.Property<int>("FutanYusen")
                        .HasColumnType("integer")
                        .HasColumnName("FUTAN_YUSEN");

                    b.Property<int>("HokenKohiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_KOHI_KBN");

                    b.Property<string>("HokenName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("HOKEN_NAME");

                    b.Property<string>("HokenNameCd")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("HOKEN_NAME_CD");

                    b.Property<int>("HokenSbtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_SBT_KBN");

                    b.Property<string>("HokenSname")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("HOKEN_SNAME");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("HOUBETU");

                    b.Property<int>("IsFutansyaNoCheck")
                        .HasColumnType("integer")
                        .HasColumnName("IS_FUTANSYA_NO_CHECK");

                    b.Property<int>("IsJyukyusyaNoCheck")
                        .HasColumnType("integer")
                        .HasColumnName("IS_JYUKYUSYA_NO_CHECK");

                    b.Property<int>("IsLimitList")
                        .HasColumnType("integer")
                        .HasColumnName("IS_LIMIT_LIST");

                    b.Property<int>("IsLimitListSum")
                        .HasColumnType("integer")
                        .HasColumnName("IS_LIMIT_LIST_SUM");

                    b.Property<int>("IsOtherPrefValid")
                        .HasColumnType("integer")
                        .HasColumnName("IS_OTHER_PREF_VALID");

                    b.Property<int>("IsTokusyuNoCheck")
                        .HasColumnType("integer")
                        .HasColumnName("IS_TOKUSYU_NO_CHECK");

                    b.Property<int>("JyukyuCheckDigit")
                        .HasColumnType("integer")
                        .HasColumnName("JYUKYU_CHECK_DIGIT");

                    b.Property<int>("KaiFutangaku")
                        .HasColumnType("integer")
                        .HasColumnName("KAI_FUTANGAKU");

                    b.Property<int>("KaiLimitFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KAI_LIMIT_FUTAN");

                    b.Property<int>("KogakuHairyoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_HAIRYO_KBN");

                    b.Property<int>("KogakuTekiyo")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_TEKIYO");

                    b.Property<int>("KogakuTotalAll")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_TOTAL_ALL");

                    b.Property<int>("KogakuTotalExcFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_TOTAL_EXC_FUTAN");

                    b.Property<int>("KogakuTotalKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_TOTAL_KBN");

                    b.Property<int>("LimitKbn")
                        .HasColumnType("integer")
                        .HasColumnName("LIMIT_KBN");

                    b.Property<int>("MonthLimitCount")
                        .HasColumnType("integer")
                        .HasColumnName("MONTH_LIMIT_COUNT");

                    b.Property<int>("MonthLimitFutan")
                        .HasColumnType("integer")
                        .HasColumnName("MONTH_LIMIT_FUTAN");

                    b.Property<int>("MonthSpLimit")
                        .HasColumnType("integer")
                        .HasColumnName("MONTH_SP_LIMIT");

                    b.Property<int>("ReceFutanHide")
                        .HasColumnType("integer")
                        .HasColumnName("RECE_FUTAN_HIDE");

                    b.Property<int>("ReceFutanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("RECE_FUTAN_KBN");

                    b.Property<int>("ReceFutanRound")
                        .HasColumnType("integer")
                        .HasColumnName("RECE_FUTAN_ROUND");

                    b.Property<int>("ReceKisai")
                        .HasColumnType("integer")
                        .HasColumnName("RECE_KISAI");

                    b.Property<int>("ReceKisai2")
                        .HasColumnType("integer")
                        .HasColumnName("RECE_KISAI2");

                    b.Property<int>("ReceKisaiKokho")
                        .HasColumnType("integer")
                        .HasColumnName("RECE_KISAI_KOKHO");

                    b.Property<int>("ReceSeikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("RECE_SEIKYU_KBN");

                    b.Property<int>("ReceSpKbn")
                        .HasColumnType("integer")
                        .HasColumnName("RECE_SP_KBN");

                    b.Property<int>("ReceTenKisai")
                        .HasColumnType("integer")
                        .HasColumnName("RECE_TEN_KISAI");

                    b.Property<int>("ReceZeroKisai")
                        .HasColumnType("integer")
                        .HasColumnName("RECE_ZERO_KISAI");

                    b.Property<int>("SeikyuYm")
                        .HasColumnType("integer")
                        .HasColumnName("SEIKYU_YM");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PrefNo", "HokenNo", "HokenEdaNo", "StartDate");

                    b.ToTable("HOKEN_MST");
                });

            modelBuilder.Entity("Entity.Tenant.HokensyaMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("HokensyaNo")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("HOKENSYA_NO")
                        .HasColumnOrder(2);

                    b.Property<string>("Address1")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("ADDRESS1");

                    b.Property<string>("Address2")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("ADDRESS2");

                    b.Property<string>("Bango")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("BANGO");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("DeleteDate")
                        .HasColumnType("integer")
                        .HasColumnName("DELETE_DATE");

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_KBN");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("HOUBETU");

                    b.Property<string>("HoubetuKbn")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("HOUBETU_KBN");

                    b.Property<int>("IsDelete")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsKigoNa")
                        .HasColumnType("integer")
                        .HasColumnName("IS_KIGO_NA");

                    b.Property<string>("KanaName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("KANA_NAME");

                    b.Property<string>("Kigo")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("KIGO");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NAME");

                    b.Property<string>("PostCode")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("POST_CODE");

                    b.Property<int>("PrefNo")
                        .HasColumnType("integer")
                        .HasColumnName("PREF_NO");

                    b.Property<int>("RateHonnin")
                        .HasColumnType("integer")
                        .HasColumnName("RATE_HONNIN");

                    b.Property<int>("RateKazoku")
                        .HasColumnType("integer")
                        .HasColumnName("RATE_KAZOKU");

                    b.Property<string>("Tel1")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("TEL1");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "HokensyaNo");

                    b.ToTable("HOKENSYA_MST");
                });

            modelBuilder.Entity("Entity.Tenant.HolidayMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HolidayKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HOLIDAY_KBN");

                    b.Property<string>("HolidayName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("HOLIDAY_NAME");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("KyusinKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KYUSIN_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "SinDate", "SeqNo");

                    b.HasIndex(new[] { "HpId", "SinDate", "IsDeleted" }, "HOLIDAY_MST_UKEY01");

                    b.ToTable("HOLIDAY_MST");
                });

            modelBuilder.Entity("Entity.Tenant.HpInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(2);

                    b.Property<string>("Address1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ADDRESS1");

                    b.Property<string>("Address2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ADDRESS2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("FaxNo")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("FAX_NO");

                    b.Property<string>("HpCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("HP_CD");

                    b.Property<string>("HpName")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("HP_NAME");

                    b.Property<string>("KaisetuName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("KAISETU_NAME");

                    b.Property<string>("OtherContacts")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OTHER_CONTACTS");

                    b.Property<string>("PostCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("POST_CD");

                    b.Property<int>("PrefNo")
                        .HasColumnType("integer")
                        .HasColumnName("PREF_NO");

                    b.Property<string>("ReceHpName")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("RECE_HP_NAME");

                    b.Property<string>("RousaiHpCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("ROUSAI_HP_CD");

                    b.Property<string>("Tel")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("TEL");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "StartDate");

                    b.ToTable("HP_INF");
                });

            modelBuilder.Entity("Entity.Tenant.IpnKasanExclude", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(3);

                    b.Property<string>("IpnNameCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("IPN_NAME_CD")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "StartDate", "IpnNameCd", "SeqNo");

                    b.HasIndex(new[] { "HpId", "StartDate", "EndDate", "IpnNameCd" }, "IPN_KASAN_EXCLUDE_IDX01");

                    b.ToTable("IPN_KASAN_EXCLUDE");
                });

            modelBuilder.Entity("Entity.Tenant.IpnKasanExcludeItem", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(3);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "StartDate", "ItemCd");

                    b.HasIndex(new[] { "HpId", "StartDate", "EndDate", "ItemCd" }, "IPN_KASAN_EXCLUDE_ITEM_IDX01");

                    b.ToTable("IPN_KASAN_EXCLUDE_ITEM");
                });

            modelBuilder.Entity("Entity.Tenant.IpnKasanMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(3);

                    b.Property<string>("IpnNameCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("IPN_NAME_CD")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("Kasan1")
                        .HasColumnType("integer")
                        .HasColumnName("KASAN1");

                    b.Property<int>("Kasan2")
                        .HasColumnType("integer")
                        .HasColumnName("KASAN2");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "StartDate", "IpnNameCd", "SeqNo");

                    b.ToTable("IPN_KASAN_MST");
                });

            modelBuilder.Entity("Entity.Tenant.IpnMinYakkaMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IpnNameCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("IPN_NAME_CD")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<double>("Yakka")
                        .HasColumnType("double precision")
                        .HasColumnName("YAKKA");

                    b.HasKey("HpId", "Id", "IpnNameCd", "SeqNo");

                    b.HasIndex(new[] { "HpId", "IpnNameCd", "StartDate" }, "IPN_MIN_YAKKA_MST_IDX01");

                    b.HasIndex(new[] { "HpId", "StartDate", "EndDate", "IpnNameCd" }, "IPN_MIN_YAKKA_MST_IDX02");

                    b.ToTable("IPN_MIN_YAKKA_MST");
                });

            modelBuilder.Entity("Entity.Tenant.IpnNameMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("IpnNameCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("IPN_NAME_CD")
                        .HasColumnOrder(2);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<string>("IpnName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("IPN_NAME");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "IpnNameCd", "StartDate", "SeqNo");

                    b.HasIndex(new[] { "IpnNameCd" }, "IPN_NAME_MST_IDX01");

                    b.ToTable("IPN_NAME_MST");
                });

            modelBuilder.Entity("Entity.Tenant.ItemGrpMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("GrpSbt")
                        .HasColumnType("bigint")
                        .HasColumnName("GRP_SBT")
                        .HasColumnOrder(2);

                    b.Property<long>("ItemGrpCd")
                        .HasColumnType("bigint")
                        .HasColumnName("ITEM_GRP_CD")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(5);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GrpSbt", "ItemGrpCd", "SeqNo", "StartDate");

                    b.ToTable("ITEM_GRP_MST");
                });

            modelBuilder.Entity("Entity.Tenant.JihiSbtMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("JihiSbt")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_SBT")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsYobo")
                        .HasColumnType("integer")
                        .HasColumnName("IS_YOBO");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NAME");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "JihiSbt");

                    b.ToTable("JIHI_SBT_MST");
                });

            modelBuilder.Entity("Entity.Tenant.JobMst", b =>
                {
                    b.Property<int>("JobCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("JOB_CD")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JobCd"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("JobName")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("JOB_NAME");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("JobCd", "HpId");

                    b.ToTable("JOB_MST");
                });

            modelBuilder.Entity("Entity.Tenant.JsonSetting", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("USER_ID");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("KEY");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("VALUE");

                    b.HasKey("UserId", "Key");

                    b.ToTable("JSON_SETTING");
                });

            modelBuilder.Entity("Entity.Tenant.KaMst", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("KaId")
                        .HasColumnType("integer")
                        .HasColumnName("KA_ID");

                    b.Property<string>("KaName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("KA_NAME");

                    b.Property<string>("KaSname")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("KA_SNAME");

                    b.Property<string>("ReceKaCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("RECE_KA_CD");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<string>("YousikiKaCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("YOUSIKI_KA_CD");

                    b.HasKey("Id", "HpId");

                    b.HasIndex(new[] { "KaId" }, "PT_KA_MST_IDX01");

                    b.ToTable("KA_MST");
                });

            modelBuilder.Entity("Entity.Tenant.KacodeMst", b =>
                {
                    b.Property<string>("ReceKaCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("RECE_KA_CD")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("KaName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("KA_NAME");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("ReceKaCd");

                    b.ToTable("KACODE_MST");
                });

            modelBuilder.Entity("Entity.Tenant.KaikeiDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE")
                        .HasColumnOrder(3);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_PID")
                        .HasColumnOrder(5);

                    b.Property<int>("AdjustPid")
                        .HasColumnType("integer")
                        .HasColumnName("ADJUST_PID")
                        .HasColumnOrder(6);

                    b.Property<int>("AdjustKid")
                        .HasColumnType("integer")
                        .HasColumnName("ADJUST_KID");

                    b.Property<int>("AdjustRound")
                        .HasColumnType("integer")
                        .HasColumnName("ADJUST_ROUND");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EnTen")
                        .HasColumnType("integer")
                        .HasColumnName("EN_TEN");

                    b.Property<int>("GenmenGaku")
                        .HasColumnType("integer")
                        .HasColumnName("GENMEN_GAKU");

                    b.Property<int>("GenmenGaku10en")
                        .HasColumnType("integer")
                        .HasColumnName("GENMEN_GAKU_10EN");

                    b.Property<int>("GenmenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("GENMEN_KBN");

                    b.Property<int>("HokenFutan")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_FUTAN");

                    b.Property<int>("HokenFutan10en")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_FUTAN_10EN");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID");

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_KBN");

                    b.Property<int>("HokenRate")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_RATE");

                    b.Property<int>("HokenSbtCd")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_SBT_CD");

                    b.Property<int>("HonkeKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HONKE_KBN");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("HOUBETU");

                    b.Property<int>("IchibuFutan")
                        .HasColumnType("integer")
                        .HasColumnName("ICHIBU_FUTAN");

                    b.Property<int>("IchibuFutan10en")
                        .HasColumnType("integer")
                        .HasColumnName("ICHIBU_FUTAN_10EN");

                    b.Property<int>("IsChoki")
                        .HasColumnType("integer")
                        .HasColumnName("IS_CHOKI");

                    b.Property<int>("IsNinpu")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NINPU");

                    b.Property<int>("IsTasukai")
                        .HasColumnType("integer")
                        .HasColumnName("IS_TASUKAI");

                    b.Property<int>("IsTokurei")
                        .HasColumnType("integer")
                        .HasColumnName("IS_TOKUREI");

                    b.Property<int>("IsZaiiso")
                        .HasColumnType("integer")
                        .HasColumnName("IS_ZAIISO");

                    b.Property<int>("JibaiAFutan")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_A_FUTAN");

                    b.Property<int>("JibaiBFutan")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_B_FUTAN");

                    b.Property<int>("JibaiCFutan")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_C_FUTAN");

                    b.Property<int>("JibaiDFutan")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_D_FUTAN");

                    b.Property<int>("JibaiHaFutan")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_HA_FUTAN");

                    b.Property<int>("JibaiHeMeisai")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_HE_MEISAI");

                    b.Property<int>("JibaiHeMeisaiCount")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_HE_MEISAI_COUNT");

                    b.Property<int>("JibaiHoSindan")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_HO_SINDAN");

                    b.Property<int>("JibaiHoSindanCount")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_HO_SINDAN_COUNT");

                    b.Property<int>("JibaiITensu")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_I_TENSU");

                    b.Property<int>("JibaiKenpoFutan")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_KENPO_FUTAN");

                    b.Property<int>("JibaiKenpoTensu")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_KENPO_TENSU");

                    b.Property<int>("JibaiNiFutan")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_NI_FUTAN");

                    b.Property<int>("JibaiRoTensu")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_RO_TENSU");

                    b.Property<int>("JihiFutan")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_FUTAN");

                    b.Property<int>("JihiFutanOuttaxGen")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_FUTAN_OUTTAX_GEN");

                    b.Property<int>("JihiFutanOuttaxNr")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_FUTAN_OUTTAX_NR");

                    b.Property<int>("JihiFutanTaxGen")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_FUTAN_TAX_GEN");

                    b.Property<int>("JihiFutanTaxNr")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_FUTAN_TAX_NR");

                    b.Property<int>("JihiFutanTaxfree")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_FUTAN_TAXFREE");

                    b.Property<int>("JihiOuttax")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_OUTTAX");

                    b.Property<int>("JihiOuttaxGen")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_OUTTAX_GEN");

                    b.Property<int>("JihiOuttaxNr")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_OUTTAX_NR");

                    b.Property<int>("JihiTax")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_TAX");

                    b.Property<int>("JihiTaxGen")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_TAX_GEN");

                    b.Property<int>("JihiTaxNr")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_TAX_NR");

                    b.Property<int>("Jitunisu")
                        .HasColumnType("integer")
                        .HasColumnName("JITUNISU");

                    b.Property<int>("KogakuFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_FUTAN");

                    b.Property<int>("KogakuFutan10en")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_FUTAN_10EN");

                    b.Property<int>("KogakuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_KBN");

                    b.Property<int>("KogakuLimit")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_LIMIT");

                    b.Property<int>("KogakuOverKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_OVER_KBN");

                    b.Property<int>("KogakuTekiyoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_TEKIYO_KBN");

                    b.Property<int>("KogakuTotalKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_TOTAL_KBN");

                    b.Property<int>("Kohi1Futan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_FUTAN");

                    b.Property<int>("Kohi1Futan10en")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_FUTAN_10EN");

                    b.Property<string>("Kohi1Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI1_HOUBETU");

                    b.Property<int>("Kohi1Id")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_ID");

                    b.Property<int>("Kohi1Limit")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_LIMIT");

                    b.Property<int>("Kohi1OtherFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_OTHER_FUTAN");

                    b.Property<string>("Kohi1Priority")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("KOHI1_PRIORITY");

                    b.Property<int>("Kohi2Futan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_FUTAN");

                    b.Property<int>("Kohi2Futan10en")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_FUTAN_10EN");

                    b.Property<string>("Kohi2Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI2_HOUBETU");

                    b.Property<int>("Kohi2Id")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_ID");

                    b.Property<int>("Kohi2Limit")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_LIMIT");

                    b.Property<int>("Kohi2OtherFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_OTHER_FUTAN");

                    b.Property<string>("Kohi2Priority")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("KOHI2_PRIORITY");

                    b.Property<int>("Kohi3Futan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_FUTAN");

                    b.Property<int>("Kohi3Futan10en")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_FUTAN_10EN");

                    b.Property<string>("Kohi3Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI3_HOUBETU");

                    b.Property<int>("Kohi3Id")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_ID");

                    b.Property<int>("Kohi3Limit")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_LIMIT");

                    b.Property<int>("Kohi3OtherFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_OTHER_FUTAN");

                    b.Property<string>("Kohi3Priority")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("KOHI3_PRIORITY");

                    b.Property<int>("Kohi4Futan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_FUTAN");

                    b.Property<int>("Kohi4Futan10en")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_FUTAN_10EN");

                    b.Property<string>("Kohi4Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI4_HOUBETU");

                    b.Property<int>("Kohi4Id")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_ID");

                    b.Property<int>("Kohi4Limit")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_LIMIT");

                    b.Property<int>("Kohi4OtherFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_OTHER_FUTAN");

                    b.Property<string>("Kohi4Priority")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("KOHI4_PRIORITY");

                    b.Property<long>("OyaRaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("OYA_RAIIN_NO");

                    b.Property<int>("PtFutan")
                        .HasColumnType("integer")
                        .HasColumnName("PT_FUTAN");

                    b.Property<int>("PtRate")
                        .HasColumnType("integer")
                        .HasColumnName("PT_RATE");

                    b.Property<string>("ReceSbt")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("RECE_SBT");

                    b.Property<int>("RousaiIFutan")
                        .HasColumnType("integer")
                        .HasColumnName("ROUSAI_I_FUTAN");

                    b.Property<int>("RousaiId")
                        .HasColumnType("integer")
                        .HasColumnName("ROUSAI_ID");

                    b.Property<int>("RousaiRoFutan")
                        .HasColumnType("integer")
                        .HasColumnName("ROUSAI_RO_FUTAN");

                    b.Property<string>("SortKey")
                        .HasMaxLength(61)
                        .HasColumnType("character varying(61)")
                        .HasColumnName("SORT_KEY");

                    b.Property<int>("Tensu")
                        .HasColumnType("integer")
                        .HasColumnName("TENSU");

                    b.Property<int>("TotalIryohi")
                        .HasColumnType("integer")
                        .HasColumnName("TOTAL_IRYOHI");

                    b.Property<int>("TotalKogakuLimit")
                        .HasColumnType("integer")
                        .HasColumnName("TOTAL_KOGAKU_LIMIT");

                    b.Property<int>("TotalPtFutan")
                        .HasColumnType("integer")
                        .HasColumnName("TOTAL_PT_FUTAN");

                    b.HasKey("HpId", "PtId", "SinDate", "RaiinNo", "HokenPid", "AdjustPid");

                    b.ToTable("KAIKEI_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.KaikeiInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE")
                        .HasColumnOrder(3);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID")
                        .HasColumnOrder(5);

                    b.Property<int>("AdjustFutan")
                        .HasColumnType("integer")
                        .HasColumnName("ADJUST_FUTAN");

                    b.Property<int>("AdjustFutanRange")
                        .HasColumnType("integer")
                        .HasColumnName("ADJUST_FUTAN_RANGE");

                    b.Property<int>("AdjustFutanVal")
                        .HasColumnType("integer")
                        .HasColumnName("ADJUST_FUTAN_VAL");

                    b.Property<int>("AdjustRateRange")
                        .HasColumnType("integer")
                        .HasColumnName("ADJUST_RATE_RANGE");

                    b.Property<int>("AdjustRateVal")
                        .HasColumnType("integer")
                        .HasColumnName("ADJUST_RATE_VAL");

                    b.Property<int>("AdjustRound")
                        .HasColumnType("integer")
                        .HasColumnName("ADJUST_ROUND");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("DispRate")
                        .HasColumnType("integer")
                        .HasColumnName("DISP_RATE");

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_KBN");

                    b.Property<int>("HokenRate")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_RATE");

                    b.Property<int>("HokenSbtCd")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_SBT_CD");

                    b.Property<int>("HonkeKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HONKE_KBN");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("HOUBETU");

                    b.Property<int>("JihiFutan")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_FUTAN");

                    b.Property<int>("JihiFutanOuttaxGen")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_FUTAN_OUTTAX_GEN");

                    b.Property<int>("JihiFutanOuttaxNr")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_FUTAN_OUTTAX_NR");

                    b.Property<int>("JihiFutanTaxGen")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_FUTAN_TAX_GEN");

                    b.Property<int>("JihiFutanTaxNr")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_FUTAN_TAX_NR");

                    b.Property<int>("JihiFutanTaxfree")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_FUTAN_TAXFREE");

                    b.Property<int>("JihiOuttax")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_OUTTAX");

                    b.Property<int>("JihiOuttaxGen")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_OUTTAX_GEN");

                    b.Property<int>("JihiOuttaxNr")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_OUTTAX_NR");

                    b.Property<int>("JihiTax")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_TAX");

                    b.Property<int>("JihiTaxGen")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_TAX_GEN");

                    b.Property<int>("JihiTaxNr")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_TAX_NR");

                    b.Property<string>("Kohi1Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI1_HOUBETU");

                    b.Property<int>("Kohi1Id")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_ID");

                    b.Property<string>("Kohi2Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI2_HOUBETU");

                    b.Property<int>("Kohi2Id")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_ID");

                    b.Property<string>("Kohi3Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI3_HOUBETU");

                    b.Property<int>("Kohi3Id")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_ID");

                    b.Property<string>("Kohi4Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI4_HOUBETU");

                    b.Property<int>("Kohi4Id")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_ID");

                    b.Property<int>("PtFutan")
                        .HasColumnType("integer")
                        .HasColumnName("PT_FUTAN");

                    b.Property<int>("PtRate")
                        .HasColumnType("integer")
                        .HasColumnName("PT_RATE");

                    b.Property<string>("ReceSbt")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("RECE_SBT");

                    b.Property<int>("Tensu")
                        .HasColumnType("integer")
                        .HasColumnName("TENSU");

                    b.Property<int>("TotalIryohi")
                        .HasColumnType("integer")
                        .HasColumnName("TOTAL_IRYOHI");

                    b.Property<int>("TotalPtFutan")
                        .HasColumnType("integer")
                        .HasColumnName("TOTAL_PT_FUTAN");

                    b.HasKey("HpId", "PtId", "SinDate", "RaiinNo", "HokenId");

                    b.ToTable("KAIKEI_INF");
                });

            modelBuilder.Entity("Entity.Tenant.KantokuMst", b =>
                {
                    b.Property<string>("RoudouCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("ROUDOU_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("KantokuCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("KANTOKU_CD")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("KantokuName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("KANTOKU_NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.HasKey("RoudouCd", "KantokuCd");

                    b.ToTable("KANTOKU_MST");
                });

            modelBuilder.Entity("Entity.Tenant.KarteFilterDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("USER_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("FilterId")
                        .HasColumnType("bigint")
                        .HasColumnName("FILTER_ID")
                        .HasColumnOrder(3);

                    b.Property<int>("FilterItemCd")
                        .HasColumnType("integer")
                        .HasColumnName("FILTER_ITEM_CD")
                        .HasColumnOrder(4);

                    b.Property<int>("FilterEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("FILTER_EDA_NO")
                        .HasColumnOrder(5);

                    b.Property<string>("Param")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("PARAM");

                    b.Property<int>("Val")
                        .HasColumnType("integer")
                        .HasColumnName("VAL");

                    b.HasKey("HpId", "UserId", "FilterId", "FilterItemCd", "FilterEdaNo");

                    b.ToTable("KARTE_FILTER_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.KarteFilterMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("USER_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("FILTER_ID")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FilterId"));

                    b.Property<int>("AutoApply")
                        .HasColumnType("integer")
                        .HasColumnName("AUTO_APPLY");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("FilterName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("FILTER_NAME");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "UserId", "FilterId");

                    b.ToTable("KARTE_FILTER_MST");
                });

            modelBuilder.Entity("Entity.Tenant.KarteImgInf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("FILE_NAME");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("KarteKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KARTE_KBN");

                    b.Property<string>("Message")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("MESSAGE");

                    b.Property<long>("Position")
                        .HasColumnType("bigint")
                        .HasColumnName("POSITION");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO");

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    b.HasKey("Id");

                    b.ToTable("KARTE_IMG_INF");
                });

            modelBuilder.Entity("Entity.Tenant.KarteInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("KarteKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KARTE_KBN")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<byte[]>("RichText")
                        .HasColumnType("bytea")
                        .HasColumnName("RICH_TEXT");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "RaiinNo", "SeqNo", "KarteKbn");

                    b.HasIndex(new[] { "HpId", "PtId", "KarteKbn" }, "KARTE_INF_IDX01");

                    b.ToTable("KARTE_INF");
                });

            modelBuilder.Entity("Entity.Tenant.KarteKbnMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("KarteKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KARTE_KBN")
                        .HasColumnOrder(2);

                    b.Property<int>("CanImg")
                        .HasColumnType("integer")
                        .HasColumnName("CAN_IMG");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("KbnName")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("KBN_NAME");

                    b.Property<string>("KbnShortName")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("KBN_SHORT_NAME");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "KarteKbn");

                    b.ToTable("KARTE_KBN_MST");
                });

            modelBuilder.Entity("Entity.Tenant.KensaCenterMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CenterCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CENTER_CD");

                    b.Property<string>("CenterName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("CENTER_NAME");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("PrimaryKbn")
                        .HasColumnType("integer")
                        .HasColumnName("PRIMARY_KBN");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "Id");

                    b.ToTable("KENSA_CENTER_MST");
                });

            modelBuilder.Entity("Entity.Tenant.KensaCmtMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasMaxLength(2)
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("CmtCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("CMT_CD")
                        .HasColumnOrder(2);

                    b.Property<int>("CmtSeqNo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(9)
                        .HasColumnType("integer")
                        .HasColumnName("CMT_SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CmtSeqNo"));

                    b.Property<string>("CMT")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CMT");

                    b.Property<string>("CenterCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CENTER_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasMaxLength(8)
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasMaxLength(1)
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasMaxLength(8)
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "CmtCd", "CmtSeqNo");

                    b.HasIndex(new[] { "HpId", "CmtCd", "CmtSeqNo", "IsDeleted" }, "KENSA_CMT_MST_SKEY1");

                    b.ToTable("KENSA_CMT_MST");
                });

            modelBuilder.Entity("Entity.Tenant.KensaInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("IraiCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("IRAI_CD")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IraiCd"));

                    b.Property<string>("Bilirubin")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("BILIRUBIN");

                    b.Property<string>("CenterCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CENTER_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("InoutKbn")
                        .HasColumnType("integer")
                        .HasColumnName("INOUT_KBN");

                    b.Property<int>("IraiDate")
                        .HasColumnType("integer")
                        .HasColumnName("IRAI_DATE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("Nyubi")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("NYUBI");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO");

                    b.Property<int>("ResultCheck")
                        .HasColumnType("integer")
                        .HasColumnName("RESULT_CHECK");

                    b.Property<int>("SikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SIKYU_KBN");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("STATUS");

                    b.Property<int>("TosekiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TOSEKI_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<string>("Yoketu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("YOKETU");

                    b.HasKey("HpId", "PtId", "IraiCd");

                    b.ToTable("KENSA_INF");
                });

            modelBuilder.Entity("Entity.Tenant.KensaInfDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("IraiCd")
                        .HasColumnType("bigint")
                        .HasColumnName("IRAI_CD")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<string>("AbnormalKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("ABNORMAL_KBN");

                    b.Property<string>("CmtCd1")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("CMT_CD1");

                    b.Property<string>("CmtCd2")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("CMT_CD2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IraiDate")
                        .HasColumnType("integer")
                        .HasColumnName("IRAI_DATE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("KensaItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("KENSA_ITEM_CD");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO");

                    b.Property<string>("ResultType")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("RESULT_TYPE");

                    b.Property<string>("ResultVal")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("RESULT_VAL");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "IraiCd", "SeqNo");

                    b.ToTable("KENSA_INF_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.KensaIraiLog", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("CenterCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CENTER_CD")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE")
                        .HasColumnOrder(3);

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("FromDate")
                        .HasColumnType("integer")
                        .HasColumnName("FROM_DATE");

                    b.Property<int>("IraiDate")
                        .HasColumnType("integer")
                        .HasColumnName("IRAI_DATE");

                    b.Property<string>("IraiFile")
                        .HasColumnType("text")
                        .HasColumnName("IRAI_FILE");

                    b.Property<byte[]>("IraiList")
                        .HasColumnType("bytea")
                        .HasColumnName("IRAI_LIST");

                    b.Property<int>("ToDate")
                        .HasColumnType("integer")
                        .HasColumnName("TO_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "CenterCd", "CreateDate");

                    b.ToTable("KENSA_IRAI_LOG");
                });

            modelBuilder.Entity("Entity.Tenant.KensaMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("KensaItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("KENSA_ITEM_CD")
                        .HasColumnOrder(2);

                    b.Property<int>("KensaItemSeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("KENSA_ITEM_SEQ_NO")
                        .HasColumnOrder(3);

                    b.Property<string>("CenterCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CENTER_CD");

                    b.Property<string>("CenterItemCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CENTER_ITEM_CD1");

                    b.Property<string>("CenterItemCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CENTER_ITEM_CD2");

                    b.Property<int>("ContainerCd")
                        .HasColumnType("integer")
                        .HasColumnName("CONTAINER_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("Digit")
                        .HasColumnType("integer")
                        .HasColumnName("DIGIT");

                    b.Property<string>("FemaleStd")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("FEMALE_STD");

                    b.Property<string>("FemaleStdHigh")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("FEMALE_STD_HIGH");

                    b.Property<string>("FemaleStdLow")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("FEMALE_STD_LOW");

                    b.Property<string>("Formula")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("FORMULA");

                    b.Property<int>("IsDelete")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("KensaKana")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("KENSA_KANA");

                    b.Property<string>("KensaName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("KENSA_NAME");

                    b.Property<string>("MaleStd")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("MALE_STD");

                    b.Property<string>("MaleStdHigh")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("MALE_STD_HIGH");

                    b.Property<string>("MaleStdLow")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("MALE_STD_LOW");

                    b.Property<int>("MaterialCd")
                        .HasColumnType("integer")
                        .HasColumnName("MATERIAL_CD");

                    b.Property<string>("OyaItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OYA_ITEM_CD");

                    b.Property<int>("OyaItemSeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("OYA_ITEM_SEQ_NO");

                    b.Property<long>("SortNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SORT_NO");

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("UNIT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "KensaItemCd", "KensaItemSeqNo");

                    b.HasIndex(new[] { "KensaItemCd" }, "KENSA_MST_IDX01");

                    b.ToTable("KENSA_MST");
                });

            modelBuilder.Entity("Entity.Tenant.KensaSet", b =>
                {
                    b.Property<int>("HpId")
                        .HasMaxLength(2)
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("SetId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(9)
                        .HasColumnType("integer")
                        .HasColumnName("SET_ID")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SetId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasMaxLength(8)
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasMaxLength(1)
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("SetName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("SET_NAME");

                    b.Property<int>("SortNo")
                        .HasMaxLength(9)
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasMaxLength(8)
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "SetId");

                    b.HasIndex(new[] { "HpId", "SetId" }, "KENSA_SET_PKEY");

                    b.ToTable("KENSA_SET");
                });

            modelBuilder.Entity("Entity.Tenant.KensaSetDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasMaxLength(2)
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("SetId")
                        .HasMaxLength(9)
                        .HasColumnType("integer")
                        .HasColumnName("SET_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SetEdaNo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(9)
                        .HasColumnType("integer")
                        .HasColumnName("SET_EDA_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SetEdaNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasMaxLength(8)
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasMaxLength(1)
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("KensaItemCd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("KENSA_ITEM_CD");

                    b.Property<int>("KensaItemSeqNo")
                        .HasMaxLength(2)
                        .HasColumnType("integer")
                        .HasColumnName("KENSA_ITEM_SEQ_NO");

                    b.Property<int>("SortNo")
                        .HasMaxLength(9)
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasMaxLength(8)
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "SetId", "SetEdaNo");

                    b.HasIndex(new[] { "HpId", "SetId", "SetEdaNo" }, "KENSA_SET_DETAIL_PKEY");

                    b.ToTable("KENSA_SET_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.KensaStdMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("KensaItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("KENSA_ITEM_CD")
                        .HasColumnOrder(2);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("FemaleStd")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("FEMALE_STD");

                    b.Property<string>("FemaleStdHigh")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("FEMALE_STD_HIGH");

                    b.Property<string>("FemaleStdLow")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("FEMALE_STD_LOW");

                    b.Property<string>("MaleStd")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("MALE_STD");

                    b.Property<string>("MaleStdHigh")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("MALE_STD_HIGH");

                    b.Property<string>("MaleStdLow")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("MALE_STD_LOW");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "KensaItemCd", "StartDate");

                    b.ToTable("KENSA_STD_MST");
                });

            modelBuilder.Entity("Entity.Tenant.KinkiMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ACd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("A_CD")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<string>("BCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("B_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "Id", "ACd", "SeqNo");

                    b.ToTable("KINKI_MST");
                });

            modelBuilder.Entity("Entity.Tenant.KogakuLimit", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("AgeKbn")
                        .HasColumnType("integer")
                        .HasColumnName("AGE_KBN")
                        .HasColumnOrder(2);

                    b.Property<int>("KogakuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_KBN")
                        .HasColumnOrder(3);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(4);

                    b.Property<int>("AdjustLimit")
                        .HasColumnType("integer")
                        .HasColumnName("ADJUST_LIMIT");

                    b.Property<int>("BaseLimit")
                        .HasColumnType("integer")
                        .HasColumnName("BASE_LIMIT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<string>("IncomeKbn")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("INCOME_KBN");

                    b.Property<int>("TasuLimit")
                        .HasColumnType("integer")
                        .HasColumnName("TASU_LIMIT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "AgeKbn", "KogakuKbn", "StartDate");

                    b.ToTable("KOGAKU_LIMIT");
                });

            modelBuilder.Entity("Entity.Tenant.KohiPriority", b =>
                {
                    b.Property<int>("PrefNo")
                        .HasColumnType("integer")
                        .HasColumnName("PREF_NO")
                        .HasColumnOrder(1);

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("HOUBETU")
                        .HasColumnOrder(2);

                    b.Property<string>("PriorityNo")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("PRIORITY_NO")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("PrefNo", "Houbetu", "PriorityNo");

                    b.ToTable("KOHI_PRIORITY");
                });

            modelBuilder.Entity("Entity.Tenant.KouiHoukatuMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(2);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("HoukatuTerm")
                        .HasColumnType("integer")
                        .HasColumnName("HOUKATU_TERM");

                    b.Property<int>("IgnoreSanteiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("IGNORE_SANTEI_KBN");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("IS_INVALID");

                    b.Property<int>("KouiFrom")
                        .HasColumnType("integer")
                        .HasColumnName("KOUI_FROM");

                    b.Property<int>("KouiTo")
                        .HasColumnType("integer")
                        .HasColumnName("KOUI_TO");

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("TargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TARGET_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<int>("UserSetting")
                        .HasColumnType("integer")
                        .HasColumnName("USER_SETTING")
                        .HasColumnOrder(5);

                    b.HasKey("HpId", "ItemCd", "StartDate");

                    b.ToTable("KOUI_HOUKATU_MST");
                });

            modelBuilder.Entity("Entity.Tenant.KouiKbnMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("KouiKbnId")
                        .HasColumnType("integer")
                        .HasColumnName("KOUI_KBN_ID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("KouiGrpName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("KOUI_GRP_NAME");

                    b.Property<int>("KouiKbn1")
                        .HasColumnType("integer")
                        .HasColumnName("KOUI_KBN1");

                    b.Property<int>("KouiKbn2")
                        .HasColumnType("integer")
                        .HasColumnName("KOUI_KBN2");

                    b.Property<string>("KouiName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("KOUI_NAME");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.HasKey("HpId", "KouiKbnId");

                    b.ToTable("KOUI_KBN_MST");
                });

            modelBuilder.Entity("Entity.Tenant.LimitCntListInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("KohiId")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI_ID")
                        .HasColumnOrder(3);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(5);

                    b.Property<string>("Biko")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("BIKO");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_PID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<long>("OyaRaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("OYA_RAIIN_NO");

                    b.Property<string>("SortKey")
                        .HasMaxLength(61)
                        .HasColumnType("character varying(61)")
                        .HasColumnName("SORT_KEY");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "KohiId", "SinDate", "SeqNo");

                    b.ToTable("LIMIT_CNT_LIST_INF");
                });

            modelBuilder.Entity("Entity.Tenant.LimitListInf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Biko")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("BIKO");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("FutanGaku")
                        .HasColumnType("integer")
                        .HasColumnName("FUTAN_GAKU");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_PID");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("KohiId")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI_ID");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<string>("SortKey")
                        .HasMaxLength(61)
                        .HasColumnType("character varying(61)")
                        .HasColumnName("SORT_KEY");

                    b.Property<int>("TotalGaku")
                        .HasColumnType("integer")
                        .HasColumnName("TOTAL_GAKU");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PtId", "KohiId", "SinDate", "SeqNo" }, "LIMIT_LIST_INF_IDX01");

                    b.ToTable("LIMIT_LIST_INF");
                });

            modelBuilder.Entity("Entity.Tenant.ListSetGenerationMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GenerationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("GENERATION_ID")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenerationId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GenerationId");

                    b.ToTable("LIST_SET_GENERATION_MST");
                });

            modelBuilder.Entity("Entity.Tenant.ListSetMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GenerationId")
                        .HasColumnType("integer")
                        .HasColumnName("GENERATION_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SET_ID")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SetId"));

                    b.Property<string>("CmtName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("CMT_NAME");

                    b.Property<string>("CmtOpt")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("CMT_OPT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsTitle")
                        .HasColumnType("integer")
                        .HasColumnName("IS_TITLE");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<int>("Level1")
                        .HasColumnType("integer")
                        .HasColumnName("LEVEL1");

                    b.Property<int>("Level2")
                        .HasColumnType("integer")
                        .HasColumnName("LEVEL2");

                    b.Property<int>("Level3")
                        .HasColumnType("integer")
                        .HasColumnName("LEVEL3");

                    b.Property<int>("Level4")
                        .HasColumnType("integer")
                        .HasColumnName("LEVEL4");

                    b.Property<int>("Level5")
                        .HasColumnType("integer")
                        .HasColumnName("LEVEL5");

                    b.Property<int>("SelectType")
                        .HasColumnType("integer")
                        .HasColumnName("SELECT_TYPE");

                    b.Property<int>("SetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SET_KBN");

                    b.Property<string>("SetName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("SET_NAME");

                    b.Property<int>("SikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SIKYU_KBN");

                    b.Property<double>("Suryo")
                        .HasColumnType("double precision")
                        .HasColumnName("SURYO");

                    b.Property<int>("UnitSbt")
                        .HasColumnType("integer")
                        .HasColumnName("UNIT_SBT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GenerationId", "SetId");

                    b.ToTable("LIST_SET_MST");
                });

            modelBuilder.Entity("Entity.Tenant.LockInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<string>("FunctionCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("FUNCTION_CD")
                        .HasColumnOrder(3);

                    b.Property<long>("SinDate")
                        .HasColumnType("bigint")
                        .HasColumnName("SIN_DATE")
                        .HasColumnOrder(4);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(5);

                    b.Property<long>("OyaRaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("OYA_RAIIN_NO")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("LockDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LOCK_DATE");

                    b.Property<string>("LoginKey")
                        .HasColumnType("text")
                        .HasColumnName("LOGINKEY");

                    b.Property<string>("Machine")
                        .HasColumnType("text")
                        .HasColumnName("MACHINE");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("USER_ID");

                    b.HasKey("HpId", "PtId", "FunctionCd", "SinDate", "RaiinNo", "OyaRaiinNo");

                    b.HasIndex("HpId", "PtId", "UserId")
                        .IsUnique()
                        .HasFilter("\"FUNCTION_CD\" IN ('02000000', '03000000')");

                    b.ToTable("LOCK_INF");
                });

            modelBuilder.Entity("Entity.Tenant.LockMst", b =>
                {
                    b.Property<string>("FunctionCdA")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("FUNCTION_CD_A")
                        .HasColumnOrder(1);

                    b.Property<string>("FunctionCdB")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("FUNCTION_CD_B")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("IS_INVALID");

                    b.Property<int>("LockLevel")
                        .HasColumnType("integer")
                        .HasColumnName("LOCK_LEVEL");

                    b.Property<int>("LockRange")
                        .HasColumnType("integer")
                        .HasColumnName("LOCK_RANGE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("FunctionCdA", "FunctionCdB");

                    b.ToTable("LOCK_MST");
                });

            modelBuilder.Entity("Entity.Tenant.M01KijyoCmt", b =>
                {
                    b.Property<string>("CmtCd")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("CMT_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("Cmt")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("CMT");

                    b.HasKey("CmtCd");

                    b.ToTable("M01_KIJYO_CMT");
                });

            modelBuilder.Entity("Entity.Tenant.M01Kinki", b =>
                {
                    b.Property<string>("ACd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("A_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("BCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("B_CD")
                        .HasColumnOrder(2);

                    b.Property<string>("CmtCd")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("CMT_CD")
                        .HasColumnOrder(3);

                    b.Property<string>("SayokijyoCd")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("SAYOKIJYO_CD")
                        .HasColumnOrder(4);

                    b.Property<string>("DataKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("DATA_KBN");

                    b.Property<string>("Kyodo")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("KYODO");

                    b.Property<string>("KyodoCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KYODO_CD");

                    b.HasKey("ACd", "BCd", "CmtCd", "SayokijyoCd");

                    b.ToTable("M01_KINKI");
                });

            modelBuilder.Entity("Entity.Tenant.M01KinkiCmt", b =>
                {
                    b.Property<string>("CmtCd")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("CMT_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("Cmt")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("CMT");

                    b.HasKey("CmtCd");

                    b.ToTable("M01_KINKI_CMT");
                });

            modelBuilder.Entity("Entity.Tenant.M10DayLimit", b =>
                {
                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("YJ_CD")
                        .HasColumnOrder(1);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(2);

                    b.Property<string>("Cmt")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("CMT");

                    b.Property<string>("EdDate")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("ED_DATE");

                    b.Property<int>("LimitDay")
                        .HasColumnType("integer")
                        .HasColumnName("LIMIT_DAY");

                    b.Property<string>("StDate")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("ST_DATE");

                    b.HasKey("YjCd", "SeqNo");

                    b.ToTable("M10_DAY_LIMIT");
                });

            modelBuilder.Entity("Entity.Tenant.M12FoodAlrgy", b =>
                {
                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("YJ_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("FoodKbn")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("FOOD_KBN")
                        .HasColumnOrder(2);

                    b.Property<string>("TenpuLevel")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("TENPU_LEVEL")
                        .HasColumnOrder(3);

                    b.Property<string>("AttentionCmt")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("ATTENTION_CMT");

                    b.Property<string>("KikinCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("KIKIN_CD");

                    b.Property<string>("WorkingMechanism")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("WORKING_MECHANISM");

                    b.HasKey("YjCd", "FoodKbn", "TenpuLevel");

                    b.HasIndex(new[] { "KikinCd", "YjCd", "FoodKbn", "TenpuLevel" }, "M12_FOOD_ALRGY_IDX01");

                    b.ToTable("M12_FOOD_ALRGY");
                });

            modelBuilder.Entity("Entity.Tenant.M12FoodAlrgyKbn", b =>
                {
                    b.Property<string>("FoodKbn")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("FOOD_KBN")
                        .HasColumnOrder(1);

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("FOOD_NAME");

                    b.HasKey("FoodKbn");

                    b.ToTable("M12_FOOD_ALRGY_KBN");
                });

            modelBuilder.Entity("Entity.Tenant.M14AgeCheck", b =>
                {
                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("YJ_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("AttentionCmtCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("ATTENTION_CMT_CD")
                        .HasColumnOrder(2);

                    b.Property<string>("AgeKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("AGE_KBN");

                    b.Property<double>("AgeMax")
                        .HasColumnType("double precision")
                        .HasColumnName("AGE_MAX");

                    b.Property<double>("AgeMin")
                        .HasColumnType("double precision")
                        .HasColumnName("AGE_MIN");

                    b.Property<string>("SexKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("SEX_KBN");

                    b.Property<string>("TenpuLevel")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("TENPU_LEVEL");

                    b.Property<string>("WeightKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("WEIGHT_KBN");

                    b.Property<double>("WeightMax")
                        .HasColumnType("double precision")
                        .HasColumnName("WEIGHT_MAX");

                    b.Property<double>("WeightMin")
                        .HasColumnType("double precision")
                        .HasColumnName("WEIGHT_MIN");

                    b.Property<string>("WorkingMechanism")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("WORKING_MECHANISM");

                    b.HasKey("YjCd", "AttentionCmtCd");

                    b.ToTable("M14_AGE_CHECK");
                });

            modelBuilder.Entity("Entity.Tenant.M14CmtCode", b =>
                {
                    b.Property<string>("AttentionCmtCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("ATTENTION_CMT_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("AttentionCmt")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("ATTENTION_CMT");

                    b.HasKey("AttentionCmtCd");

                    b.ToTable("M14_CMT_CODE");
                });

            modelBuilder.Entity("Entity.Tenant.M28DrugMst", b =>
                {
                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("YJ_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("DokuyakuFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("DOKUYAKU_FLG");

                    b.Property<string>("DrugKana1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("DRUG_KANA1");

                    b.Property<string>("DrugKana2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("DRUG_KANA2");

                    b.Property<string>("DrugKbn")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("DRUG_KBN");

                    b.Property<string>("DrugKbnCd")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("DRUG_KBN_CD");

                    b.Property<string>("DrugName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("DRUG_NAME");

                    b.Property<string>("FormKbn")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("FORM_KBN");

                    b.Property<string>("FormKbnCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("FORM_KBN_CD");

                    b.Property<string>("GekiyakuFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("GEKIYAKU_FLG");

                    b.Property<string>("HaigoFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("HAIGO_FLG");

                    b.Property<string>("IpnKana")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("IPN_KANA");

                    b.Property<string>("IpnName")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("IPN_NAME");

                    b.Property<string>("KakuseizaiFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("KAKUSEIZAI_FLG");

                    b.Property<string>("KakuseizaiGenryoFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("KAKUSEIZAI_GENRYO_FLG");

                    b.Property<string>("KeikasotiDate")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("KEIKASOTI_DATE");

                    b.Property<string>("KeySeibun")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("KEY_SEIBUN");

                    b.Property<string>("KikakuUnit")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("KIKAKU_UNIT");

                    b.Property<string>("KikinCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("KIKIN_CD");

                    b.Property<string>("KohatuFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("KOHATU_FLG");

                    b.Property<string>("KoseisinyakuFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("KOSEISINYAKU_FLG");

                    b.Property<string>("KoseisyoCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("KOSEISYO_CD");

                    b.Property<string>("MainDrugCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("MAIN_DRUG_CD");

                    b.Property<string>("MainDrugKana")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("MAIN_DRUG_KANA");

                    b.Property<string>("MainDrugName")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("MAIN_DRUG_NAME");

                    b.Property<string>("MainDrugNameFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("MAIN_DRUG_NAME_FLG");

                    b.Property<string>("MakerCd")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("MAKER_CD");

                    b.Property<string>("MakerName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("MAKER_NAME");

                    b.Property<string>("MayakuFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("MAYAKU_FLG");

                    b.Property<double>("SeibunRikika")
                        .HasColumnType("double precision")
                        .HasColumnName("SEIBUN_RIKIKA");

                    b.Property<string>("SeibunRikikaUnit")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("SEIBUN_RIKIKA_UNIT");

                    b.Property<string>("SeibutuFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("SEIBUTU_FLG");

                    b.Property<double>("SeirikiYoryoRate")
                        .HasColumnType("double precision")
                        .HasColumnName("SEIRIKI_YORYO_RATE");

                    b.Property<string>("SeirikiYoryoUnit")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("SEIRIKI_YORYO_UNIT");

                    b.Property<string>("SpSeibutuFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("SP_SEIBUTU_FLG");

                    b.Property<double>("Yakka")
                        .HasColumnType("double precision")
                        .HasColumnName("YAKKA");

                    b.Property<string>("YakkaRateFormura")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("YAKKA_RATE_FORMURA");

                    b.Property<string>("YakkaRateUnit")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("YAKKA_RATE_UNIT");

                    b.Property<string>("YakkaSyusaiDate")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("YAKKA_SYUSAI_DATE");

                    b.Property<string>("YakkaUnit")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("YAKKA_UNIT");

                    b.Property<int>("YakkaVal")
                        .HasColumnType("integer")
                        .HasColumnName("YAKKA_VAL");

                    b.Property<double>("YoryoJyuryo")
                        .HasColumnType("double precision")
                        .HasColumnName("YORYO_JYURYO");

                    b.Property<string>("YoryoJyuryoUnit")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("YORYO_JYURYO_UNIT");

                    b.HasKey("YjCd");

                    b.ToTable("M28_DRUG_MST");
                });

            modelBuilder.Entity("Entity.Tenant.M34ArCode", b =>
                {
                    b.Property<string>("FukusayoCd")
                        .HasColumnType("text")
                        .HasColumnName("FUKUSAYO_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("FukusayoCmt")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("FUKUSAYO_CMT");

                    b.HasKey("FukusayoCd");

                    b.ToTable("M34_AR_CODE");
                });

            modelBuilder.Entity("Entity.Tenant.M34ArDiscon", b =>
                {
                    b.Property<string>("YjCd")
                        .HasColumnType("text")
                        .HasColumnName("YJ_CD")
                        .HasColumnOrder(1);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(2);

                    b.Property<string>("FukusayoCd")
                        .HasColumnType("text")
                        .HasColumnName("FUKUSAYO_CD");

                    b.HasKey("YjCd", "SeqNo");

                    b.ToTable("M34_AR_DISCON");
                });

            modelBuilder.Entity("Entity.Tenant.M34ArDisconCode", b =>
                {
                    b.Property<string>("FukusayoCd")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("FUKUSAYO_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("FukusayoCmt")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("FUKUSAYO_CMT");

                    b.HasKey("FukusayoCd");

                    b.ToTable("M34_AR_DISCON_CODE");
                });

            modelBuilder.Entity("Entity.Tenant.M34DrugInfoMain", b =>
                {
                    b.Property<string>("YjCd")
                        .HasColumnType("text")
                        .HasColumnName("YJ_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("COLOR");

                    b.Property<string>("FormCd")
                        .HasColumnType("text")
                        .HasColumnName("FORM_CD");

                    b.Property<string>("FukusayoCd")
                        .HasColumnType("text")
                        .HasColumnName("FUKUSAYO_CD");

                    b.Property<string>("FukusayoInitCd")
                        .HasColumnType("text")
                        .HasColumnName("FUKUSAYO_INIT_CD");

                    b.Property<string>("KonoCd")
                        .HasColumnType("text")
                        .HasColumnName("KONO_CD");

                    b.Property<string>("Mark")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("MARK");

                    b.HasKey("YjCd");

                    b.ToTable("M34_DRUG_INFO_MAIN");
                });

            modelBuilder.Entity("Entity.Tenant.M34FormCode", b =>
                {
                    b.Property<string>("FormCd")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("FORM_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("Form")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("FORM");

                    b.HasKey("FormCd");

                    b.ToTable("M34_FORM_CODE");
                });

            modelBuilder.Entity("Entity.Tenant.M34IndicationCode", b =>
                {
                    b.Property<string>("KonoCd")
                        .HasColumnType("text")
                        .HasColumnName("KONO_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("KonoDetailCmt")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("KONO_DETAIL_CMT");

                    b.Property<string>("KonoSimpleCmt")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("KONO_SIMPLE_CMT");

                    b.HasKey("KonoCd");

                    b.ToTable("M34_INDICATION_CODE");
                });

            modelBuilder.Entity("Entity.Tenant.M34InteractionPat", b =>
                {
                    b.Property<string>("YjCd")
                        .HasColumnType("text")
                        .HasColumnName("YJ_CD")
                        .HasColumnOrder(1);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(2);

                    b.Property<string>("InteractionPatCd")
                        .HasColumnType("text")
                        .HasColumnName("INTERACTION_PAT_CD");

                    b.HasKey("YjCd", "SeqNo");

                    b.ToTable("M34_INTERACTION_PAT");
                });

            modelBuilder.Entity("Entity.Tenant.M34InteractionPatCode", b =>
                {
                    b.Property<string>("InteractionPatCd")
                        .HasColumnType("text")
                        .HasColumnName("INTERACTION_PAT_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("InteractionPatCmt")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("INTERACTION_PAT_CMT");

                    b.HasKey("InteractionPatCd");

                    b.ToTable("M34_INTERACTION_PAT_CODE");
                });

            modelBuilder.Entity("Entity.Tenant.M34Precaution", b =>
                {
                    b.Property<string>("YjCd")
                        .HasColumnType("text")
                        .HasColumnName("YJ_CD")
                        .HasColumnOrder(1);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(2);

                    b.Property<string>("PrecautionCd")
                        .HasColumnType("text")
                        .HasColumnName("PRECAUTION_CD");

                    b.HasKey("YjCd", "SeqNo");

                    b.ToTable("M34_PRECAUTIONS");
                });

            modelBuilder.Entity("Entity.Tenant.M34PrecautionCode", b =>
                {
                    b.Property<string>("PrecautionCd")
                        .HasColumnType("text")
                        .HasColumnName("PRECAUTION_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("ExtendCd")
                        .HasColumnType("text")
                        .HasColumnName("EXTEND_CD")
                        .HasColumnOrder(2);

                    b.Property<int>("AgeMax")
                        .HasColumnType("integer")
                        .HasColumnName("AGE_MAX");

                    b.Property<int>("AgeMin")
                        .HasColumnType("integer")
                        .HasColumnName("AGE_MIN");

                    b.Property<string>("PrecautionCmt")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("PRECAUTION_CMT");

                    b.Property<int>("PropertyCd")
                        .HasColumnType("integer")
                        .HasColumnName("PROPERTY_CD");

                    b.Property<string>("SexCd")
                        .HasColumnType("text")
                        .HasColumnName("SEX_CD");

                    b.HasKey("PrecautionCd", "ExtendCd");

                    b.ToTable("M34_PRECAUTION_CODE");
                });

            modelBuilder.Entity("Entity.Tenant.M34PropertyCode", b =>
                {
                    b.Property<int>("PropertyCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("PROPERTY_CD")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PropertyCd"));

                    b.Property<string>("Property")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("PROPERTY");

                    b.HasKey("PropertyCd");

                    b.ToTable("M34_PROPERTY_CODE");
                });

            modelBuilder.Entity("Entity.Tenant.M34SarSymptomCode", b =>
                {
                    b.Property<string>("FukusayoInitCd")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("FUKUSAYO_INIT_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("FukusayoInitCmt")
                        .HasColumnType("text")
                        .HasColumnName("FUKUSAYO_INIT_CMT");

                    b.HasKey("FukusayoInitCd");

                    b.ToTable("M34_SAR_SYMPTOM_CODE");
                });

            modelBuilder.Entity("Entity.Tenant.M38ClassCode", b =>
                {
                    b.Property<string>("ClassCd")
                        .HasColumnType("text")
                        .HasColumnName("CLASS_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("ClassName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CLASS_NAME");

                    b.Property<string>("MajorDivCd")
                        .HasColumnType("text")
                        .HasColumnName("MAJOR_DIV_CD");

                    b.HasKey("ClassCd");

                    b.ToTable("M38_CLASS_CODE");
                });

            modelBuilder.Entity("Entity.Tenant.M38IngCode", b =>
                {
                    b.Property<string>("SeibunCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SEIBUN_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("Seibun")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("SEIBUN");

                    b.HasKey("SeibunCd");

                    b.ToTable("M38_ING_CODE");
                });

            modelBuilder.Entity("Entity.Tenant.M38Ingredients", b =>
                {
                    b.Property<string>("SeibunCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SEIBUN_CD")
                        .HasColumnOrder(2);

                    b.Property<int>("SerialNum")
                        .HasColumnType("integer")
                        .HasColumnName("SERIAL_NUM")
                        .HasColumnOrder(1);

                    b.Property<int>("Sbt")
                        .HasColumnType("integer")
                        .HasColumnName("SBT")
                        .HasColumnOrder(3);

                    b.HasKey("SeibunCd", "SerialNum", "Sbt");

                    b.ToTable("M38_INGREDIENTS");
                });

            modelBuilder.Entity("Entity.Tenant.M38MajorDivCode", b =>
                {
                    b.Property<string>("MajorDivCd")
                        .HasColumnType("text")
                        .HasColumnName("MAJOR_DIV_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("MajorDivName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("MAJOR_DIV_NAME");

                    b.HasKey("MajorDivCd");

                    b.ToTable("M38_MAJOR_DIV_CODE");
                });

            modelBuilder.Entity("Entity.Tenant.M38OtcFormCode", b =>
                {
                    b.Property<string>("FormCd")
                        .HasColumnType("text")
                        .HasColumnName("FORM_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("Form")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("FORM");

                    b.HasKey("FormCd");

                    b.ToTable("M38_OTC_FORM_CODE");
                });

            modelBuilder.Entity("Entity.Tenant.M38OtcMain", b =>
                {
                    b.Property<int>("SerialNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SERIAL_NUM")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SerialNum"));

                    b.Property<string>("ClassCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("CLASS_CD");

                    b.Property<string>("CompanyCd")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("COMPANY_CD");

                    b.Property<string>("DrugFormCd")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("DRUG_FORM_CD");

                    b.Property<string>("OtcCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("OTC_CD");

                    b.Property<string>("TradeCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("TRADE_CD");

                    b.Property<string>("TradeKana")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("TRADE_KANA");

                    b.Property<string>("TradeName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("TRADE_NAME");

                    b.Property<string>("YohoCd")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("YOHO_CD");

                    b.HasKey("SerialNum");

                    b.ToTable("M38_OTC_MAIN");
                });

            modelBuilder.Entity("Entity.Tenant.M38OtcMakerCode", b =>
                {
                    b.Property<string>("MakerCd")
                        .HasColumnType("text")
                        .HasColumnName("MAKER_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("MakerKana")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("MAKER_KANA");

                    b.Property<string>("MakerName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("MAKER_NAME");

                    b.HasKey("MakerCd");

                    b.ToTable("M38_OTC_MAKER_CODE");
                });

            modelBuilder.Entity("Entity.Tenant.M41SuppleIndexcode", b =>
                {
                    b.Property<string>("SeibunCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SEIBUN_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("IndexCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("INDEX_CD")
                        .HasColumnOrder(2);

                    b.HasKey("SeibunCd", "IndexCd");

                    b.ToTable("M41_SUPPLE_INDEXCODE");
                });

            modelBuilder.Entity("Entity.Tenant.M41SuppleIndexdef", b =>
                {
                    b.Property<string>("SeibunCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SEIBUN_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("IndexWord")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("INDEX_WORD");

                    b.Property<string>("TokuhoFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("TOKUHO_FLG");

                    b.HasKey("SeibunCd");

                    b.ToTable("M41_SUPPLE_INDEXDEF");
                });

            modelBuilder.Entity("Entity.Tenant.M41SuppleIngre", b =>
                {
                    b.Property<string>("SeibunCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SEIBUN_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("Seibun")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("SEIBUN");

                    b.HasKey("SeibunCd");

                    b.ToTable("M41_SUPPLE_INGRE");
                });

            modelBuilder.Entity("Entity.Tenant.M42ContraCmt", b =>
                {
                    b.Property<string>("CmtCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("CMT_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("Cmt")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("CMT");

                    b.HasKey("CmtCd");

                    b.ToTable("M42_CONTRA_CMT");
                });

            modelBuilder.Entity("Entity.Tenant.M42ContraindiDisBc", b =>
                {
                    b.Property<string>("ByotaiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("BYOTAI_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("ByotaiClassCd")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("BYOTAI_CLASS_CD")
                        .HasColumnOrder(2);

                    b.HasKey("ByotaiCd", "ByotaiClassCd");

                    b.ToTable("M42_CONTRAINDI_DIS_BC");
                });

            modelBuilder.Entity("Entity.Tenant.M42ContraindiDisClass", b =>
                {
                    b.Property<string>("ByotaiClassCd")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("BYOTAI_CLASS_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("Byotai")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("BYOTAI");

                    b.HasKey("ByotaiClassCd");

                    b.ToTable("M42_CONTRAINDI_DIS_CLASS");
                });

            modelBuilder.Entity("Entity.Tenant.M42ContraindiDisCon", b =>
                {
                    b.Property<string>("ByotaiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("BYOTAI_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("Byomei")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("BYOMEI");

                    b.Property<int>("ByotaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("BYOTAI_KBN");

                    b.Property<string>("Icd10")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("ICD10");

                    b.Property<string>("ReceCd")
                        .HasMaxLength(33)
                        .HasColumnType("character varying(33)")
                        .HasColumnName("RECE_CD");

                    b.Property<string>("StandardByotai")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("STANDARD_BYOTAI");

                    b.HasKey("ByotaiCd");

                    b.ToTable("M42_CONTRAINDI_DIS_CON");
                });

            modelBuilder.Entity("Entity.Tenant.M42ContraindiDrugMainEx", b =>
                {
                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("YJ_CD")
                        .HasColumnOrder(1);

                    b.Property<int>("TenpuLevel")
                        .HasColumnType("integer")
                        .HasColumnName("TENPU_LEVEL")
                        .HasColumnOrder(2);

                    b.Property<string>("ByotaiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("BYOTAI_CD")
                        .HasColumnOrder(3);

                    b.Property<string>("CmtCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("CMT_CD")
                        .HasColumnOrder(4);

                    b.Property<string>("FamilyCd")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("FAMILY_CD");

                    b.Property<string>("KijyoCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("KIJYO_CD");

                    b.Property<string>("KioCd")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("KIO_CD");

                    b.Property<int>("Stage")
                        .HasColumnType("integer")
                        .HasColumnName("STAGE");

                    b.HasKey("YjCd", "TenpuLevel", "ByotaiCd", "CmtCd");

                    b.ToTable("M42_CONTRAINDI_DRUG_MAIN_EX");
                });

            modelBuilder.Entity("Entity.Tenant.M56AlrgyDerivatives", b =>
                {
                    b.Property<string>("SeibunCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("SEIBUN_CD")
                        .HasColumnOrder(3);

                    b.Property<string>("DrvalrgyCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("DRVALRGY_CD")
                        .HasColumnOrder(2);

                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("YJ_CD")
                        .HasColumnOrder(1);

                    b.HasKey("SeibunCd", "DrvalrgyCd", "YjCd");

                    b.ToTable("M56_ALRGY_DERIVATIVES");
                });

            modelBuilder.Entity("Entity.Tenant.M56AnalogueCd", b =>
                {
                    b.Property<string>("AnalogueCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("ANALOGUE_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("AnalogueName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("ANALOGUE_NAME");

                    b.HasKey("AnalogueCd");

                    b.ToTable("M56_ANALOGUE_CD");
                });

            modelBuilder.Entity("Entity.Tenant.M56DrugClass", b =>
                {
                    b.Property<string>("ClassCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("CLASS_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("ClassDuplication")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("CLASS_DUPLICATION");

                    b.Property<string>("ClassName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("CLASS_NAME");

                    b.HasKey("ClassCd");

                    b.ToTable("M56_DRUG_CLASS");
                });

            modelBuilder.Entity("Entity.Tenant.M56DrvalrgyCode", b =>
                {
                    b.Property<string>("DrvalrgyCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("DRVALRGY_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("DrvalrgyGrp")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("DRVALRGY_GRP");

                    b.Property<string>("DrvalrgyName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("DRVALRGY_NAME");

                    b.Property<int>("RankNo")
                        .HasColumnType("integer")
                        .HasColumnName("RANK_NO");

                    b.HasKey("DrvalrgyCd");

                    b.ToTable("M56_DRVALRGY_CODE");
                });

            modelBuilder.Entity("Entity.Tenant.M56ExAnalogue", b =>
                {
                    b.Property<string>("SeibunCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("SEIBUN_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("SeqNo")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(2);

                    b.Property<string>("AnalogueCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("ANALOGUE_CD");

                    b.HasKey("SeibunCd", "SeqNo");

                    b.ToTable("M56_EX_ANALOGUE");
                });

            modelBuilder.Entity("Entity.Tenant.M56ExEdIngredients", b =>
                {
                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("YJ_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("SeqNo")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(2);

                    b.Property<string>("AnalogueCheck")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("ANALOGUE_CHECK");

                    b.Property<string>("ProdrugCheck")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("PRODRUG_CHECK");

                    b.Property<int>("Sbt")
                        .HasColumnType("integer")
                        .HasColumnName("SBT");

                    b.Property<string>("SeibunCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("SEIBUN_CD");

                    b.Property<string>("SeibunIndexCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("SEIBUN_INDEX_CD");

                    b.Property<string>("TenkabutuCheck")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("TENKABUTU_CHECK");

                    b.Property<string>("YokaiekiCheck")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("YOKAIEKI_CHECK");

                    b.HasKey("YjCd", "SeqNo");

                    b.ToTable("M56_EX_ED_INGREDIENTS");
                });

            modelBuilder.Entity("Entity.Tenant.M56ExIngCode", b =>
                {
                    b.Property<string>("SeibunCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("SEIBUN_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("SeibunIndexCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("SEIBUN_INDEX_CD")
                        .HasColumnOrder(2);

                    b.Property<string>("SeibunName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("SEIBUN_NAME");

                    b.Property<string>("YohoCd")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("YOHO_CD");

                    b.HasKey("SeibunCd", "SeibunIndexCd");

                    b.ToTable("M56_EX_ING_CODE");
                });

            modelBuilder.Entity("Entity.Tenant.M56ExIngrdtMain", b =>
                {
                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("YJ_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("DrugKbn")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("DRUG_KBN");

                    b.Property<string>("HaigouFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("HAIGOU_FLG");

                    b.Property<string>("KanpoFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("KANPO_FLG");

                    b.Property<string>("YohoCd")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("YOHO_CD");

                    b.Property<string>("YuekiFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("YUEKI_FLG");

                    b.Property<string>("ZensinsayoFlg")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("ZENSINSAYO_FLG");

                    b.HasKey("YjCd");

                    b.ToTable("M56_EX_INGRDT_MAIN");
                });

            modelBuilder.Entity("Entity.Tenant.M56ProdrugCd", b =>
                {
                    b.Property<string>("SeqNo")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(2);

                    b.Property<string>("SeibunCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("SEIBUN_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("KasseitaiCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("KASSEITAI_CD");

                    b.HasKey("SeqNo", "SeibunCd");

                    b.ToTable("M56_PRODRUG_CD");
                });

            modelBuilder.Entity("Entity.Tenant.M56UsageCode", b =>
                {
                    b.Property<string>("YohoCd")
                        .HasColumnType("text")
                        .HasColumnName("YOHO_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("Yoho")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("YOHO");

                    b.HasKey("YohoCd");

                    b.ToTable("M56_USAGE_CODE");
                });

            modelBuilder.Entity("Entity.Tenant.M56YjDrugClass", b =>
                {
                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("YJ_CD")
                        .HasColumnOrder(1);

                    b.Property<string>("ClassCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("CLASS_CD")
                        .HasColumnOrder(2);

                    b.HasKey("YjCd", "ClassCd");

                    b.ToTable("M56_YJ_DRUG_CLASS");
                });

            modelBuilder.Entity("Entity.Tenant.MallMessageInf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("Message")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("MESSAGE");

                    b.Property<int>("ReceiveNo")
                        .HasColumnType("integer")
                        .HasColumnName("RECEIVE_NO");

                    b.Property<int>("SendNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEND_NO");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SinDate" }, "MALL_MESSAGE_INF_IDX01");

                    b.ToTable("MALL_MESSAGE_INF");
                });

            modelBuilder.Entity("Entity.Tenant.MallRenkeiInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(2);

                    b.Property<int>("ClinicCd")
                        .HasColumnType("integer")
                        .HasColumnName("CLINIC_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("KaikeiNo")
                        .HasColumnType("integer")
                        .HasColumnName("KAIKEI_NO");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("ReceiveNo")
                        .HasColumnType("integer")
                        .HasColumnName("RECEIVE_NO");

                    b.Property<int>("SendFlg")
                        .HasColumnType("integer")
                        .HasColumnName("SEND_FLG");

                    b.Property<int>("SendNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEND_NO");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<int>("SinsatuNo")
                        .HasColumnType("integer")
                        .HasColumnName("SINSATU_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.HasKey("HpId", "RaiinNo");

                    b.ToTable("MALL_RENKEI_INF");
                });

            modelBuilder.Entity("Entity.Tenant.MaterialMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("MaterialCd")
                        .HasColumnType("bigint")
                        .HasColumnName("MATERIAL_CD")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("MaterialName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("MATERIAL_NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "MaterialCd");

                    b.ToTable("MATERIAL_MST");
                });

            modelBuilder.Entity("Entity.Tenant.MonshinInfo", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("GetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("GET_KBN");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("Rtext")
                        .HasColumnType("text")
                        .HasColumnName("RTEXT");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "RaiinNo", "SeqNo");

                    b.ToTable("MONSHIN_INF");
                });

            modelBuilder.Entity("Entity.Tenant.OdrDateDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GrpId", "SeqNo");

                    b.HasIndex(new[] { "HpId", "GrpId", "ItemCd", "IsDeleted" }, "ODR_DATE_DETAIL_IDX01");

                    b.ToTable("ODR_DATE_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.OdrDateInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("GrpName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("GRP_NAME");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GrpId");

                    b.HasIndex(new[] { "HpId", "GrpId", "IsDeleted" }, "ODR_DATE_INF_IDX01");

                    b.ToTable("ODR_DATE_INF");
                });

            modelBuilder.Entity("Entity.Tenant.OdrInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(2);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_NO")
                        .HasColumnOrder(3);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_EDA_NO")
                        .HasColumnOrder(4);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("DaysCnt")
                        .HasColumnType("integer")
                        .HasColumnName("DAYS_CNT");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_PID");

                    b.Property<int>("InoutKbn")
                        .HasColumnType("integer")
                        .HasColumnName("INOUT_KBN");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("OdrKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("ODR_KOUI_KBN");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<string>("RpName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("RP_NAME");

                    b.Property<int>("SanteiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SANTEI_KBN");

                    b.Property<int>("SikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SIKYU_KBN");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("SyohoSbt")
                        .HasColumnType("integer")
                        .HasColumnName("SYOHO_SBT");

                    b.Property<int>("TosekiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TOSEKI_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "RaiinNo", "RpNo", "RpEdaNo", "Id");

                    b.HasIndex(new[] { "HpId", "PtId", "SinDate", "IsDeleted" }, "ODR_INF_IDX01");

                    b.ToTable("ODR_INF");
                });

            modelBuilder.Entity("Entity.Tenant.OdrInfCmt", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(2);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_NO")
                        .HasColumnOrder(3);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_EDA_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("ROW_NO")
                        .HasColumnOrder(5);

                    b.Property<int>("EdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("EDA_NO")
                        .HasColumnOrder(6);

                    b.Property<string>("CmtCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CMT_CD");

                    b.Property<string>("CmtName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("CMT_NAME");

                    b.Property<string>("CmtOpt")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("CMT_OPT");

                    b.Property<int>("FontColor")
                        .HasColumnType("integer")
                        .HasColumnName("FONT_COLOR");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.HasKey("HpId", "RaiinNo", "RpNo", "RpEdaNo", "RowNo", "EdaNo");

                    b.ToTable("ODR_INF_CMT");
                });

            modelBuilder.Entity("Entity.Tenant.OdrInfDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(2);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_NO")
                        .HasColumnOrder(3);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_EDA_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("ROW_NO")
                        .HasColumnOrder(5);

                    b.Property<string>("Bunkatu")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("BUNKATU");

                    b.Property<string>("CmtName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("CMT_NAME");

                    b.Property<string>("CmtOpt")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("CMT_OPT");

                    b.Property<int>("CommentNewline")
                        .HasColumnType("integer")
                        .HasColumnName("COMMENT_NEWLINE");

                    b.Property<int>("DrugKbn")
                        .HasColumnType("integer")
                        .HasColumnName("DRUG_KBN");

                    b.Property<string>("FontColor")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("FONT_COLOR");

                    b.Property<string>("IpnCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("IPN_CD");

                    b.Property<string>("IpnName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("IPN_NAME");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_RECE");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<string>("ItemName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("ITEM_NAME");

                    b.Property<DateTime?>("JissiDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("JISSI_DATE");

                    b.Property<int>("JissiId")
                        .HasColumnType("integer")
                        .HasColumnName("JISSI_ID");

                    b.Property<int>("JissiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("JISSI_KBN");

                    b.Property<string>("JissiMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("JISSI_MACHINE");

                    b.Property<int>("KohatuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOHATU_KBN");

                    b.Property<string>("Kokiji2")
                        .HasColumnType("text")
                        .HasColumnName("KOKUJI2");

                    b.Property<string>("Kokuji1")
                        .HasColumnType("text")
                        .HasColumnName("KOKUJI1");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<string>("ReqCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("REQ_CD");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<int>("SinKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_KOUI_KBN");

                    b.Property<double>("Suryo")
                        .HasColumnType("double precision")
                        .HasColumnName("SURYO");

                    b.Property<int>("SyohoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SYOHO_KBN");

                    b.Property<int>("SyohoLimitKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SYOHO_LIMIT_KBN");

                    b.Property<double>("TermVal")
                        .HasColumnType("double precision")
                        .HasColumnName("TERM_VAL");

                    b.Property<string>("UnitName")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("UNIT_NAME");

                    b.Property<int>("UnitSBT")
                        .HasColumnType("integer")
                        .HasColumnName("UNIT_SBT");

                    b.Property<int>("YohoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("YOHO_KBN");

                    b.HasKey("HpId", "RaiinNo", "RpNo", "RpEdaNo", "RowNo");

                    b.HasIndex(new[] { "HpId", "PtId", "RaiinNo", "ItemCd" }, "ODR_INF_DETAIL_IDX01");

                    b.HasIndex(new[] { "ItemCd" }, "ODR_INF_DETAIL_IDX02");

                    b.HasIndex(new[] { "SinDate", "PtId", "RaiinNo" }, "ODR_INF_DETAIL_IDX03");

                    b.HasIndex(new[] { "PtId", "SinDate", "ItemCd" }, "ODR_INF_DETAIL_IDX04");

                    b.ToTable("ODR_INF_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.OnlineConfirmation", b =>
                {
                    b.Property<string>("ReceptionNo")
                        .HasColumnType("text")
                        .HasColumnName("RECEPTION_NO");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("ERROR_MESSAGE");

                    b.Property<DateTime>("ReceptionDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("RECEPTION_DATETIME");

                    b.Property<string>("SegmentOfResult")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("SEGMENT_OF_RESULT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<int>("YoyakuDate")
                        .HasColumnType("integer")
                        .HasColumnName("YOYAKU_DATE");

                    b.HasKey("ReceptionNo");

                    b.ToTable("ONLINE_CONFIRMATION");
                });

            modelBuilder.Entity("Entity.Tenant.OnlineConfirmationHistory", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("ConfirmationResult")
                        .HasColumnType("text")
                        .HasColumnName("CONFIRMATION_RESULT");

                    b.Property<int>("ConfirmationType")
                        .HasColumnType("integer")
                        .HasColumnName("CONFIRMATION_TYPE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("InfoConsFlg")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("INFO_CONS_FLG");

                    b.Property<DateTime>("OnlineConfirmationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ONLINE_CONFIRMATION_DATE");

                    b.Property<int>("PrescriptionIssueType")
                        .HasColumnType("integer")
                        .HasColumnName("PRESCRIPTION_ISSUE_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("UketukeStatus")
                        .HasColumnType("integer")
                        .HasColumnName("UKETUKE_STATUS");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "ID" }, "ONLINE_CONFIRMATION_HISTORY_IDX01");

                    b.ToTable("ONLINE_CONFIRMATION_HISTORY");
                });

            modelBuilder.Entity("Entity.Tenant.OnlineConsent", b =>
                {
                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("ConsKbn")
                        .HasColumnType("integer")
                        .HasColumnName("CONS_KBN")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("ConsDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CONS_DATE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<DateTime>("LimitDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LIMIT_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("PtId", "ConsKbn");

                    b.ToTable("ONLINE_CONSENT");
                });

            modelBuilder.Entity("Entity.Tenant.PathConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_CD")
                        .HasColumnOrder(2);

                    b.Property<int>("GrpEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_EDA_NO")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<string>("Biko")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("BIKO");

                    b.Property<int>("CharCd")
                        .HasColumnType("integer")
                        .HasColumnName("CHAR_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("IS_INVALID");

                    b.Property<string>("Machine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("MACHINE");

                    b.Property<string>("Param")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("PARAM");

                    b.Property<string>("Path")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("PATH");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GrpCd", "GrpEdaNo", "SeqNo");

                    b.HasIndex(new[] { "HpId", "GrpCd", "GrpEdaNo", "Machine", "IsInvalid" }, "PT_PATH_CONF_IDX01");

                    b.HasIndex(new[] { "HpId", "GrpCd", "GrpEdaNo", "SeqNo" }, "PT_PATH_CONF_PKEY");

                    b.ToTable("PATH_CONF");
                });

            modelBuilder.Entity("Entity.Tenant.PaymentMethodMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("PaymentMethodCd")
                        .HasColumnType("integer")
                        .HasColumnName("PAYMENT_METHOD_CD")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("PayName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("PAY_NAME");

                    b.Property<string>("PaySname")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("PAY_SNAME");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PaymentMethodCd");

                    b.ToTable("PAYMENT_METHOD_MST");
                });

            modelBuilder.Entity("Entity.Tenant.PermissionMst", b =>
                {
                    b.Property<string>("FunctionCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("FUNCTION_CD")
                        .HasColumnOrder(1);

                    b.Property<int>("Permission")
                        .HasColumnType("integer")
                        .HasColumnName("PERMISSION")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("FunctionCd", "Permission");

                    b.HasIndex(new[] { "FunctionCd", "Permission" }, "PERMISSION_MST_PKEY");

                    b.ToTable("PERMISSION_MST");
                });

            modelBuilder.Entity("Entity.Tenant.PhysicalAverage", b =>
                {
                    b.Property<int>("JissiYear")
                        .HasColumnType("integer")
                        .HasColumnName("JISSI_YEAR")
                        .HasColumnOrder(1);

                    b.Property<int>("AgeYear")
                        .HasColumnType("integer")
                        .HasColumnName("AGE_YEAR")
                        .HasColumnOrder(2);

                    b.Property<int>("AgeMonth")
                        .HasColumnType("integer")
                        .HasColumnName("AGE_MONTH")
                        .HasColumnOrder(3);

                    b.Property<int>("AgeDay")
                        .HasColumnType("integer")
                        .HasColumnName("AGE_DAY")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<double>("FemaleChest")
                        .HasColumnType("double precision")
                        .HasColumnName("FEMALE_CHEST");

                    b.Property<double>("FemaleHead")
                        .HasColumnType("double precision")
                        .HasColumnName("FEMALE_HEAD");

                    b.Property<double>("FemaleHeight")
                        .HasColumnType("double precision")
                        .HasColumnName("FEMALE_HEIGHT");

                    b.Property<double>("FemaleWeight")
                        .HasColumnType("double precision")
                        .HasColumnName("FEMALE_WEIGHT");

                    b.Property<double>("MaleChest")
                        .HasColumnType("double precision")
                        .HasColumnName("MALE_CHEST");

                    b.Property<double>("MaleHead")
                        .HasColumnType("double precision")
                        .HasColumnName("MALE_HEAD");

                    b.Property<double>("MaleHeight")
                        .HasColumnType("double precision")
                        .HasColumnName("MALE_HEIGHT");

                    b.Property<double>("MaleWeight")
                        .HasColumnType("double precision")
                        .HasColumnName("MALE_WEIGHT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.HasKey("JissiYear", "AgeYear", "AgeMonth", "AgeDay");

                    b.ToTable("PHYSICAL_AVERAGE");
                });

            modelBuilder.Entity("Entity.Tenant.PiImage", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("ImageType")
                        .HasColumnType("integer")
                        .HasColumnName("IMAGE_TYPE")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("FileName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("FILE_NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "ImageType", "ItemCd");

                    b.ToTable("PI_IMAGE");
                });

            modelBuilder.Entity("Entity.Tenant.PiInf", b =>
                {
                    b.Property<string>("PiId")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("PI_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("Commonname")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("COMMONNAME");

                    b.Property<string>("Feature")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("FEATURE");

                    b.Property<string>("Genericname")
                        .HasColumnType("text")
                        .HasColumnName("GENERICNAME");

                    b.Property<string>("Highlight")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("HIGHLIGHT");

                    b.Property<string>("PreparationName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("PREPARATION_NAME");

                    b.Property<int>("RDate")
                        .HasColumnType("integer")
                        .HasColumnName("R_DATE");

                    b.Property<string>("RReason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("R_REASON");

                    b.Property<string>("RType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("R_TYPE");

                    b.Property<string>("Relatedmatter")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("RELATEDMATTER");

                    b.Property<string>("Revision")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("REVISION");

                    b.Property<string>("Sccjno")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("SCCJNO");

                    b.Property<string>("Therapeuticclassification")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("THERAPEUTICCLASSIFICATION");

                    b.Property<string>("Title")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("TITLE");

                    b.Property<int>("WDate")
                        .HasColumnType("integer")
                        .HasColumnName("W_DATE");

                    b.HasKey("PiId");

                    b.ToTable("PI_INF");
                });

            modelBuilder.Entity("Entity.Tenant.PiInfDetail", b =>
                {
                    b.Property<string>("PiId")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("PI_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("Branch")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("BRANCH")
                        .HasColumnOrder(2);

                    b.Property<string>("Jpn")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("JPN")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("LEVEL");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("TEXT");

                    b.HasKey("PiId", "Branch", "Jpn", "SeqNo");

                    b.ToTable("PI_INF_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.PiProductInf", b =>
                {
                    b.Property<string>("PiIdFull")
                        .HasColumnType("text")
                        .HasColumnName("PI_ID_FULL");

                    b.Property<string>("PiId")
                        .HasColumnType("text")
                        .HasColumnName("PI_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("Branch")
                        .HasColumnType("text")
                        .HasColumnName("BRANCH")
                        .HasColumnOrder(2);

                    b.Property<string>("Jpn")
                        .HasColumnType("text")
                        .HasColumnName("JPN")
                        .HasColumnOrder(3);

                    b.Property<string>("BikoPiBranch")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("BIKO_PI_BRANCH");

                    b.Property<string>("BikoPiUnit")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("BIKO_PI_UNIT");

                    b.Property<string>("GeneralNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("GENERAL_NO");

                    b.Property<string>("GenericEngName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("GENERIC_ENG_NAME");

                    b.Property<string>("GenericName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("GENERIC_NAME");

                    b.Property<string>("HotCd")
                        .HasColumnType("text")
                        .HasColumnName("HOT_CD");

                    b.Property<string>("IsStoped")
                        .HasColumnType("text")
                        .HasColumnName("IS_STOPED");

                    b.Property<string>("Maker")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("MAKER");

                    b.Property<string>("Marketer")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("MARKETER");

                    b.Property<string>("Other")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("OTHER");

                    b.Property<string>("PiSbt")
                        .HasColumnType("text")
                        .HasColumnName("PI_SBT");

                    b.Property<string>("PiState")
                        .HasColumnType("text")
                        .HasColumnName("PI_STATE");

                    b.Property<string>("ProductName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("PRODUCT_NAME");

                    b.Property<string>("SosyoName")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("SOSYO_NAME");

                    b.Property<string>("StopDate")
                        .HasColumnType("text")
                        .HasColumnName("STOP_DATE");

                    b.Property<string>("Unit")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("UNIT");

                    b.Property<DateTime?>("UpdDateImg")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPD_DATE_IMG");

                    b.Property<DateTime?>("UpdDatePi")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPD_DATE_PI");

                    b.Property<DateTime?>("UpdDateProduct")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPD_DATE_PRODUCT");

                    b.Property<DateTime?>("UpdDateXml")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPD_DATE_XML");

                    b.Property<string>("Vender")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("VENDER");

                    b.Property<string>("VerDate")
                        .HasColumnType("text")
                        .HasColumnName("VER_DATE");

                    b.Property<string>("YakkaDel")
                        .HasColumnType("text")
                        .HasColumnName("YAKKA_DEL");

                    b.Property<string>("YakkaReg")
                        .HasColumnType("text")
                        .HasColumnName("YAKKA_REG");

                    b.Property<string>("YjCd")
                        .HasColumnType("text")
                        .HasColumnName("YJ_CD");

                    b.HasKey("PiIdFull", "PiId", "Branch", "Jpn");

                    b.ToTable("PI_PRODUCT_INF");
                });

            modelBuilder.Entity("Entity.Tenant.PostCodeMst", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Banti")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("BANTI");

                    b.Property<string>("CityKana")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CITY_KANA");

                    b.Property<string>("CityName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("CITY_NAME");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("PostCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("POST_CD");

                    b.Property<string>("PostalTermKana")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("POSTAL_TERM_KANA");

                    b.Property<string>("PrefKana")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("PREF_KANA");

                    b.Property<string>("PrefName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("PREF_NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "HpId", "PostCd", "IsDeleted" }, "PT_POST_CODE_MST_IDX01");

                    b.ToTable("POST_CODE_MST");
                });

            modelBuilder.Entity("Entity.Tenant.PriorityHaihanMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("HaihanGrp")
                        .HasColumnType("bigint")
                        .HasColumnName("HAIHAN_GRP")
                        .HasColumnOrder(2);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(3);

                    b.Property<int>("UserSetting")
                        .HasColumnType("integer")
                        .HasColumnName("USER_SETTING")
                        .HasColumnOrder(4);

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("COUNT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("IS_INVALID");

                    b.Property<string>("ItemCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD1");

                    b.Property<string>("ItemCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD2");

                    b.Property<string>("ItemCd3")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD3");

                    b.Property<string>("ItemCd4")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD4");

                    b.Property<string>("ItemCd5")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD5");

                    b.Property<string>("ItemCd6")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD6");

                    b.Property<string>("ItemCd7")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD7");

                    b.Property<string>("ItemCd8")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD8");

                    b.Property<string>("ItemCd9")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD9");

                    b.Property<int>("SpJyoken")
                        .HasColumnType("integer")
                        .HasColumnName("SP_JYOKEN");

                    b.Property<int>("TargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TARGET_KBN");

                    b.Property<int>("TermCnt")
                        .HasColumnType("integer")
                        .HasColumnName("TERM_CNT");

                    b.Property<int>("TermSbt")
                        .HasColumnType("integer")
                        .HasColumnName("TERM_SBT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "HaihanGrp", "StartDate", "UserSetting");

                    b.ToTable("PRIORITY_HAIHAN_MST");
                });

            modelBuilder.Entity("Entity.Tenant.PtAlrgyDrug", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("DrugName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("DRUG_NAME");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.ToTable("PT_ALRGY_DRUG");
                });

            modelBuilder.Entity("Entity.Tenant.PtAlrgyElse", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<string>("AlrgyName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ALRGY_NAME");

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.ToTable("PT_ALRGY_ELSE");
                });

            modelBuilder.Entity("Entity.Tenant.PtAlrgyFood", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<string>("AlrgyKbn")
                        .HasColumnType("text")
                        .HasColumnName("ALRGY_KBN");

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.ToTable("PT_ALRGY_FOOD");
                });

            modelBuilder.Entity("Entity.Tenant.PtByomei", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Byomei")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("BYOMEI");

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("BYOMEI_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_PID");

                    b.Property<string>("HosokuCmt")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("HOSOKU_CMT");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsImportant")
                        .HasColumnType("integer")
                        .HasColumnName("IS_IMPORTANT");

                    b.Property<int>("IsNodspKarte")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_KARTE");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_RECE");

                    b.Property<int>("NanByoCd")
                        .HasColumnType("integer")
                        .HasColumnName("NANBYO_CD");

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    b.Property<int>("SikkanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SIKKAN_KBN");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<int>("SyubyoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SYUBYO_KBN");

                    b.Property<string>("SyusyokuCd1")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD1");

                    b.Property<string>("SyusyokuCd10")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD10");

                    b.Property<string>("SyusyokuCd11")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD11");

                    b.Property<string>("SyusyokuCd12")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD12");

                    b.Property<string>("SyusyokuCd13")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD13");

                    b.Property<string>("SyusyokuCd14")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD14");

                    b.Property<string>("SyusyokuCd15")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD15");

                    b.Property<string>("SyusyokuCd16")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD16");

                    b.Property<string>("SyusyokuCd17")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD17");

                    b.Property<string>("SyusyokuCd18")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD18");

                    b.Property<string>("SyusyokuCd19")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD19");

                    b.Property<string>("SyusyokuCd2")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD2");

                    b.Property<string>("SyusyokuCd20")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD20");

                    b.Property<string>("SyusyokuCd21")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD21");

                    b.Property<string>("SyusyokuCd3")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD3");

                    b.Property<string>("SyusyokuCd4")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD4");

                    b.Property<string>("SyusyokuCd5")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD5");

                    b.Property<string>("SyusyokuCd6")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD6");

                    b.Property<string>("SyusyokuCd7")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD7");

                    b.Property<string>("SyusyokuCd8")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD8");

                    b.Property<string>("SyusyokuCd9")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD9");

                    b.Property<int>("TenkiDate")
                        .HasColumnType("integer")
                        .HasColumnName("TENKI_DATE");

                    b.Property<int>("TenkiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TENKI_KBN");

                    b.Property<int>("TogetuByomei")
                        .HasColumnType("integer")
                        .HasColumnName("TOGETU_BYOMEI");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "Id");

                    b.ToTable("PT_BYOMEI");
                });

            modelBuilder.Entity("Entity.Tenant.PtCmtInf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id", "HpId", "PtId", "SeqNo");

                    b.HasIndex(new[] { "Id" }, "PTCMT_INF_IDX01");

                    b.ToTable("PT_CMT_INF");
                });

            modelBuilder.Entity("Entity.Tenant.PtFamily", b =>
                {
                    b.Property<long>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("FAMILY_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FamilyId"));

                    b.Property<string>("Biko")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("BIKO");

                    b.Property<int>("Birthday")
                        .HasColumnType("integer")
                        .HasColumnName("BIRTHDAY");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<long>("FamilyPtId")
                        .HasColumnType("bigint")
                        .HasColumnName("FAMILY_PT_ID");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDead")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DEAD");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsSeparated")
                        .HasColumnType("integer")
                        .HasColumnName("IS_SEPARATED");

                    b.Property<string>("KanaName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("KANA_NAME");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NAME");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("PARENT_ID");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("Sex")
                        .HasColumnType("integer")
                        .HasColumnName("SEX");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<string>("ZokugaraCd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ZOKUGARA_CD");

                    b.HasKey("FamilyId");

                    b.HasIndex(new[] { "FamilyId", "PtId", "FamilyPtId" }, "PT_FAMILY_IDX01");

                    b.ToTable("PT_FAMILY");
                });

            modelBuilder.Entity("Entity.Tenant.PtFamilyReki", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Byomei")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("BYOMEI");

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("BYOMEI_CD");

                    b.Property<string>("ByotaiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("BYOTAI_CD");

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<long>("FamilyId")
                        .HasColumnType("bigint")
                        .HasColumnName("FAMILY_ID");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id", "PtId", "FamilyId" }, "PT_FAMILY_REKI_IDX01");

                    b.ToTable("PT_FAMILY_REKI");
                });

            modelBuilder.Entity("Entity.Tenant.PtGrpInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID")
                        .HasColumnOrder(3);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("GroupCode")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("GRP_CODE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GroupId", "PtId", "SeqNo");

                    b.HasIndex(new[] { "HpId", "PtId", "GroupId", "IsDeleted" }, "PT_GRP_INF_IDX01");

                    b.ToTable("PT_GRP_INF");
                });

            modelBuilder.Entity("Entity.Tenant.PtGrpItem", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID")
                        .HasColumnOrder(2);

                    b.Property<string>("GrpCode")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("GRP_CODE")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("GrpCodeName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("GRP_CODE_NAME");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GrpId", "GrpCode", "SeqNo");

                    b.HasIndex(new[] { "HpId", "GrpId", "GrpCode", "IsDeleted" }, "PT_GRP_ITEM_IDX01");

                    b.ToTable("PT_GRP_ITEM");
                });

            modelBuilder.Entity("Entity.Tenant.PtGrpNameMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("GrpName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("GRP_NAME");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GrpId");

                    b.HasIndex(new[] { "HpId", "GrpId", "IsDeleted" }, "PT_GRP_NAME_IDX01");

                    b.ToTable("PT_GRP_NAME_MST");
                });

            modelBuilder.Entity("Entity.Tenant.PtHokenCheck", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtID")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenGrp")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_GRP")
                        .HasColumnOrder(3);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID")
                        .HasColumnOrder(4);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<string>("CheckCmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CHECK_CMT");

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CHECK_DATE");

                    b.Property<int>("CheckId")
                        .HasColumnType("integer")
                        .HasColumnName("CHECK_ID");

                    b.Property<string>("CheckMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CHECK_MACHINE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtID", "HokenGrp", "HokenId", "SeqNo");

                    b.ToTable("PT_HOKEN_CHECK");
                });

            modelBuilder.Entity("Entity.Tenant.PtHokenInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<string>("Bango")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("BANGO");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("EdaNo")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("EDA_NO");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("Gendogaku")
                        .HasColumnType("integer")
                        .HasColumnName("GENDOGAKU");

                    b.Property<int>("GenmenGaku")
                        .HasColumnType("integer")
                        .HasColumnName("GENMEN_GAKU");

                    b.Property<int>("GenmenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("GENMEN_KBN");

                    b.Property<int>("GenmenRate")
                        .HasColumnType("integer")
                        .HasColumnName("GENMEN_RATE");

                    b.Property<int>("HokenEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_EDA_NO");

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_KBN");

                    b.Property<int>("HokenNo")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_NO");

                    b.Property<string>("HokensyaAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("HOKENSYA_ADDRESS");

                    b.Property<string>("HokensyaName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("HOKENSYA_NAME");

                    b.Property<string>("HokensyaNo")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("HOKENSYA_NO");

                    b.Property<string>("HokensyaPost")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("HOKENSYA_POST");

                    b.Property<string>("HokensyaTel")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("HOKENSYA_TEL");

                    b.Property<int>("HonkeKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HONKE_KBN");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("HOUBETU");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("JibaiHokenName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("JIBAI_HOKEN_NAME");

                    b.Property<string>("JibaiHokenTanto")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("JIBAI_HOKEN_TANTO");

                    b.Property<string>("JibaiHokenTel")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("JIBAI_HOKEN_TEL");

                    b.Property<int>("JibaiJyusyouDate")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_JYUSYOU_DATE");

                    b.Property<int>("KeizokuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KEIZOKU_KBN");

                    b.Property<string>("Kigo")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("KIGO");

                    b.Property<int>("KofuDate")
                        .HasColumnType("integer")
                        .HasColumnName("KOFU_DATE");

                    b.Property<int>("KogakuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_KBN");

                    b.Property<int>("KogakuType")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_TYPE");

                    b.Property<int>("Rate")
                        .HasColumnType("integer")
                        .HasColumnName("RATE");

                    b.Property<string>("RousaiCityName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ROUSAI_CITY_NAME");

                    b.Property<string>("RousaiJigyosyoName")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("ROUSAI_JIGYOSYO_NAME");

                    b.Property<string>("RousaiKantokuCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("ROUSAI_KANTOKU_CD");

                    b.Property<string>("RousaiKofuNo")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("ROUSAI_KOFU_NO");

                    b.Property<string>("RousaiPrefName")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ROUSAI_PREF_NAME");

                    b.Property<int>("RousaiReceCount")
                        .HasColumnType("integer")
                        .HasColumnName("ROUSAI_RECE_COUNT");

                    b.Property<string>("RousaiRoudouCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("ROUSAI_ROUDOU_CD");

                    b.Property<int>("RousaiSaigaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("ROUSAI_SAIGAI_KBN");

                    b.Property<string>("RousaiSyobyoCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("ROUSAI_SYOBYO_CD");

                    b.Property<int>("RousaiSyobyoDate")
                        .HasColumnType("integer")
                        .HasColumnName("ROUSAI_SYOBYO_DATE");

                    b.Property<int>("RyoyoEndDate")
                        .HasColumnType("integer")
                        .HasColumnName("RYOYO_END_DATE");

                    b.Property<int>("RyoyoStartDate")
                        .HasColumnType("integer")
                        .HasColumnName("RYOYO_START_DATE");

                    b.Property<int>("SikakuDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIKAKU_DATE");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<int>("SyokumuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SYOKUMU_KBN");

                    b.Property<int>("TasukaiYm")
                        .HasColumnType("integer")
                        .HasColumnName("TASUKAI_YM");

                    b.Property<string>("Tokki1")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("TOKKI1");

                    b.Property<string>("Tokki2")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("TOKKI2");

                    b.Property<string>("Tokki3")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("TOKKI3");

                    b.Property<string>("Tokki4")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("TOKKI4");

                    b.Property<string>("Tokki5")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("TOKKI5");

                    b.Property<int>("TokureiYm1")
                        .HasColumnType("integer")
                        .HasColumnName("TOKUREI_YM1");

                    b.Property<int>("TokureiYm2")
                        .HasColumnType("integer")
                        .HasColumnName("TOKUREI_YM2");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "HokenId", "SeqNo");

                    b.ToTable("PT_HOKEN_INF");
                });

            modelBuilder.Entity("Entity.Tenant.PtHokenPattern", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_PID")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID");

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_KBN");

                    b.Property<string>("HokenMemo")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("HOKEN_MEMO");

                    b.Property<int>("HokenSbtCd")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_SBT_CD");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("Kohi1Id")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_ID");

                    b.Property<int>("Kohi2Id")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_ID");

                    b.Property<int>("Kohi3Id")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_ID");

                    b.Property<int>("Kohi4Id")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_ID");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SeqNo", "HokenPid");

                    b.HasIndex(new[] { "HpId", "PtId", "StartDate", "EndDate", "IsDeleted" }, "PT_HOKEN_PATTERN_IDX01");

                    b.ToTable("PT_HOKEN_PATTERN");
                });

            modelBuilder.Entity("Entity.Tenant.PtHokenScan", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenGrp")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_GRP")
                        .HasColumnOrder(3);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID")
                        .HasColumnOrder(4);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("FILE_NAME");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "HokenGrp", "HokenId", "SeqNo");

                    b.HasIndex(new[] { "HpId", "PtId", "HokenGrp", "HokenId" }, "PT_HOKEN_SCAN_IDX01");

                    b.HasIndex(new[] { "HpId", "PtId", "HokenGrp", "HokenId", "SeqNo", "IsDeleted" }, "PT_HOKEN_SCAN_PKEY");

                    b.ToTable("PT_HOKEN_SCAN");
                });

            modelBuilder.Entity("Entity.Tenant.PtInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PtId"));

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("Birthday")
                        .HasColumnType("integer")
                        .HasColumnName("BIRTHDAY");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("DeathDate")
                        .HasColumnType("integer")
                        .HasColumnName("DEATH_DATE");

                    b.Property<string>("HomeAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("HOME_ADDRESS1");

                    b.Property<string>("HomeAddress2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("HOME_ADDRESS2");

                    b.Property<string>("HomePost")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("HOME_POST");

                    b.Property<int>("IsDead")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DEAD");

                    b.Property<int>("IsDelete")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETE");

                    b.Property<int>("IsRyosyoDetail")
                        .HasColumnType("integer")
                        .HasColumnName("IS_RYOSYO_DETAIL");

                    b.Property<int>("IsTester")
                        .HasColumnType("integer")
                        .HasColumnName("IS_TESTER");

                    b.Property<string>("Job")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("JOB");

                    b.Property<string>("KanaName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("KANA_NAME");

                    b.Property<int>("LimitConsFlg")
                        .HasColumnType("integer")
                        .HasColumnName("LIMIT_CONS_FLG");

                    b.Property<string>("Mail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("MAIL");

                    b.Property<int>("MainHokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("MAIN_HOKEN_PID");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NAME");

                    b.Property<string>("OfficeAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OFFICE_ADDRESS1");

                    b.Property<string>("OfficeAddress2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OFFICE_ADDRESS2");

                    b.Property<string>("OfficeMemo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OFFICE_MEMO");

                    b.Property<string>("OfficeName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OFFICE_NAME");

                    b.Property<string>("OfficePost")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("OFFICE_POST");

                    b.Property<string>("OfficeTel")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("OFFICE_TEL");

                    b.Property<int>("PrimaryDoctor")
                        .HasColumnType("integer")
                        .HasColumnName("PRIMARY_DOCTOR");

                    b.Property<long>("PtNum")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_NUM");

                    b.Property<long>("ReferenceNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("REFERENCE_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ReferenceNo"));

                    b.Property<string>("RenrakuAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("RENRAKU_ADDRESS1");

                    b.Property<string>("RenrakuAddress2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("RENRAKU_ADDRESS2");

                    b.Property<string>("RenrakuMemo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("RENRAKU_MEMO");

                    b.Property<string>("RenrakuName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("RENRAKU_NAME");

                    b.Property<string>("RenrakuPost")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("RENRAKU_POST");

                    b.Property<string>("RenrakuTel")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("RENRAKU_TEL");

                    b.Property<string>("Setanusi")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("SETAINUSI");

                    b.Property<int>("Sex")
                        .HasColumnType("integer")
                        .HasColumnName("SEX");

                    b.Property<string>("Tel1")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("TEL1");

                    b.Property<string>("Tel2")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("TEL2");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<string>("Zokugara")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ZOKUGARA");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.HasIndex(new[] { "HpId", "PtNum" }, "PT_INF_IDX01");

                    b.ToTable("PT_INF");
                });

            modelBuilder.Entity("Entity.Tenant.PtInfection", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<string>("Byomei")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("BYOMEI");

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("BYOMEI_CD");

                    b.Property<string>("ByotaiCd")
                        .HasColumnType("text")
                        .HasColumnName("BYOTAI_CD");

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.ToTable("PT_INFECTION");
                });

            modelBuilder.Entity("Entity.Tenant.PtJibaiDoc", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("ElseCost")
                        .HasColumnType("integer")
                        .HasColumnName("ELSE_COST");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("MeisaiCost")
                        .HasColumnType("integer")
                        .HasColumnName("MEISAI_COST");

                    b.Property<int>("MeisaiNum")
                        .HasColumnType("integer")
                        .HasColumnName("MEISAI_NUM");

                    b.Property<int>("SindanCost")
                        .HasColumnType("integer")
                        .HasColumnName("SINDAN_COST");

                    b.Property<int>("SindanNum")
                        .HasColumnType("integer")
                        .HasColumnName("SINDAN_NUM");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SinYm", "HokenId", "SeqNo");

                    b.ToTable("PT_JIBAI_DOC");
                });

            modelBuilder.Entity("Entity.Tenant.PtJibkar", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("WebId")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("WEB_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("ByomeiKaiji")
                        .HasColumnType("integer")
                        .HasColumnName("BYOMEI_KAIJI");

                    b.Property<DateTime>("ByomeiUpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("BYOMEI_UPDATE_DATE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("KarteKaiji")
                        .HasColumnType("integer")
                        .HasColumnName("KARTE_KAIJI");

                    b.Property<DateTime>("KarteUpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("KARTE_UPDATE_DATE");

                    b.Property<int>("KensaKaiji")
                        .HasColumnType("integer")
                        .HasColumnName("KENSA_KAIJI");

                    b.Property<DateTime>("KensaUpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("KENSA_UPDATE_DATE");

                    b.Property<int>("OdrKaiji")
                        .HasColumnType("integer")
                        .HasColumnName("ODR_KAIJI");

                    b.Property<DateTime>("OdrUpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ODR_UPDATE_DATE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "WebId");

                    b.HasIndex(new[] { "HpId", "WebId", "PtId" }, "PT_JIBKAR_IDX01");

                    b.ToTable("PT_JIBKAR");
                });

            modelBuilder.Entity("Entity.Tenant.PtKioReki", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<string>("Byomei")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("BYOMEI");

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("BYOMEI_CD");

                    b.Property<string>("ByotaiCd")
                        .HasColumnType("text")
                        .HasColumnName("BYOTAI_CD");

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.ToTable("PT_KIO_REKI");
                });

            modelBuilder.Entity("Entity.Tenant.PtKohi", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<string>("FutansyaNo")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("FUTANSYA_NO");

                    b.Property<int>("GendoGaku")
                        .HasColumnType("integer")
                        .HasColumnName("GENDOGAKU");

                    b.Property<int>("HokenEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_EDA_NO");

                    b.Property<int>("HokenNo")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_NO");

                    b.Property<int>("HokenSbtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_SBT_KBN");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("HOUBETU");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("JyukyusyaNo")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("JYUKYUSYA_NO");

                    b.Property<int>("KofuDate")
                        .HasColumnType("integer")
                        .HasColumnName("KOFU_DATE");

                    b.Property<int>("PrefNo")
                        .HasColumnType("integer")
                        .HasColumnName("PREF_NO");

                    b.Property<int>("Rate")
                        .HasColumnType("integer")
                        .HasColumnName("RATE");

                    b.Property<int>("SikakuDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIKAKU_DATE");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<string>("TokusyuNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("TOKUSYU_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "HokenId", "SeqNo");

                    b.ToTable("PT_KOHI");
                });

            modelBuilder.Entity("Entity.Tenant.PtKyusei", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("KanaName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("KANA_NAME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.HasIndex(new[] { "HpId", "PtId", "EndDate", "IsDeleted" }, "PT_KYUSEI_IDX01");

                    b.ToTable("PT_KYUSEI");
                });

            modelBuilder.Entity("Entity.Tenant.PtLastVisitDate", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("LastVisitDate")
                        .HasColumnType("integer")
                        .HasColumnName("LAST_VISIT_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId");

                    b.ToTable("PT_LAST_VISIT_DATE");
                });

            modelBuilder.Entity("Entity.Tenant.PtMemo", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("Memo")
                        .HasColumnType("text")
                        .HasColumnName("MEMO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.HasIndex(new[] { "HpId", "PtId", "IsDeleted" }, "PT_MEMO_IDX01");

                    b.ToTable("PT_MEMO");
                });

            modelBuilder.Entity("Entity.Tenant.PtOtcDrug", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SerialNum")
                        .HasColumnType("integer")
                        .HasColumnName("SERIAL_NUM");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<string>("TradeName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("TRADE_NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.ToTable("PT_OTC_DRUG");
                });

            modelBuilder.Entity("Entity.Tenant.PtOtherDrug", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("DrugName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("DRUG_NAME");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.ToTable("PT_OTHER_DRUG");
                });

            modelBuilder.Entity("Entity.Tenant.PtPregnancy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("OvulationDate")
                        .HasColumnType("integer")
                        .HasColumnName("OVULATION_DATE");

                    b.Property<int>("OvulationDueDate")
                        .HasColumnType("integer")
                        .HasColumnName("OVULATION_DUE_DATE");

                    b.Property<int>("PeriodDate")
                        .HasColumnType("integer")
                        .HasColumnName("PERIOD_DATE");

                    b.Property<int>("PeriodDueDate")
                        .HasColumnType("integer")
                        .HasColumnName("PERIOD_DUE_DATE");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id", "HpId", "PtId", "SeqNo");

                    b.HasIndex(new[] { "Id", "HpId" }, "PTPREGNANCY_IDX01");

                    b.ToTable("PT_PREGNANCY");
                });

            modelBuilder.Entity("Entity.Tenant.PtRousaiTenki", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("Sinkei")
                        .HasColumnType("integer")
                        .HasColumnName("SINKEI");

                    b.Property<int>("Tenki")
                        .HasColumnType("integer")
                        .HasColumnName("TENKI");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "HokenId", "SeqNo");

                    b.HasIndex(new[] { "HpId", "PtId", "HokenId", "EndDate", "IsDeleted" }, "PT_ROUSAI_TENKI_IDX01");

                    b.ToTable("PT_ROUSAI_TENKI");
                });

            modelBuilder.Entity("Entity.Tenant.PtSanteiConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("EDA_NO");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("KbnNo")
                        .HasColumnType("integer")
                        .HasColumnName("KBN_NO");

                    b.Property<int>("KbnVal")
                        .HasColumnType("integer")
                        .HasColumnName("KBN_VAL");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.HasIndex(new[] { "HpId", "PtId", "KbnNo", "EdaNo", "StartDate", "EndDate", "IsDeleted" }, "PT_CALC_CONF_IDX01");

                    b.HasIndex(new[] { "HpId", "PtId", "KbnNo", "EdaNo", "SeqNo" }, "PT_CALC_CONF_PKEY");

                    b.ToTable("PT_SANTEI_CONF");
                });

            modelBuilder.Entity("Entity.Tenant.PtSupple", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<string>("IndexCd")
                        .HasColumnType("text")
                        .HasColumnName("INDEX_CD");

                    b.Property<string>("IndexWord")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("INDEX_WORD");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.ToTable("PT_SUPPLE");
                });

            modelBuilder.Entity("Entity.Tenant.PtTag", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("AlphablendVal")
                        .HasColumnType("integer")
                        .HasColumnName("ALPHABLEND_VAL");

                    b.Property<string>("BackgroundColor")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("BACKGROUND_COLOR");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("FontSize")
                        .HasColumnType("integer")
                        .HasColumnName("FONTSIZE");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("HEIGHT");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsDspKaikei")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DSP_KAIKEI");

                    b.Property<int>("IsDspKarte")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DSP_KARTE");

                    b.Property<int>("IsDspRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DSP_RECE");

                    b.Property<int>("IsDspUketuke")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DSP_UKETUKE");

                    b.Property<int>("Left")
                        .HasColumnType("integer")
                        .HasColumnName("LEFT");

                    b.Property<string>("Memo")
                        .HasColumnType("text")
                        .HasColumnName("MEMO");

                    b.Property<byte[]>("MemoData")
                        .HasColumnType("bytea")
                        .HasColumnName("MEMO_DATA");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<int>("TagGrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("TAG_GRP_CD");

                    b.Property<int>("Top")
                        .HasColumnType("integer")
                        .HasColumnName("TOP");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("WIDTH");

                    b.HasKey("HpId", "PtId", "SeqNo");

                    b.HasIndex(new[] { "HpId", "PtId", "StartDate", "EndDate", "IsDspUketuke", "IsDspKarte", "IsDspKaikei", "IsDeleted" }, "PT_TAG_IDX01");

                    b.ToTable("PT_TAG");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinCmtInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(2);

                    b.Property<int>("CmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_KBN")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDelete")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<string>("Text")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "RaiinNo", "CmtKbn", "SeqNo");

                    b.HasIndex(new[] { "HpId", "RaiinNo", "CmtKbn", "IsDelete" }, "RAIIN_CMT_INF_IDX01");

                    b.ToTable("RAIIN_CMT_INF");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinFilterKbn", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("FilterId")
                        .HasColumnType("integer")
                        .HasColumnName("FILTER_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("KBN_CD");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "FilterId", "SeqNo");

                    b.ToTable("RAIIN_FILTER_KBN");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinFilterMst", b =>
                {
                    b.Property<int>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("FILTER_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FilterId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("FilterName")
                        .HasColumnType("text")
                        .HasColumnName("FILTER_NAME");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SelectKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SELECT_KBN");

                    b.Property<string>("Shortcut")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("SHORTCUT");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("FilterId");

                    b.HasIndex(new[] { "HpId", "FilterId", "IsDeleted" }, "RAIIN_FILTER_MST_IDX01");

                    b.ToTable("RAIIN_FILTER_MST");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinFilterSort", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ColumnName")
                        .HasColumnType("text")
                        .HasColumnName("COLUMN_NAME");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("FilterId")
                        .HasColumnType("integer")
                        .HasColumnName("FILTER_ID");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("KBN_CD");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("PRIORITY");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SortKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id", "HpId", "FilterId", "IsDeleted" }, "KARTE_INF_IDX01")
                        .HasDatabaseName("KARTE_INF_IDX011");

                    b.ToTable("RAIIN_FILTER_SORT");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinFilterState", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("FilterId")
                        .HasColumnType("integer")
                        .HasColumnName("FILTER_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("STATUS");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "FilterId", "SeqNo");

                    b.ToTable("RAIIN_FILTER_STATE");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("RaiinNo"));

                    b.Property<string>("ConfirmationResult")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("CONFIRMATION_RESULT");

                    b.Property<int>("ConfirmationState")
                        .HasColumnType("integer")
                        .HasColumnName("CONFIRMATION_STATE");

                    b.Property<int>("ConfirmationType")
                        .HasColumnType("integer")
                        .HasColumnName("CONFIRMATION_TYPE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_PID");

                    b.Property<string>("InfoConsFlg")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("INFO_CONS_FLG");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsYoyaku")
                        .HasColumnType("integer")
                        .HasColumnName("IS_YOYAKU");

                    b.Property<int>("JikanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("JIKAN_KBN");

                    b.Property<int>("KaId")
                        .HasColumnType("integer")
                        .HasColumnName("KA_ID");

                    b.Property<int>("KaikeiId")
                        .HasColumnType("integer")
                        .HasColumnName("KAIKEI_ID");

                    b.Property<string>("KaikeiTime")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("KAIKEI_TIME");

                    b.Property<long>("OyaRaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("OYA_RAIIN_NO");

                    b.Property<int>("PrescriptionIssueType")
                        .HasColumnType("integer")
                        .HasColumnName("PRESCRIPTION_ISSUE_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SanteiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SANTEI_KBN");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<string>("SinEndTime")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("SIN_END_TIME");

                    b.Property<string>("SinStartTime")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("SIN_START_TIME");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("STATUS");

                    b.Property<int>("SyosaisinKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SYOSAISIN_KBN");

                    b.Property<int>("TantoId")
                        .HasColumnType("integer")
                        .HasColumnName("TANTO_ID");

                    b.Property<int>("UketukeId")
                        .HasColumnType("integer")
                        .HasColumnName("UKETUKE_ID");

                    b.Property<int>("UketukeNo")
                        .HasColumnType("integer")
                        .HasColumnName("UKETUKE_NO");

                    b.Property<int>("UketukeSbt")
                        .HasColumnType("integer")
                        .HasColumnName("UKETUKE_SBT");

                    b.Property<string>("UketukeTime")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("UKETUKE_TIME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<int>("YoyakuId")
                        .HasColumnType("integer")
                        .HasColumnName("YOYAKU_ID");

                    b.Property<string>("YoyakuTime")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("YOYAKU_TIME");

                    b.HasKey("HpId", "RaiinNo");

                    b.HasIndex(new[] { "HpId", "PtId", "SinDate", "Status", "IsDeleted" }, "RAIIN_INF_IDX01");

                    b.HasIndex(new[] { "HpId", "PtId", "SinDate", "Status", "SyosaisinKbn", "IsDeleted" }, "RAIIN_INF_IDX02");

                    b.HasIndex(new[] { "IsDeleted", "SinDate", "PtId" }, "RAIIN_INF_IDX03");

                    b.ToTable("RAIIN_INF");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinKbItem", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("KBN_CD")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsExclude")
                        .HasColumnType("integer")
                        .HasColumnName("IS_EXCLUDE");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GrpCd", "KbnCd", "SeqNo");

                    b.HasIndex(new[] { "HpId", "GrpCd", "KbnCd", "IsDeleted" }, "RAIIN_KBN_ITEM_IDX01");

                    b.ToTable("RAIIN_KBN_ITEM");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinKbnDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("KBN_CD")
                        .HasColumnOrder(3);

                    b.Property<string>("ColorCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("COLOR_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsAuto")
                        .HasColumnType("integer")
                        .HasColumnName("IS_AUTO");

                    b.Property<int>("IsAutoDelete")
                        .HasColumnType("integer")
                        .HasColumnName("IS_AUTO_DELETE");

                    b.Property<int>("IsConfirmed")
                        .HasColumnType("integer")
                        .HasColumnName("IS_CONFIRMED");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("KbnName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("KBN_NAME");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GrpCd", "KbnCd");

                    b.HasIndex(new[] { "HpId", "GrpCd", "KbnCd", "IsDeleted" }, "RAIIN_KBN_DETAIL_IDX01");

                    b.ToTable("RAIIN_KBN_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinKbnInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(3);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID")
                        .HasColumnOrder(4);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDelete")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETE");

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("KBN_CD");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "RaiinNo", "GrpId", "SeqNo");

                    b.HasIndex(new[] { "HpId", "PtId", "SinDate", "RaiinNo", "GrpId", "IsDelete" }, "RAIIN_KBN_INF_IDX01");

                    b.ToTable("RAIIN_KBN_INF");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinKbnKoui", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("KBN_CD")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("KouiKbnId")
                        .HasColumnType("integer")
                        .HasColumnName("KOUI_KBN_ID");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GrpId", "KbnCd", "SeqNo");

                    b.HasIndex(new[] { "HpId", "GrpId", "KbnCd", "IsDeleted" }, "RAIIN_KBN_KOUI_IDX01");

                    b.ToTable("RAIIN_KBN_KOUI");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinKbnMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("GrpName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("GRP_NAME");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GrpCd");

                    b.HasIndex(new[] { "HpId", "GrpCd", "IsDeleted" }, "RAIIN_KBN_MST_IDX01");

                    b.ToTable("RAIIN_KBN_MST");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinKbnYayoku", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("KBN_CD")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<int>("YoyakuCd")
                        .HasColumnType("integer")
                        .HasColumnName("YOYAKU_CD");

                    b.HasKey("HpId", "GrpId", "KbnCd", "SeqNo");

                    b.HasIndex(new[] { "HpId", "GrpId", "KbnCd", "IsDeleted" }, "RAIIN_KBN_YOYAKU_IDX01");

                    b.ToTable("RAIIN_KBN_YOYAKU");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinListCmt", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(2);

                    b.Property<int>("CmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_KBN")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<string>("Text")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "RaiinNo", "CmtKbn");

                    b.HasIndex(new[] { "HpId", "RaiinNo", "CmtKbn", "IsDeleted" }, "RAIIN_LIST_CMT_UKEY01");

                    b.ToTable("RAIIN_LIST_CMT");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinListDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("KBN_CD")
                        .HasColumnOrder(3);

                    b.Property<string>("ColorCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("COLOR_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("KbnName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("KBN_NAME");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GrpId", "KbnCd");

                    b.HasIndex(new[] { "HpId", "GrpId", "KbnCd", "IsDeleted" }, "RAIIN_LIST_DETAIL_IDX01");

                    b.HasIndex(new[] { "HpId", "IsDeleted" }, "RAIIN_LIST_DETAIL_IDX02");

                    b.ToTable("RAIIN_LIST_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinListDoc", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("KBN_CD")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("CategoryCd")
                        .HasColumnType("integer")
                        .HasColumnName("CATEGORY_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GrpId", "KbnCd", "SeqNo");

                    b.ToTable("RAIIN_LIST_DOC");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinListFile", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("KBN_CD")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("CategoryCd")
                        .HasColumnType("integer")
                        .HasColumnName("CATEGORY_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GrpId", "KbnCd", "SeqNo");

                    b.HasIndex(new[] { "HpId", "GrpId", "KbnCd", "IsDeleted" }, "RAIIN_LIST_FILE_IDX01");

                    b.ToTable("RAIIN_LIST_FILE");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinListInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE")
                        .HasColumnOrder(3);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID")
                        .HasColumnOrder(5);

                    b.Property<int>("RaiinListKbn")
                        .HasColumnType("integer")
                        .HasColumnName("RAIIN_LIST_KBN")
                        .HasColumnOrder(6);

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("KBN_CD");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SinDate", "RaiinNo", "GrpId", "RaiinListKbn");

                    b.HasIndex(new[] { "GrpId", "KbnCd", "RaiinListKbn" }, "RAIIN_LIST_INF_IDX01");

                    b.HasIndex(new[] { "HpId", "PtId", "RaiinNo" }, "RAIIN_LIST_INF_IDX02");

                    b.ToTable("RAIIN_LIST_INF");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinListItem", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("KBN_CD")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsExclude")
                        .HasColumnType("integer")
                        .HasColumnName("IS_EXCLUDE");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "KbnCd", "SeqNo", "GrpId");

                    b.HasIndex(new[] { "HpId", "GrpId", "KbnCd", "IsDeleted" }, "RAIIN_LIST_ITEM_IDX01");

                    b.ToTable("RAIIN_LIST_ITEM");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinListKoui", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("KBN_CD")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("KouiKbnId")
                        .HasColumnType("integer")
                        .HasColumnName("KOUI_KBN_ID");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "KbnCd", "SeqNo", "GrpId");

                    b.HasIndex(new[] { "HpId", "GrpId", "KbnCd", "IsDeleted" }, "RAIIN_LIST_KOUI_IDX01");

                    b.ToTable("RAIIN_LIST_KOUI");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinListMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GrpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("GrpName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("GRP_NAME");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GrpId");

                    b.HasIndex(new[] { "HpId", "GrpId", "IsDeleted" }, "RAIIN_LIST_MST_IDX01");

                    b.ToTable("RAIIN_LIST_MST");
                });

            modelBuilder.Entity("Entity.Tenant.RaiinListTag", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<int>("TagNo")
                        .HasColumnType("integer")
                        .HasColumnName("TAG_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "RaiinNo", "SeqNo");

                    b.HasIndex(new[] { "HpId", "RaiinNo", "IsDeleted" }, "RAIIN_LIST_TAG_UKEY01");

                    b.ToTable("RAIIN_LIST_TAG");
                });

            modelBuilder.Entity("Entity.Tenant.ReceCheckCmt", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(5);

                    b.Property<string>("Cmt")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsChecked")
                        .HasColumnType("integer")
                        .HasColumnName("IS_CHECKED");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsPending")
                        .HasColumnType("integer")
                        .HasColumnName("IS_PENDING");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SinYm", "HokenId", "SeqNo");

                    b.ToTable("RECE_CHECK_CMT");
                });

            modelBuilder.Entity("Entity.Tenant.ReceCheckErr", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID")
                        .HasColumnOrder(3);

                    b.Property<string>("ErrCd")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("ERR_CD")
                        .HasColumnOrder(5);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE")
                        .HasColumnOrder(6);

                    b.Property<string>("ACd")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("A_CD")
                        .HasColumnOrder(7);

                    b.Property<string>("BCd")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("B_CD")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsChecked")
                        .HasColumnType("integer")
                        .HasColumnName("IS_CHECKED");

                    b.Property<string>("Message1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("MESSAGE_1");

                    b.Property<string>("Message2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("MESSAGE_2");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SinYm", "HokenId", "ErrCd", "SinDate", "ACd", "BCd");

                    b.ToTable("RECE_CHECK_ERR");
                });

            modelBuilder.Entity("Entity.Tenant.ReceCheckOpt", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("ErrCd")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("ERR_CD")
                        .HasColumnOrder(2);

                    b.Property<string>("Biko")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("BIKO");

                    b.Property<int>("CheckOpt")
                        .HasColumnType("integer")
                        .HasColumnName("CHECK_OPT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("IS_INVALID");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "ErrCd");

                    b.ToTable("RECE_CHECK_OPT");
                });

            modelBuilder.Entity("Entity.Tenant.ReceCmt", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM")
                        .HasColumnOrder(3);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID")
                        .HasColumnOrder(4);

                    b.Property<int>("CmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_KBN")
                        .HasColumnOrder(5);

                    b.Property<int>("CmtSbt")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_SBT")
                        .HasColumnOrder(6);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(7);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Cmt")
                        .HasColumnType("text")
                        .HasColumnName("CMT");

                    b.Property<string>("CmtData")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("CMT_DATA");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SinYm", "HokenId", "CmtKbn", "CmtSbt", "Id");

                    b.HasIndex(new[] { "HpId", "PtId", "SinYm", "HokenId", "IsDeleted" }, "RECE_CMT_IDX01");

                    b.ToTable("RECE_CMT");
                });

            modelBuilder.Entity("Entity.Tenant.ReceFutanKbn", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("SeikyuYm")
                        .HasColumnType("integer")
                        .HasColumnName("SEIKYU_YM")
                        .HasColumnOrder(2);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(3);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID")
                        .HasColumnOrder(5);

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_PID")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("FutanKbnCd")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("FUTAN_KBN_CD");

                    b.HasKey("HpId", "SeikyuYm", "PtId", "SinYm", "HokenId", "HokenPid");

                    b.ToTable("RECE_FUTAN_KBN");
                });

            modelBuilder.Entity("Entity.Tenant.ReceInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("SeikyuYm")
                        .HasColumnType("integer")
                        .HasColumnName("SEIKYU_YM")
                        .HasColumnOrder(2);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(3);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID")
                        .HasColumnOrder(5);

                    b.Property<int>("ChokiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("CHOKI_KBN");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EnTen")
                        .HasColumnType("integer")
                        .HasColumnName("EN_TEN");

                    b.Property<int>("GenmenGaku")
                        .HasColumnType("integer")
                        .HasColumnName("GENMEN_GAKU");

                    b.Property<int>("GenmenGaku10en")
                        .HasColumnType("integer")
                        .HasColumnName("GENMEN_GAKU_10EN");

                    b.Property<int>("GenmenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("GENMEN_KBN");

                    b.Property<int>("HokenFutan")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_FUTAN");

                    b.Property<int>("HokenFutan10en")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_FUTAN_10EN");

                    b.Property<int>("HokenIchibuFutan")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ICHIBU_FUTAN");

                    b.Property<int>("HokenIchibuFutan10en")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ICHIBU_FUTAN_10EN");

                    b.Property<int>("HokenId2")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID2");

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_KBN");

                    b.Property<int?>("HokenNissu")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_NISSU");

                    b.Property<int>("HokenRate")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_RATE");

                    b.Property<int?>("HokenReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_RECE_FUTAN");

                    b.Property<int?>("HokenReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_RECE_TENSU");

                    b.Property<int>("HokenSbtCd")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_SBT_CD");

                    b.Property<int>("HokenTensu")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_TENSU");

                    b.Property<string>("HokensyaNo")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("HOKENSYA_NO");

                    b.Property<int>("HonkeKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HONKE_KBN");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("HOUBETU");

                    b.Property<int>("IchibuFutan")
                        .HasColumnType("integer")
                        .HasColumnName("ICHIBU_FUTAN");

                    b.Property<int>("IchibuFutan10en")
                        .HasColumnType("integer")
                        .HasColumnName("ICHIBU_FUTAN_10EN");

                    b.Property<int>("IsTasukai")
                        .HasColumnType("integer")
                        .HasColumnName("IS_TASUKAI");

                    b.Property<int>("IsTester")
                        .HasColumnType("integer")
                        .HasColumnName("IS_TESTER");

                    b.Property<int>("IsTokurei")
                        .HasColumnType("integer")
                        .HasColumnName("IS_TOKUREI");

                    b.Property<int>("IsZaiiso")
                        .HasColumnType("integer")
                        .HasColumnName("IS_ZAIISO");

                    b.Property<int>("JibaiAFutan")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_A_FUTAN");

                    b.Property<int>("JibaiBFutan")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_B_FUTAN");

                    b.Property<int>("JibaiCFutan")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_C_FUTAN");

                    b.Property<int>("JibaiDFutan")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_D_FUTAN");

                    b.Property<int>("JibaiHaFutan")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_HA_FUTAN");

                    b.Property<int>("JibaiHeMeisai")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_HE_MEISAI");

                    b.Property<int>("JibaiHeMeisaiCount")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_HE_MEISAI_COUNT");

                    b.Property<int>("JibaiHoSindan")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_HO_SINDAN");

                    b.Property<int>("JibaiHoSindanCount")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_HO_SINDAN_COUNT");

                    b.Property<int>("JibaiITensu")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_I_TENSU");

                    b.Property<int>("JibaiKenpoFutan")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_KENPO_FUTAN");

                    b.Property<int>("JibaiKenpoTensu")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_KENPO_TENSU");

                    b.Property<int>("JibaiNiFutan")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_NI_FUTAN");

                    b.Property<int>("JibaiRoTensu")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_RO_TENSU");

                    b.Property<int>("KaId")
                        .HasColumnType("integer")
                        .HasColumnName("KA_ID");

                    b.Property<int>("KogakuFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_FUTAN");

                    b.Property<int>("KogakuFutan10en")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_FUTAN_10EN");

                    b.Property<int>("KogakuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_KBN");

                    b.Property<int>("KogakuKohi1Limit")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_KOHI1_LIMIT");

                    b.Property<int>("KogakuKohi2Limit")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_KOHI2_LIMIT");

                    b.Property<int>("KogakuKohi3Limit")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_KOHI3_LIMIT");

                    b.Property<int>("KogakuKohi4Limit")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_KOHI4_LIMIT");

                    b.Property<int>("KogakuOverKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_OVER_KBN");

                    b.Property<int>("KogakuTekiyoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_TEKIYO_KBN");

                    b.Property<int>("Kohi1Futan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_FUTAN");

                    b.Property<int>("Kohi1Futan10en")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_FUTAN_10EN");

                    b.Property<string>("Kohi1Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI1_HOUBETU");

                    b.Property<int>("Kohi1IchibuFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_ICHIBU_FUTAN");

                    b.Property<int>("Kohi1IchibuSotogaku")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_ICHIBU_SOTOGAKU");

                    b.Property<int>("Kohi1IchibuSotogaku10en")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_ICHIBU_SOTOGAKU_10EN");

                    b.Property<int>("Kohi1Id")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_ID");

                    b.Property<int>("Kohi1Limit")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_LIMIT");

                    b.Property<string>("Kohi1NameCd")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("KOHI1_NAME_CD");

                    b.Property<int?>("Kohi1Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_NISSU");

                    b.Property<int>("Kohi1OtherFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_OTHER_FUTAN");

                    b.Property<int?>("Kohi1ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_RECE_FUTAN");

                    b.Property<int>("Kohi1ReceKisai")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_RECE_KISAI");

                    b.Property<int?>("Kohi1ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_RECE_KYUFU");

                    b.Property<int?>("Kohi1ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_RECE_TENSU");

                    b.Property<int>("Kohi1Tensu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_TENSU");

                    b.Property<int>("Kohi2Futan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_FUTAN");

                    b.Property<int>("Kohi2Futan10en")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_FUTAN_10EN");

                    b.Property<string>("Kohi2Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI2_HOUBETU");

                    b.Property<int>("Kohi2IchibuFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_ICHIBU_FUTAN");

                    b.Property<int>("Kohi2IchibuSotogaku")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_ICHIBU_SOTOGAKU");

                    b.Property<int>("Kohi2IchibuSotogaku10en")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_ICHIBU_SOTOGAKU_10EN");

                    b.Property<int>("Kohi2Id")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_ID");

                    b.Property<int>("Kohi2Limit")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_LIMIT");

                    b.Property<string>("Kohi2NameCd")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("KOHI2_NAME_CD");

                    b.Property<int?>("Kohi2Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_NISSU");

                    b.Property<int>("Kohi2OtherFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_OTHER_FUTAN");

                    b.Property<int?>("Kohi2ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_RECE_FUTAN");

                    b.Property<int>("Kohi2ReceKisai")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_RECE_KISAI");

                    b.Property<int?>("Kohi2ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_RECE_KYUFU");

                    b.Property<int?>("Kohi2ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_RECE_TENSU");

                    b.Property<int>("Kohi2Tensu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_TENSU");

                    b.Property<int>("Kohi3Futan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_FUTAN");

                    b.Property<int>("Kohi3Futan10en")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_FUTAN_10EN");

                    b.Property<string>("Kohi3Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI3_HOUBETU");

                    b.Property<int>("Kohi3IchibuFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_ICHIBU_FUTAN");

                    b.Property<int>("Kohi3IchibuSotogaku")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_ICHIBU_SOTOGAKU");

                    b.Property<int>("Kohi3IchibuSotogaku10en")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_ICHIBU_SOTOGAKU_10EN");

                    b.Property<int>("Kohi3Id")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_ID");

                    b.Property<int>("Kohi3Limit")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_LIMIT");

                    b.Property<string>("Kohi3NameCd")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("KOHI3_NAME_CD");

                    b.Property<int?>("Kohi3Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_NISSU");

                    b.Property<int>("Kohi3OtherFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_OTHER_FUTAN");

                    b.Property<int?>("Kohi3ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_RECE_FUTAN");

                    b.Property<int>("Kohi3ReceKisai")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_RECE_KISAI");

                    b.Property<int?>("Kohi3ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_RECE_KYUFU");

                    b.Property<int?>("Kohi3ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_RECE_TENSU");

                    b.Property<int>("Kohi3Tensu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_TENSU");

                    b.Property<int>("Kohi4Futan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_FUTAN");

                    b.Property<int>("Kohi4Futan10en")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_FUTAN_10EN");

                    b.Property<string>("Kohi4Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI4_HOUBETU");

                    b.Property<int>("Kohi4IchibuFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_ICHIBU_FUTAN");

                    b.Property<int>("Kohi4IchibuSotogaku")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_ICHIBU_SOTOGAKU");

                    b.Property<int>("Kohi4IchibuSotogaku10en")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_ICHIBU_SOTOGAKU_10EN");

                    b.Property<int>("Kohi4Id")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_ID");

                    b.Property<int>("Kohi4Limit")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_LIMIT");

                    b.Property<string>("Kohi4NameCd")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("KOHI4_NAME_CD");

                    b.Property<int?>("Kohi4Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_NISSU");

                    b.Property<int>("Kohi4OtherFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_OTHER_FUTAN");

                    b.Property<int?>("Kohi4ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_RECE_FUTAN");

                    b.Property<int>("Kohi4ReceKisai")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_RECE_KISAI");

                    b.Property<int?>("Kohi4ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_RECE_KYUFU");

                    b.Property<int?>("Kohi4ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_RECE_TENSU");

                    b.Property<int>("Kohi4Tensu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_TENSU");

                    b.Property<int>("PtFutan")
                        .HasColumnType("integer")
                        .HasColumnName("PT_FUTAN");

                    b.Property<int>("PtRate")
                        .HasColumnType("integer")
                        .HasColumnName("PT_RATE");

                    b.Property<string>("PtStatus")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("PT_STATUS");

                    b.Property<string>("ReceSbt")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("RECE_SBT");

                    b.Property<int>("RousaiIFutan")
                        .HasColumnType("integer")
                        .HasColumnName("ROUSAI_I_FUTAN");

                    b.Property<int>("RousaiRoFutan")
                        .HasColumnType("integer")
                        .HasColumnName("ROUSAI_RO_FUTAN");

                    b.Property<int>("SeikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SEIKYU_KBN");

                    b.Property<int>("Sinkei")
                        .HasColumnType("integer")
                        .HasColumnName("SINKEI");

                    b.Property<int>("TantoId")
                        .HasColumnType("integer")
                        .HasColumnName("TANTO_ID");

                    b.Property<int>("Tenki")
                        .HasColumnType("integer")
                        .HasColumnName("TENKI");

                    b.Property<int>("Tensu")
                        .HasColumnType("integer")
                        .HasColumnName("TENSU");

                    b.Property<string>("Tokki")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI");

                    b.Property<string>("Tokki1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI1");

                    b.Property<string>("Tokki2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI2");

                    b.Property<string>("Tokki3")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI3");

                    b.Property<string>("Tokki4")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI4");

                    b.Property<string>("Tokki5")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI5");

                    b.Property<int>("TotalIchibuFutan")
                        .HasColumnType("integer")
                        .HasColumnName("TOTAL_ICHIBU_FUTAN");

                    b.Property<int>("TotalIchibuFutan10en")
                        .HasColumnType("integer")
                        .HasColumnName("TOTAL_ICHIBU_FUTAN_10EN");

                    b.Property<int>("TotalIryohi")
                        .HasColumnType("integer")
                        .HasColumnName("TOTAL_IRYOHI");

                    b.Property<int>("TotalKogakuLimit")
                        .HasColumnType("integer")
                        .HasColumnName("TOTAL_KOGAKU_LIMIT");

                    b.HasKey("HpId", "SeikyuYm", "PtId", "SinYm", "HokenId");

                    b.ToTable("RECE_INF");
                });

            modelBuilder.Entity("Entity.Tenant.ReceInfEdit", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("SeikyuYm")
                        .HasColumnType("integer")
                        .HasColumnName("SEIKYU_YM")
                        .HasColumnOrder(2);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(3);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID")
                        .HasColumnOrder(5);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(6);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int?>("HokenNissu")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_NISSU");

                    b.Property<int?>("HokenReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_RECE_FUTAN");

                    b.Property<int?>("HokenReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_RECE_TENSU");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("HOUBETU");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("Kohi1Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI1_HOUBETU");

                    b.Property<int?>("Kohi1Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_NISSU");

                    b.Property<int?>("Kohi1ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_RECE_FUTAN");

                    b.Property<int?>("Kohi1ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_RECE_KYUFU");

                    b.Property<int?>("Kohi1ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_RECE_TENSU");

                    b.Property<string>("Kohi2Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI2_HOUBETU");

                    b.Property<int?>("Kohi2Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_NISSU");

                    b.Property<int?>("Kohi2ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_RECE_FUTAN");

                    b.Property<int?>("Kohi2ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_RECE_KYUFU");

                    b.Property<int?>("Kohi2ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_RECE_TENSU");

                    b.Property<string>("Kohi3Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI3_HOUBETU");

                    b.Property<int?>("Kohi3Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_NISSU");

                    b.Property<int?>("Kohi3ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_RECE_FUTAN");

                    b.Property<int?>("Kohi3ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_RECE_KYUFU");

                    b.Property<int?>("Kohi3ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_RECE_TENSU");

                    b.Property<string>("Kohi4Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI4_HOUBETU");

                    b.Property<int?>("Kohi4Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_NISSU");

                    b.Property<int?>("Kohi4ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_RECE_FUTAN");

                    b.Property<int?>("Kohi4ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_RECE_KYUFU");

                    b.Property<int?>("Kohi4ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_RECE_TENSU");

                    b.Property<string>("ReceSbt")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("RECE_SBT");

                    b.Property<string>("Tokki")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI");

                    b.Property<string>("Tokki1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI1");

                    b.Property<string>("Tokki2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI2");

                    b.Property<string>("Tokki3")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI3");

                    b.Property<string>("Tokki4")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI4");

                    b.Property<string>("Tokki5")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI5");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "SeikyuYm", "PtId", "SinYm", "HokenId", "SeqNo");

                    b.ToTable("RECE_INF_EDIT");
                });

            modelBuilder.Entity("Entity.Tenant.ReceInfJd", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("SeikyuYm")
                        .HasColumnType("integer")
                        .HasColumnName("SEIKYU_YM")
                        .HasColumnOrder(2);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(3);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID")
                        .HasColumnOrder(5);

                    b.Property<int>("KohiId")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI_ID")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("FutanSbtCd")
                        .HasColumnType("integer")
                        .HasColumnName("FUTAN_SBT_CD");

                    b.Property<int>("Nissu1")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU1");

                    b.Property<int>("Nissu10")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU10");

                    b.Property<int>("Nissu11")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU11");

                    b.Property<int>("Nissu12")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU12");

                    b.Property<int>("Nissu13")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU13");

                    b.Property<int>("Nissu14")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU14");

                    b.Property<int>("Nissu15")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU15");

                    b.Property<int>("Nissu16")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU16");

                    b.Property<int>("Nissu17")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU17");

                    b.Property<int>("Nissu18")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU18");

                    b.Property<int>("Nissu19")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU19");

                    b.Property<int>("Nissu2")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU2");

                    b.Property<int>("Nissu20")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU20");

                    b.Property<int>("Nissu21")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU21");

                    b.Property<int>("Nissu22")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU22");

                    b.Property<int>("Nissu23")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU23");

                    b.Property<int>("Nissu24")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU24");

                    b.Property<int>("Nissu25")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU25");

                    b.Property<int>("Nissu26")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU26");

                    b.Property<int>("Nissu27")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU27");

                    b.Property<int>("Nissu28")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU28");

                    b.Property<int>("Nissu29")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU29");

                    b.Property<int>("Nissu3")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU3");

                    b.Property<int>("Nissu30")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU30");

                    b.Property<int>("Nissu31")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU31");

                    b.Property<int>("Nissu4")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU4");

                    b.Property<int>("Nissu5")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU5");

                    b.Property<int>("Nissu6")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU6");

                    b.Property<int>("Nissu7")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU7");

                    b.Property<int>("Nissu8")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU8");

                    b.Property<int>("Nissu9")
                        .HasColumnType("integer")
                        .HasColumnName("NISSU9");

                    b.HasKey("HpId", "SeikyuYm", "PtId", "SinYm", "HokenId", "KohiId");

                    b.ToTable("RECE_INF_JD");
                });

            modelBuilder.Entity("Entity.Tenant.ReceInfPreEdit", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("SeikyuYm")
                        .HasColumnType("integer")
                        .HasColumnName("SEIKYU_YM")
                        .HasColumnOrder(2);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(3);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int?>("HokenNissu")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_NISSU");

                    b.Property<int?>("HokenReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_RECE_FUTAN");

                    b.Property<int?>("HokenReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_RECE_TENSU");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("HOUBETU");

                    b.Property<string>("Kohi1Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI1_HOUBETU");

                    b.Property<int?>("Kohi1Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_NISSU");

                    b.Property<int?>("Kohi1ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_RECE_FUTAN");

                    b.Property<int?>("Kohi1ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_RECE_KYUFU");

                    b.Property<int?>("Kohi1ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_RECE_TENSU");

                    b.Property<string>("Kohi2Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI2_HOUBETU");

                    b.Property<int?>("Kohi2Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_NISSU");

                    b.Property<int?>("Kohi2ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_RECE_FUTAN");

                    b.Property<int?>("Kohi2ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_RECE_KYUFU");

                    b.Property<int?>("Kohi2ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_RECE_TENSU");

                    b.Property<string>("Kohi3Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI3_HOUBETU");

                    b.Property<int?>("Kohi3Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_NISSU");

                    b.Property<int?>("Kohi3ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_RECE_FUTAN");

                    b.Property<int?>("Kohi3ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_RECE_KYUFU");

                    b.Property<int?>("Kohi3ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_RECE_TENSU");

                    b.Property<string>("Kohi4Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI4_HOUBETU");

                    b.Property<int?>("Kohi4Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_NISSU");

                    b.Property<int?>("Kohi4ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_RECE_FUTAN");

                    b.Property<int?>("Kohi4ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_RECE_KYUFU");

                    b.Property<int?>("Kohi4ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_RECE_TENSU");

                    b.Property<string>("ReceSbt")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("RECE_SBT");

                    b.Property<string>("Tokki")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI");

                    b.Property<string>("Tokki1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI1");

                    b.Property<string>("Tokki2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI2");

                    b.Property<string>("Tokki3")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI3");

                    b.Property<string>("Tokki4")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI4");

                    b.Property<string>("Tokki5")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI5");

                    b.HasKey("HpId", "SeikyuYm", "PtId", "SinYm", "HokenId");

                    b.ToTable("RECE_INF_PRE_EDIT");
                });

            modelBuilder.Entity("Entity.Tenant.ReceSeikyu", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("PreHokenId")
                        .HasColumnType("integer")
                        .HasColumnName("PRE_HOKEN_ID");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SeikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SEIKYU_KBN");

                    b.Property<int>("SeikyuYm")
                        .HasColumnType("integer")
                        .HasColumnName("SEIKYU_YM");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "SinYm", "SeqNo");

                    b.ToTable("RECE_SEIKYU");
                });

            modelBuilder.Entity("Entity.Tenant.ReceStatus", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SeikyuYm")
                        .HasColumnType("integer")
                        .HasColumnName("SEIKYU_YM")
                        .HasColumnOrder(3);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID")
                        .HasColumnOrder(4);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("FusenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("FUSEN_KBN");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsPaperRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_PAPER_RECE");

                    b.Property<int>("IsPrechecked")
                        .HasColumnType("integer")
                        .HasColumnName("IS_PRECHECKED");

                    b.Property<int>("Output")
                        .HasColumnType("integer")
                        .HasColumnName("OUTPUT");

                    b.Property<int>("StatusKbn")
                        .HasColumnType("integer")
                        .HasColumnName("STATUS_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SeikyuYm", "HokenId", "SinYm");

                    b.ToTable("RECE_STATUS");
                });

            modelBuilder.Entity("Entity.Tenant.RecedenCmtSelect", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("ItemNo")
                        .HasColumnType("integer")
                        .HasColumnName("ITEM_NO")
                        .HasColumnOrder(2);

                    b.Property<int>("EdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("EDA_NO")
                        .HasColumnOrder(3);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(4);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(5);

                    b.Property<string>("CommentCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("COMMENT_CD")
                        .HasColumnOrder(6);

                    b.Property<int>("CondKbn")
                        .HasColumnType("integer")
                        .HasColumnName("COND_KBN");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("IS_INVALID");

                    b.Property<string>("KbnNo")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("KBN_NO");

                    b.Property<int>("NotSanteiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("NOT_SANTEI_KBN");

                    b.Property<int>("NyugaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("NYUGAI_KBN");

                    b.Property<int>("PtStatus")
                        .HasColumnType("integer")
                        .HasColumnName("PT_STATUS");

                    b.Property<int>("SanteiCnt")
                        .HasColumnType("integer")
                        .HasColumnName("SANTEI_CNT");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "ItemNo", "EdaNo", "ItemCd", "StartDate", "CommentCd");

                    b.HasIndex(new[] { "HpId", "ItemCd", "StartDate", "CommentCd", "IsInvalid" }, "RECEDEN_CMT_SELECT_IDX01");

                    b.ToTable("RECEDEN_CMT_SELECT");
                });

            modelBuilder.Entity("Entity.Tenant.RecedenHenJiyuu", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID")
                        .HasColumnOrder(3);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("HenreiJiyuu")
                        .HasColumnType("text")
                        .HasColumnName("HENREI_JIYUU");

                    b.Property<string>("HenreiJiyuuCd")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("HENREI_JIYUU_CD");

                    b.Property<string>("Hosoku")
                        .HasColumnType("text")
                        .HasColumnName("HOSOKU");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "HokenId", "SinYm", "SeqNo");

                    b.ToTable("RECEDEN_HEN_JIYUU");
                });

            modelBuilder.Entity("Entity.Tenant.RecedenRirekiInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID")
                        .HasColumnOrder(3);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("Rireki")
                        .HasColumnType("text")
                        .HasColumnName("RIREKI");

                    b.Property<string>("SearchNo")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("SEARCH_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "HokenId", "SinYm", "SeqNo");

                    b.ToTable("RECEDEN_RIREKI_INF");
                });

            modelBuilder.Entity("Entity.Tenant.ReleasenoteRead", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("USER_ID")
                        .HasColumnOrder(2);

                    b.Property<string>("Version")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("VERSION")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.HasKey("HpId", "UserId", "Version");

                    b.ToTable("RELEASENOTE_READ");
                });

            modelBuilder.Entity("Entity.Tenant.RenkeiConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Biko")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("BIKO");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("IS_INVALID");

                    b.Property<string>("Param")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("PARAM");

                    b.Property<int>("PtNumLength")
                        .HasColumnType("integer")
                        .HasColumnName("PT_NUM_LENGTH");

                    b.Property<int>("RenkeiId")
                        .HasColumnType("integer")
                        .HasColumnName("RENKEI_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("TEMPLATE_ID");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "Id");

                    b.ToTable("RENKEI_CONF");
                });

            modelBuilder.Entity("Entity.Tenant.RenkeiMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("RenkeiId")
                        .HasColumnType("integer")
                        .HasColumnName("RENKEI_ID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("FunctionType")
                        .HasColumnType("integer")
                        .HasColumnName("FUNCTION_TYPE");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("IS_INVALID");

                    b.Property<string>("RenkeiName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("RENKEI_NAME");

                    b.Property<int>("RenkeiSbt")
                        .HasColumnType("integer")
                        .HasColumnName("RENKEI_SBT");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.HasKey("HpId", "RenkeiId");

                    b.ToTable("RENKEI_MST");
                });

            modelBuilder.Entity("Entity.Tenant.RenkeiPathConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("EdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("EDA_NO")
                        .HasColumnOrder(4);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Biko")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("BIKO");

                    b.Property<int>("CharCd")
                        .HasColumnType("integer")
                        .HasColumnName("CHAR_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("Interval")
                        .HasColumnType("integer")
                        .HasColumnName("INTERVAL");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("IS_INVALID");

                    b.Property<string>("Machine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("MACHINE");

                    b.Property<string>("Param")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("PARAM");

                    b.Property<string>("PassWord")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("Path")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("PATH");

                    b.Property<int>("RenkeiId")
                        .HasColumnType("integer")
                        .HasColumnName("RENKEI_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<string>("User")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("USER");

                    b.Property<string>("WorkPath")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("WORK_PATH");

                    b.HasKey("HpId", "EdaNo", "Id");

                    b.ToTable("RENKEI_PATH_CONF");
                });

            modelBuilder.Entity("Entity.Tenant.RenkeiReq", b =>
                {
                    b.Property<long>("ReqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("REQ_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ReqId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("ErrMst")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("ERR_MST");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO");

                    b.Property<int>("ReqSbt")
                        .HasColumnType("integer")
                        .HasColumnName("REQ_SBT");

                    b.Property<string>("ReqType")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("REQ_TYPE");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("STATUS");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("ReqId");

                    b.ToTable("RENKEI_REQ");
                });

            modelBuilder.Entity("Entity.Tenant.RenkeiTemplateMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("TEMPLATE_ID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("File")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("FILE");

                    b.Property<string>("Param")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("PARAM");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<string>("TemplateName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("TEMPLATE_NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.HasKey("HpId", "TemplateId");

                    b.ToTable("RENKEI_TEMPLATE_MST");
                });

            modelBuilder.Entity("Entity.Tenant.RenkeiTimingConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("EventCd")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("EVENT_CD")
                        .HasColumnOrder(4);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("IS_INVALID");

                    b.Property<int>("RenkeiId")
                        .HasColumnType("integer")
                        .HasColumnName("RENKEI_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "EventCd", "Id");

                    b.ToTable("RENKEI_TIMING_CONF");
                });

            modelBuilder.Entity("Entity.Tenant.RenkeiTimingMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("RenkeiId")
                        .HasColumnType("integer")
                        .HasColumnName("RENKEI_ID")
                        .HasColumnOrder(2);

                    b.Property<string>("EventCd")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("EVENT_CD")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("IS_INVALID");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.HasKey("HpId", "RenkeiId", "EventCd");

                    b.ToTable("RENKEI_TIMING_MST");
                });

            modelBuilder.Entity("Entity.Tenant.RoudouMst", b =>
                {
                    b.Property<string>("RoudouCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("ROUDOU_CD")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("RoudouName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("ROUDOU_NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.HasKey("RoudouCd");

                    b.ToTable("ROUDOU_MST");
                });

            modelBuilder.Entity("Entity.Tenant.RousaiGoseiMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GoseiGrp")
                        .HasColumnType("integer")
                        .HasColumnName("GOSEI_GRP")
                        .HasColumnOrder(2);

                    b.Property<string>("GoseiItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("GOSEI_ITEM_CD")
                        .HasColumnOrder(3);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(4);

                    b.Property<int>("SisiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SISI_KBN")
                        .HasColumnOrder(5);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GoseiGrp", "GoseiItemCd", "ItemCd", "SisiKbn", "StartDate");

                    b.ToTable("ROUSAI_GOSEI_MST");
                });

            modelBuilder.Entity("Entity.Tenant.RsvDayComment", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("COMMENT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "SinDate", "SeqNo");

                    b.ToTable("RSV_DAY_COMMENT");
                });

            modelBuilder.Entity("Entity.Tenant.RsvFrameDayPtn", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("RsvFrameId")
                        .HasColumnType("integer")
                        .HasColumnName("RSV_FRAME_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndTime")
                        .HasColumnType("integer")
                        .HasColumnName("END_TIME");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsHoliday")
                        .HasColumnType("integer")
                        .HasColumnName("IS_HOLIDAY");

                    b.Property<int>("Minutes")
                        .HasColumnType("integer")
                        .HasColumnName("MINUTES");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("NUMBER");

                    b.Property<int>("StartTime")
                        .HasColumnType("integer")
                        .HasColumnName("START_TIME");

                    b.Property<int>("UketukeSbt")
                        .HasColumnType("integer")
                        .HasColumnName("UKETUKE_SBT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "RsvFrameId", "SinDate", "SeqNo");

                    b.ToTable("RSV_FRAME_DAY_PTN");
                });

            modelBuilder.Entity("Entity.Tenant.RsvFrameInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("RsvFrameId")
                        .HasColumnType("integer")
                        .HasColumnName("RSV_FRAME_ID")
                        .HasColumnOrder(3);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE")
                        .HasColumnOrder(4);

                    b.Property<int>("StartTime")
                        .HasColumnType("integer")
                        .HasColumnName("START_TIME")
                        .HasColumnOrder(5);

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndTime")
                        .HasColumnType("integer")
                        .HasColumnName("END_TIME");

                    b.Property<int>("FrameNo")
                        .HasColumnType("integer")
                        .HasColumnName("FRAME_NO");

                    b.Property<int>("FrameSbt")
                        .HasColumnType("integer")
                        .HasColumnName("FRAME_SBT");

                    b.Property<int>("IsHoliday")
                        .HasColumnType("integer")
                        .HasColumnName("IS_HOLIDAY");

                    b.Property<long>("Number")
                        .HasColumnType("bigint")
                        .HasColumnName("NUMBER");

                    b.Property<int>("UketukeSbt")
                        .HasColumnType("integer")
                        .HasColumnName("UKETUKE_SBT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "RsvFrameId", "SinDate", "StartTime", "Id");

                    b.ToTable("RSV_FRAME_INF");
                });

            modelBuilder.Entity("Entity.Tenant.RsvFrameMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("RsvFrameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("RSV_FRAME_ID")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RsvFrameId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("KaId")
                        .HasColumnType("integer")
                        .HasColumnName("KA_ID");

                    b.Property<int>("MakeRaiin")
                        .HasColumnType("integer")
                        .HasColumnName("MAKE_RAIIN");

                    b.Property<string>("RsvFrameName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("RSV_FRAME_NAME");

                    b.Property<int>("RsvGrpId")
                        .HasColumnType("integer")
                        .HasColumnName("RSV_GRP_ID");

                    b.Property<int>("SortKey")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_KEY");

                    b.Property<int>("TantoId")
                        .HasColumnType("integer")
                        .HasColumnName("TANTO_ID");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "RsvFrameId");

                    b.ToTable("RSV_FRAME_MST");
                });

            modelBuilder.Entity("Entity.Tenant.RsvFrameWeekPtn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("RsvFrameId")
                        .HasColumnType("integer")
                        .HasColumnName("RSV_FRAME_ID")
                        .HasColumnOrder(3);

                    b.Property<int>("Week")
                        .HasColumnType("integer")
                        .HasColumnName("WEEK")
                        .HasColumnOrder(5);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(6);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("EndTime")
                        .HasColumnType("integer")
                        .HasColumnName("END_TIME");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsHoliday")
                        .HasColumnType("integer")
                        .HasColumnName("IS_HOLIDAY");

                    b.Property<int>("Minutes")
                        .HasColumnType("integer")
                        .HasColumnName("MINUTES");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("NUMBER");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(4);

                    b.Property<int>("StartTime")
                        .HasColumnType("integer")
                        .HasColumnName("START_TIME");

                    b.Property<int>("UketukeSbt")
                        .HasColumnType("integer")
                        .HasColumnName("UKETUKE_SBT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id", "HpId", "RsvFrameId", "Week", "SeqNo");

                    b.ToTable("RSV_FRAME_WEEK_PTN");
                });

            modelBuilder.Entity("Entity.Tenant.RsvFrameWith", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("RsvFrameId")
                        .HasColumnType("integer")
                        .HasColumnName("RSV_FRAME_ID")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("SortKey")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_KEY");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<int>("WithFrameId")
                        .HasColumnType("integer")
                        .HasColumnName("WITH_FRAME_ID")
                        .HasColumnOrder(4);

                    b.HasKey("Id", "HpId", "RsvFrameId");

                    b.ToTable("RSV_FRAME_WITH");
                });

            modelBuilder.Entity("Entity.Tenant.RsvGrpMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("RsvGrpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("RSV_GRP_ID")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RsvGrpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("RsvGrpName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("RSV_GRP_NAME");

                    b.Property<int>("SortKey")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_KEY");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "RsvGrpId");

                    b.ToTable("RSV_GRP_MST");
                });

            modelBuilder.Entity("Entity.Tenant.RsvInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("RsvFrameId")
                        .HasColumnType("integer")
                        .HasColumnName("RSV_FRAME_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE")
                        .HasColumnOrder(3);

                    b.Property<int>("StartTime")
                        .HasColumnType("integer")
                        .HasColumnName("START_TIME")
                        .HasColumnOrder(4);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("KaId")
                        .HasColumnType("integer")
                        .HasColumnName("KA_ID");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("RsvSbt")
                        .HasColumnType("integer")
                        .HasColumnName("RSV_SBT");

                    b.Property<int>("TantoId")
                        .HasColumnType("integer")
                        .HasColumnName("TANTO_ID");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "RsvFrameId", "SinDate", "StartTime", "RaiinNo");

                    b.ToTable("RSV_INF");
                });

            modelBuilder.Entity("Entity.Tenant.RsvRenkeiInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<long>("OtherPtId")
                        .HasColumnType("bigint")
                        .HasColumnName("OTHER_PT_ID");

                    b.Property<long>("OtherSeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("OTHER_SEQ_NO");

                    b.Property<long>("OtherSeqNo2")
                        .HasColumnType("bigint")
                        .HasColumnName("OTHER_SEQ_NO2");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "RaiinNo");

                    b.ToTable("RSV_RENKEI_INF");
                });

            modelBuilder.Entity("Entity.Tenant.RsvRenkeiInfTk", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(2);

                    b.Property<int>("SystemKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SYSTEM_KBN")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<long>("OtherPtId")
                        .HasColumnType("bigint")
                        .HasColumnName("OTHER_PT_ID");

                    b.Property<long>("OtherSeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("OTHER_SEQ_NO");

                    b.Property<long>("OtherSeqNo2")
                        .HasColumnType("bigint")
                        .HasColumnName("OTHER_SEQ_NO2");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "RaiinNo", "SystemKbn");

                    b.ToTable("RSV_RENKEI_INF_TK");
                });

            modelBuilder.Entity("Entity.Tenant.RsvkrtByomei", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("RsvkrtNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RSVKRT_NO")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Byomei")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("BYOMEI");

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("BYOMEI_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("HosokuCmt")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("HOSOKU_CMT");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsNodspKarte")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_KARTE");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_RECE");

                    b.Property<int>("NanbyoCd")
                        .HasColumnType("integer")
                        .HasColumnName("NANBYO_CD");

                    b.Property<int>("SikkanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SIKKAN_KBN");

                    b.Property<int>("SyobyoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SYUBYO_KBN");

                    b.Property<string>("SyusyokuCd1")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD1");

                    b.Property<string>("SyusyokuCd10")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD10");

                    b.Property<string>("SyusyokuCd11")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD11");

                    b.Property<string>("SyusyokuCd12")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD12");

                    b.Property<string>("SyusyokuCd13")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD13");

                    b.Property<string>("SyusyokuCd14")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD14");

                    b.Property<string>("SyusyokuCd15")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD15");

                    b.Property<string>("SyusyokuCd16")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD16");

                    b.Property<string>("SyusyokuCd17")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD17");

                    b.Property<string>("SyusyokuCd18")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD18");

                    b.Property<string>("SyusyokuCd19")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD19");

                    b.Property<string>("SyusyokuCd2")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD2");

                    b.Property<string>("SyusyokuCd20")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD20");

                    b.Property<string>("SyusyokuCd21")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD21");

                    b.Property<string>("SyusyokuCd3")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD3");

                    b.Property<string>("SyusyokuCd4")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD4");

                    b.Property<string>("SyusyokuCd5")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD5");

                    b.Property<string>("SyusyokuCd6")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD6");

                    b.Property<string>("SyusyokuCd7")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD7");

                    b.Property<string>("SyusyokuCd8")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD8");

                    b.Property<string>("SyusyokuCd9")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD9");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "RsvkrtNo", "SeqNo", "Id");

                    b.ToTable("RSVKRT_BYOMEI");
                });

            modelBuilder.Entity("Entity.Tenant.RsvkrtKarteImgInf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("FILE_NAME");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("KarteKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KARTE_KBN");

                    b.Property<string>("Message")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("MESSAGE");

                    b.Property<long>("Position")
                        .HasColumnType("bigint")
                        .HasColumnName("POSITION");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("RsvkrtNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RSVKRT_NO");

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    b.HasKey("Id");

                    b.ToTable("RSVKRT_KARTE_IMG_INF");
                });

            modelBuilder.Entity("Entity.Tenant.RsvkrtKarteInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("RsvkrtNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RSVKRT_NO")
                        .HasColumnOrder(3);

                    b.Property<int>("KarteKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KARTE_KBN")
                        .HasColumnOrder(4);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<byte[]>("RichText")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("RICH_TEXT");

                    b.Property<int>("RsvDate")
                        .HasColumnType("integer")
                        .HasColumnName("RSV_DATE");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "RsvkrtNo", "KarteKbn", "SeqNo");

                    b.ToTable("RSVKRT_KARTE_INF");
                });

            modelBuilder.Entity("Entity.Tenant.RsvkrtMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("RsvkrtNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RSVKRT_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("RsvkrtNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("RsvDate")
                        .HasColumnType("integer")
                        .HasColumnName("RSV_DATE");

                    b.Property<string>("RsvName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("RSV_NAME");

                    b.Property<int>("RsvkrtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("RSVKRT_KBN");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "RsvkrtNo");

                    b.HasIndex("HpId", "PtId", "RsvDate")
                        .IsUnique()
                        .HasFilter("\"RSVKRT_KBN\" = 0 AND \"IS_DELETED\" = 0");

                    b.ToTable("RSVKRT_MST");
                });

            modelBuilder.Entity("Entity.Tenant.RsvkrtOdrInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("RsvkrtNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RSVKRT_NO")
                        .HasColumnOrder(3);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_NO")
                        .HasColumnOrder(4);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_EDA_NO")
                        .HasColumnOrder(5);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(6);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("DaysCnt")
                        .HasColumnType("integer")
                        .HasColumnName("DAYS_CNT");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_PID");

                    b.Property<int>("InoutKbn")
                        .HasColumnType("integer")
                        .HasColumnName("INOUT_KBN");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("OdrKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("ODR_KOUI_KBN");

                    b.Property<string>("RpName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("RP_NAME");

                    b.Property<int>("RsvDate")
                        .HasColumnType("integer")
                        .HasColumnName("RSV_DATE");

                    b.Property<int>("SanteiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SANTEI_KBN");

                    b.Property<int>("SikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SIKYU_KBN");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("SyohoSbt")
                        .HasColumnType("integer")
                        .HasColumnName("SYOHO_SBT");

                    b.Property<int>("TosekiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TOSEKI_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "RsvkrtNo", "RpNo", "RpEdaNo", "Id");

                    b.ToTable("RSVKRT_ODR_INF");
                });

            modelBuilder.Entity("Entity.Tenant.RsvkrtOdrInfCmt", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("RsvkrtNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RSVKRT_NO")
                        .HasColumnOrder(3);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_EDA_NO")
                        .HasColumnOrder(5);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("ROW_NO")
                        .HasColumnOrder(6);

                    b.Property<int>("EdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("EDA_NO")
                        .HasColumnOrder(7);

                    b.Property<string>("CmtCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CMT_CD");

                    b.Property<string>("CmtName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("CMT_NAME");

                    b.Property<string>("CmtOpt")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("CMT_OPT");

                    b.Property<int>("FontColor")
                        .HasColumnType("integer")
                        .HasColumnName("FONT_COLOR");

                    b.Property<int>("RsvDate")
                        .HasColumnType("integer")
                        .HasColumnName("RSV_DATE");

                    b.HasKey("HpId", "PtId", "RsvkrtNo", "RpEdaNo", "RpNo", "RowNo", "EdaNo");

                    b.ToTable("RSVKRT_ODR_INF_CMT");
                });

            modelBuilder.Entity("Entity.Tenant.RsvkrtOdrInfDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("RsvkrtNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RSVKRT_NO")
                        .HasColumnOrder(3);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_NO")
                        .HasColumnOrder(4);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_EDA_NO")
                        .HasColumnOrder(5);

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("ROW_NO")
                        .HasColumnOrder(6);

                    b.Property<string>("Bunkatu")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("BUNKATU");

                    b.Property<string>("CmtName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("CMT_NAME");

                    b.Property<string>("CmtOpt")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("CMT_OPT");

                    b.Property<int>("CommentNewline")
                        .HasColumnType("integer")
                        .HasColumnName("COMMENT_NEWLINE");

                    b.Property<int>("DrugKbn")
                        .HasColumnType("integer")
                        .HasColumnName("DRUG_KBN");

                    b.Property<string>("FontColor")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("FONT_COLOR");

                    b.Property<string>("IpnCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("IPN_CD");

                    b.Property<string>("IpnName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("IPN_NAME");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_RECE");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<string>("ItemName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("ITEM_NAME");

                    b.Property<int>("KohatuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOHATU_KBN");

                    b.Property<string>("Kokuji1")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("KOKUJI1");

                    b.Property<string>("Kokuji2")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("KOKUJI2");

                    b.Property<int>("RsvDate")
                        .HasColumnType("integer")
                        .HasColumnName("RSV_DATE");

                    b.Property<int>("SinKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_KOUI_KBN");

                    b.Property<double>("Suryo")
                        .HasColumnType("double precision")
                        .HasColumnName("SURYO");

                    b.Property<int>("SyohoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SYOHO_KBN");

                    b.Property<int>("SyohoLimitKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SYOHO_LIMIT_KBN");

                    b.Property<double>("TermVal")
                        .HasColumnType("double precision")
                        .HasColumnName("TERM_VAL");

                    b.Property<string>("UnitName")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("UNIT_NAME");

                    b.Property<int>("UnitSbt")
                        .HasColumnType("integer")
                        .HasColumnName("UNIT_SBT");

                    b.Property<int>("YohoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("YOHO_KBN");

                    b.HasKey("HpId", "PtId", "RsvkrtNo", "RpNo", "RpEdaNo", "RowNo");

                    b.ToTable("RSVKRT_ODR_INF_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.SanteiAutoOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SanteiGrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("SANTEI_GRP_CD")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("AddTarget")
                        .HasColumnType("integer")
                        .HasColumnName("ADD_TARGET");

                    b.Property<int>("AddType")
                        .HasColumnType("integer")
                        .HasColumnName("ADD_TYPE");

                    b.Property<int>("CntType")
                        .HasColumnType("integer")
                        .HasColumnName("CNT_TYPE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<long>("MaxCnt")
                        .HasColumnType("bigint")
                        .HasColumnName("MAX_CNT");

                    b.Property<int>("SpCondition")
                        .HasColumnType("integer")
                        .HasColumnName("SP_CONDITION");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<int>("TermCnt")
                        .HasColumnType("integer")
                        .HasColumnName("TERM_CNT");

                    b.Property<int>("TermSbt")
                        .HasColumnType("integer")
                        .HasColumnName("TERM_SBT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id", "HpId", "SanteiGrpCd", "SeqNo");

                    b.ToTable("SANTEI_AUTO_ORDER");
                });

            modelBuilder.Entity("Entity.Tenant.SanteiAutoOrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SanteiGrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("SANTEI_GRP_CD")
                        .HasColumnOrder(3);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<double>("Suryo")
                        .HasColumnType("double precision")
                        .HasColumnName("SURYO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id", "HpId", "SanteiGrpCd", "SeqNo", "ItemCd");

                    b.ToTable("SANTEI_AUTO_ORDER_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.SanteiCntCheck", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("SanteiGrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("SANTEI_GRP_CD")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    b.Property<int>("CntType")
                        .HasColumnType("integer")
                        .HasColumnName("CNT_TYPE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("ErrKbn")
                        .HasColumnType("integer")
                        .HasColumnName("ERR_KBN");

                    b.Property<long>("MaxCnt")
                        .HasColumnType("bigint")
                        .HasColumnName("MAX_CNT");

                    b.Property<int>("SpCondition")
                        .HasColumnType("integer")
                        .HasColumnName("SP_CONDITION");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<string>("TargetCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TARGET_CD");

                    b.Property<int>("TermCnt")
                        .HasColumnType("integer")
                        .HasColumnName("TERM_CNT");

                    b.Property<int>("TermSbt")
                        .HasColumnType("integer")
                        .HasColumnName("TERM_SBT");

                    b.Property<string>("UnitName")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("UNIT_NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "SanteiGrpCd", "SeqNo");

                    b.ToTable("SANTEI_CNT_CHECK");
                });

            modelBuilder.Entity("Entity.Tenant.SanteiGrpDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("SanteiGrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("SANTEI_GRP_CD")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd")
                        .HasColumnType("text")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "SanteiGrpCd", "ItemCd");

                    b.ToTable("SANTEI_GRP_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.SanteiGrpMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("SanteiGrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("SANTEI_GRP_CD")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("SanteiGrpName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("SANTEI_GRP_NAME");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "SanteiGrpCd");

                    b.ToTable("SANTEI_GRP_MST");
                });

            modelBuilder.Entity("Entity.Tenant.SanteiInf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AlertDays")
                        .HasColumnType("integer")
                        .HasColumnName("ALERT_DAYS");

                    b.Property<int>("AlertTerm")
                        .HasColumnType("integer")
                        .HasColumnName("ALERT_TERM");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id");

                    b.ToTable("SANTEI_INF");
                });

            modelBuilder.Entity("Entity.Tenant.SanteiInfDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Byomei")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("BYOMEI");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("COMMENT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<string>("HosokuComment")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("HOSOKU_COMMENT");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<int>("KisanDate")
                        .HasColumnType("integer")
                        .HasColumnName("KISAN_DATE");

                    b.Property<int>("KisanSbt")
                        .HasColumnType("integer")
                        .HasColumnName("KISAN_SBT");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id");

                    b.ToTable("SANTEI_INF_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.SchemaCmtMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("CommentCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("COMMENT_CD")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommentCd"));

                    b.Property<string>("Comment")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("COMMENT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "CommentCd");

                    b.ToTable("SCHEMA_CMT_MST");
                });

            modelBuilder.Entity("Entity.Tenant.SeikaturekiInf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id");

                    b.ToTable("SEIKATUREKI_INF");
                });

            modelBuilder.Entity("Entity.Tenant.SentenceList", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("Sentence")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("SENTENCE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("KarteKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KARTE_KBN");

                    b.Property<long>("Level1")
                        .HasColumnType("bigint")
                        .HasColumnName("LEVEL1");

                    b.Property<long>("Level2")
                        .HasColumnType("bigint")
                        .HasColumnName("LEVEL2");

                    b.Property<long>("Level3")
                        .HasColumnType("bigint")
                        .HasColumnName("LEVEL3");

                    b.Property<int>("NewLine")
                        .HasColumnType("integer")
                        .HasColumnName("NEW_LINE");

                    b.Property<int>("SelectType")
                        .HasColumnType("integer")
                        .HasColumnName("SELECT_TYPE");

                    b.Property<int>("SetCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SENTENCE_CD")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SetCd"));

                    b.Property<int>("SetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SET_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "Sentence");

                    b.ToTable("SENTENCE_LIST");
                });

            modelBuilder.Entity("Entity.Tenant.SessionInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("Machine")
                        .HasColumnType("text")
                        .HasColumnName("MACHINE")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LOGIN_DATE");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("USER_ID");

                    b.HasKey("HpId", "Machine");

                    b.ToTable("SESSION_INF");
                });

            modelBuilder.Entity("Entity.Tenant.SetByomei", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("SetCd")
                        .HasColumnType("integer")
                        .HasColumnName("SET_CD")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    b.Property<string>("Byomei")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("BYOMEI");

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("BYOMEI_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("HosokuCmt")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("HOSOKU_CMT");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsNodspKarte")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_KARTE");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_RECE");

                    b.Property<int>("NanbyoCd")
                        .HasColumnType("integer")
                        .HasColumnName("NANBYO_CD");

                    b.Property<int>("SikkanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SIKKAN_KBN");

                    b.Property<int>("SyobyoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SYUBYO_KBN");

                    b.Property<string>("SyusyokuCd1")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD1");

                    b.Property<string>("SyusyokuCd10")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD10");

                    b.Property<string>("SyusyokuCd11")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD11");

                    b.Property<string>("SyusyokuCd12")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD12");

                    b.Property<string>("SyusyokuCd13")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD13");

                    b.Property<string>("SyusyokuCd14")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD14");

                    b.Property<string>("SyusyokuCd15")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD15");

                    b.Property<string>("SyusyokuCd16")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD16");

                    b.Property<string>("SyusyokuCd17")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD17");

                    b.Property<string>("SyusyokuCd18")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD18");

                    b.Property<string>("SyusyokuCd19")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD19");

                    b.Property<string>("SyusyokuCd2")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD2");

                    b.Property<string>("SyusyokuCd20")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD20");

                    b.Property<string>("SyusyokuCd21")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD21");

                    b.Property<string>("SyusyokuCd3")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD3");

                    b.Property<string>("SyusyokuCd4")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD4");

                    b.Property<string>("SyusyokuCd5")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD5");

                    b.Property<string>("SyusyokuCd6")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD6");

                    b.Property<string>("SyusyokuCd7")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD7");

                    b.Property<string>("SyusyokuCd8")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD8");

                    b.Property<string>("SyusyokuCd9")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("SYUSYOKU_CD9");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id", "HpId", "SetCd", "SeqNo");

                    b.ToTable("SET_BYOMEI");
                });

            modelBuilder.Entity("Entity.Tenant.SetGenerationMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GenerationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("GENERATION_ID")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenerationId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GenerationId");

                    b.ToTable("SET_GENERATION_MST");
                });

            modelBuilder.Entity("Entity.Tenant.SetKarteImgInf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("FILE_NAME");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("KarteKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KARTE_KBN");

                    b.Property<long>("Position")
                        .HasColumnType("bigint")
                        .HasColumnName("POSITION");

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    b.Property<int>("SetCd")
                        .HasColumnType("integer")
                        .HasColumnName("SET_CD");

                    b.HasKey("Id");

                    b.ToTable("SET_KARTE_IMG_INF");
                });

            modelBuilder.Entity("Entity.Tenant.SetKarteInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("SetCd")
                        .HasColumnType("integer")
                        .HasColumnName("SET_CD")
                        .HasColumnOrder(2);

                    b.Property<int>("KarteKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KARTE_KBN")
                        .HasColumnOrder(3);

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<byte[]>("RichText")
                        .HasColumnType("bytea")
                        .HasColumnName("RICH_TEXT");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "SetCd", "KarteKbn", "SeqNo");

                    b.ToTable("SET_KARTE_INF");
                });

            modelBuilder.Entity("Entity.Tenant.SetKbnMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("SetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SET_KBN")
                        .HasColumnOrder(2);

                    b.Property<int>("SetKbnEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("SET_KBN_EDA_NO")
                        .HasColumnOrder(3);

                    b.Property<int>("GenerationId")
                        .HasColumnType("integer")
                        .HasColumnName("GENERATION_ID")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("DocCd")
                        .HasColumnType("integer")
                        .HasColumnName("DOC_CD");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("KaCd")
                        .HasColumnType("integer")
                        .HasColumnName("KA_CD");

                    b.Property<string>("SetKbnName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("SET_KBN_NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "SetKbn", "SetKbnEdaNo", "GenerationId");

                    b.ToTable("SET_KBN_MST");
                });

            modelBuilder.Entity("Entity.Tenant.SetMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("SetCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SET_CD")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SetCd"));

                    b.Property<int>("Color")
                        .HasColumnType("integer")
                        .HasColumnName("COLOR");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("GenerationId")
                        .HasColumnType("integer")
                        .HasColumnName("GENERATION_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsGroup")
                        .HasColumnType("integer")
                        .HasColumnName("IS_GROUP");

                    b.Property<int>("Level1")
                        .HasColumnType("integer")
                        .HasColumnName("LEVEL1");

                    b.Property<int>("Level2")
                        .HasColumnType("integer")
                        .HasColumnName("LEVEL2");

                    b.Property<int>("Level3")
                        .HasColumnType("integer")
                        .HasColumnName("LEVEL3");

                    b.Property<int>("SetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SET_KBN");

                    b.Property<int>("SetKbnEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("SET_KBN_EDA_NO");

                    b.Property<string>("SetName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("SET_NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<int>("WeightKbn")
                        .HasColumnType("integer")
                        .HasColumnName("WEIGHT_KBN");

                    b.HasKey("HpId", "SetCd");

                    b.HasIndex("HpId", "SetCd", "SetKbn", "SetKbnEdaNo", "GenerationId", "Level1", "Level2", "Level3")
                        .IsUnique()
                        .HasFilter("\"IS_DELETED\" = 0");

                    b.ToTable("SET_MST");
                });

            modelBuilder.Entity("Entity.Tenant.SetOdrInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("SetCd")
                        .HasColumnType("integer")
                        .HasColumnName("SET_CD")
                        .HasColumnOrder(2);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_NO")
                        .HasColumnOrder(3);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_EDA_NO")
                        .HasColumnOrder(4);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("DaysCnt")
                        .HasColumnType("integer")
                        .HasColumnName("DAYS_CNT");

                    b.Property<int>("InoutKbn")
                        .HasColumnType("integer")
                        .HasColumnName("INOUT_KBN");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("OdrKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("ODR_KOUI_KBN");

                    b.Property<string>("RpName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("RP_NAME");

                    b.Property<int>("SanteiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SANTEI_KBN");

                    b.Property<int>("SikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SIKYU_KBN");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("SyohoSbt")
                        .HasColumnType("integer")
                        .HasColumnName("SYOHO_SBT");

                    b.Property<int>("TosekiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TOSEKI_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "SetCd", "RpNo", "RpEdaNo", "Id");

                    b.ToTable("SET_ODR_INF");
                });

            modelBuilder.Entity("Entity.Tenant.SetOdrInfCmt", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("SetCd")
                        .HasColumnType("integer")
                        .HasColumnName("SET_CD")
                        .HasColumnOrder(2);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_NO")
                        .HasColumnOrder(3);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_EDA_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("ROW_NO")
                        .HasColumnOrder(5);

                    b.Property<int>("EdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("EDA_NO")
                        .HasColumnOrder(6);

                    b.Property<string>("CmtCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CMT_CD");

                    b.Property<string>("CmtName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("CMT_NAME");

                    b.Property<string>("CmtOpt")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("CMT_OPT");

                    b.Property<int>("FontColor")
                        .HasColumnType("integer")
                        .HasColumnName("FONT_COLOR");

                    b.HasKey("HpId", "SetCd", "RpNo", "RpEdaNo", "RowNo", "EdaNo");

                    b.ToTable("SET_ODR_INF_CMT");
                });

            modelBuilder.Entity("Entity.Tenant.SetOdrInfDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("SetCd")
                        .HasColumnType("integer")
                        .HasColumnName("SET_CD")
                        .HasColumnOrder(2);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_NO")
                        .HasColumnOrder(3);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_EDA_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("ROW_NO")
                        .HasColumnOrder(5);

                    b.Property<string>("Bunkatu")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("BUNKATU");

                    b.Property<string>("CmtName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("CMT_NAME");

                    b.Property<string>("CmtOpt")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("CMT_OPT");

                    b.Property<int>("CommentNewline")
                        .HasColumnType("integer")
                        .HasColumnName("COMMENT_NEWLINE");

                    b.Property<int>("DrugKbn")
                        .HasColumnType("integer")
                        .HasColumnName("DRUG_KBN");

                    b.Property<string>("FontColor")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("FONT_COLOR");

                    b.Property<string>("IpnCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("IPN_CD");

                    b.Property<string>("IpnName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("IPN_NAME");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_RECE");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<string>("ItemName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("ITEM_NAME");

                    b.Property<int>("KohatuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOHATU_KBN");

                    b.Property<string>("Kokuji1")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("KOKUJI1");

                    b.Property<string>("Kokuji2")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("KOKUJI2");

                    b.Property<double>("OdrTermVal")
                        .HasColumnType("double precision")
                        .HasColumnName("ODR_TERM_VAL");

                    b.Property<int>("SinKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_KOUI_KBN");

                    b.Property<double>("Suryo")
                        .HasColumnType("double precision")
                        .HasColumnName("SURYO");

                    b.Property<int>("SyohoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SYOHO_KBN");

                    b.Property<int>("SyohoLimitKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SYOHO_LIMIT_KBN");

                    b.Property<string>("UnitName")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("UNIT_NAME");

                    b.Property<int>("UnitSbt")
                        .HasColumnType("integer")
                        .HasColumnName("UNIT_SBT");

                    b.Property<int>("YohoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("YOHO_KBN");

                    b.HasKey("HpId", "SetCd", "RpNo", "RpEdaNo", "RowNo");

                    b.ToTable("SET_ODR_INF_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.SinKoui", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM")
                        .HasColumnOrder(3);

                    b.Property<int>("RpNo")
                        .HasColumnType("integer")
                        .HasColumnName("RP_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(5);

                    b.Property<string>("CdKbn")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("CD_KBN");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("COUNT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("Day1")
                        .HasColumnType("integer")
                        .HasColumnName("DAY1");

                    b.Property<int>("Day10")
                        .HasColumnType("integer")
                        .HasColumnName("DAY10");

                    b.Property<int>("Day11")
                        .HasColumnType("integer")
                        .HasColumnName("DAY11");

                    b.Property<int>("Day12")
                        .HasColumnType("integer")
                        .HasColumnName("DAY12");

                    b.Property<int>("Day13")
                        .HasColumnType("integer")
                        .HasColumnName("DAY13");

                    b.Property<int>("Day14")
                        .HasColumnType("integer")
                        .HasColumnName("DAY14");

                    b.Property<int>("Day15")
                        .HasColumnType("integer")
                        .HasColumnName("DAY15");

                    b.Property<int>("Day16")
                        .HasColumnType("integer")
                        .HasColumnName("DAY16");

                    b.Property<int>("Day17")
                        .HasColumnType("integer")
                        .HasColumnName("DAY17");

                    b.Property<int>("Day18")
                        .HasColumnType("integer")
                        .HasColumnName("DAY18");

                    b.Property<int>("Day19")
                        .HasColumnType("integer")
                        .HasColumnName("DAY19");

                    b.Property<int>("Day2")
                        .HasColumnType("integer")
                        .HasColumnName("DAY2");

                    b.Property<int>("Day20")
                        .HasColumnType("integer")
                        .HasColumnName("DAY20");

                    b.Property<int>("Day21")
                        .HasColumnType("integer")
                        .HasColumnName("DAY21");

                    b.Property<int>("Day22")
                        .HasColumnType("integer")
                        .HasColumnName("DAY22");

                    b.Property<int>("Day23")
                        .HasColumnType("integer")
                        .HasColumnName("DAY23");

                    b.Property<int>("Day24")
                        .HasColumnType("integer")
                        .HasColumnName("DAY24");

                    b.Property<int>("Day25")
                        .HasColumnType("integer")
                        .HasColumnName("DAY25");

                    b.Property<int>("Day26")
                        .HasColumnType("integer")
                        .HasColumnName("DAY26");

                    b.Property<int>("Day27")
                        .HasColumnType("integer")
                        .HasColumnName("DAY27");

                    b.Property<int>("Day28")
                        .HasColumnType("integer")
                        .HasColumnName("DAY28");

                    b.Property<int>("Day29")
                        .HasColumnType("integer")
                        .HasColumnName("DAY29");

                    b.Property<int>("Day3")
                        .HasColumnType("integer")
                        .HasColumnName("DAY3");

                    b.Property<int>("Day30")
                        .HasColumnType("integer")
                        .HasColumnName("DAY30");

                    b.Property<int>("Day31")
                        .HasColumnType("integer")
                        .HasColumnName("DAY31");

                    b.Property<int>("Day4")
                        .HasColumnType("integer")
                        .HasColumnName("DAY4");

                    b.Property<int>("Day5")
                        .HasColumnType("integer")
                        .HasColumnName("DAY5");

                    b.Property<int>("Day6")
                        .HasColumnType("integer")
                        .HasColumnName("DAY6");

                    b.Property<int>("Day7")
                        .HasColumnType("integer")
                        .HasColumnName("DAY7");

                    b.Property<int>("Day8")
                        .HasColumnType("integer")
                        .HasColumnName("DAY8");

                    b.Property<int>("Day9")
                        .HasColumnType("integer")
                        .HasColumnName("DAY9");

                    b.Property<string>("DetailData")
                        .HasColumnType("text")
                        .HasColumnName("DETAIL_DATA");

                    b.Property<int>("EntenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("ENTEN_KBN");

                    b.Property<int>("HokatuKensa")
                        .HasColumnType("integer")
                        .HasColumnName("HOKATU_KENSA");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_PID");

                    b.Property<int>("InoutKbn")
                        .HasColumnType("integer")
                        .HasColumnName("INOUT_KBN");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsNodspPaperRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_PAPER_RECE");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_RECE");

                    b.Property<int>("JihiSbt")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_SBT");

                    b.Property<int>("KazeiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KAZEI_KBN");

                    b.Property<string>("RecId")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("REC_ID");

                    b.Property<string>("SyukeiSaki")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("SYUKEI_SAKI");

                    b.Property<double>("Ten")
                        .HasColumnType("double precision")
                        .HasColumnName("TEN");

                    b.Property<int>("TenColCount")
                        .HasColumnType("integer")
                        .HasColumnName("TEN_COL_COUNT");

                    b.Property<string>("TenCount")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("TEN_COUNT");

                    b.Property<double>("TotalTen")
                        .HasColumnType("double precision")
                        .HasColumnName("TOTAL_TEN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<double>("Zei")
                        .HasColumnType("double precision")
                        .HasColumnName("ZEI");

                    b.HasKey("HpId", "PtId", "SinYm", "RpNo", "SeqNo");

                    b.ToTable("SIN_KOUI");
                });

            modelBuilder.Entity("Entity.Tenant.SinKouiCount", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM")
                        .HasColumnOrder(3);

                    b.Property<int>("SinDay")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DAY")
                        .HasColumnOrder(4);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(5);

                    b.Property<int>("RpNo")
                        .HasColumnType("integer")
                        .HasColumnName("RP_NO")
                        .HasColumnOrder(6);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(7);

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("COUNT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SinYm", "SinDay", "RaiinNo", "RpNo", "SeqNo");

                    b.ToTable("SIN_KOUI_COUNT");
                });

            modelBuilder.Entity("Entity.Tenant.SinKouiDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM")
                        .HasColumnOrder(3);

                    b.Property<int>("RpNo")
                        .HasColumnType("integer")
                        .HasColumnName("RP_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(5);

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("ROW_NO")
                        .HasColumnOrder(6);

                    b.Property<string>("Cmt1")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("CMT1");

                    b.Property<string>("Cmt2")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("CMT2");

                    b.Property<string>("Cmt3")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("CMT3");

                    b.Property<string>("CmtCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CMT_CD1");

                    b.Property<string>("CmtCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CMT_CD2");

                    b.Property<string>("CmtCd3")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CMT_CD3");

                    b.Property<string>("CmtOpt")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("CMT_OPT");

                    b.Property<string>("CmtOpt1")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("CMT_OPT1");

                    b.Property<string>("CmtOpt2")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("CMT_OPT2");

                    b.Property<string>("CmtOpt3")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("CMT_OPT3");

                    b.Property<int>("FmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("FMT_KBN");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsNodspPaperRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_PAPER_RECE");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_RECE");

                    b.Property<int>("IsNodspRyosyu")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_RYOSYU");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<string>("ItemName")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("ITEM_NAME");

                    b.Property<int>("ItemSbt")
                        .HasColumnType("integer")
                        .HasColumnName("ITEM_SBT");

                    b.Property<string>("OdrItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ODR_ITEM_CD");

                    b.Property<string>("RecId")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("REC_ID");

                    b.Property<double>("Suryo")
                        .HasColumnType("double precision")
                        .HasColumnName("SURYO");

                    b.Property<double>("Suryo2")
                        .HasColumnType("double precision")
                        .HasColumnName("SURYO2");

                    b.Property<double>("Ten")
                        .HasColumnType("double precision")
                        .HasColumnName("TEN");

                    b.Property<int>("UnitCd")
                        .HasColumnType("integer")
                        .HasColumnName("UNIT_CD");

                    b.Property<string>("UnitName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("UNIT_NAME");

                    b.Property<double>("Zei")
                        .HasColumnType("double precision")
                        .HasColumnName("ZEI");

                    b.HasKey("HpId", "PtId", "SinYm", "RpNo", "SeqNo", "RowNo");

                    b.ToTable("SIN_KOUI_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.SinRpInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM")
                        .HasColumnOrder(3);

                    b.Property<int>("RpNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("RP_NO")
                        .HasColumnOrder(4);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RpNo"));

                    b.Property<string>("CdNo")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("CD_NO");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("FirstDay")
                        .HasColumnType("integer")
                        .HasColumnName("FIRST_DAY");

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_KBN");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("KouiData")
                        .HasColumnType("text")
                        .HasColumnName("KOUI_DATA");

                    b.Property<int>("SanteiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SANTEI_KBN");

                    b.Property<int>("SinId")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_ID");

                    b.Property<int>("SinKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_KOUI_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SinYm", "RpNo");

                    b.ToTable("SIN_RP_INF");
                });

            modelBuilder.Entity("Entity.Tenant.SinRpNoInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM")
                        .HasColumnOrder(3);

                    b.Property<int>("SinDay")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DAY")
                        .HasColumnOrder(4);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(5);

                    b.Property<int>("RpNo")
                        .HasColumnType("integer")
                        .HasColumnName("RP_NO")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SinYm", "SinDay", "RaiinNo", "RpNo");

                    b.ToTable("SIN_RP_NO_INF");
                });

            modelBuilder.Entity("Entity.Tenant.SingleDoseMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("UnitName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("UNIT_NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "Id");

                    b.ToTable("SINGLE_DOSE_MST");
                });

            modelBuilder.Entity("Entity.Tenant.SinrekiFilterMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_CD")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NAME");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GrpCd");

                    b.ToTable("SINREKI_FILTER_MST");
                });

            modelBuilder.Entity("Entity.Tenant.SinrekiFilterMstDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("GrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_CD")
                        .HasColumnOrder(3);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GrpCd", "Id");

                    b.ToTable("SINREKI_FILTER_MST_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.SokatuMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("PrefNo")
                        .HasColumnType("integer")
                        .HasColumnName("PREF_NO")
                        .HasColumnOrder(2);

                    b.Property<int>("StartYm")
                        .HasColumnType("integer")
                        .HasColumnName("START_YM")
                        .HasColumnOrder(3);

                    b.Property<int>("ReportEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("REPORT_EDA_NO")
                        .HasColumnOrder(5);

                    b.Property<int>("ReportId")
                        .HasColumnType("integer")
                        .HasColumnName("REPORT_ID")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("DataAll")
                        .HasColumnType("integer")
                        .HasColumnName("DATA_ALL");

                    b.Property<int>("DataDisk")
                        .HasColumnType("integer")
                        .HasColumnName("DATA_DISK");

                    b.Property<int>("DataKbn")
                        .HasColumnType("integer")
                        .HasColumnName("DATA_KBN");

                    b.Property<int>("DataPaper")
                        .HasColumnType("integer")
                        .HasColumnName("DATA_PAPER");

                    b.Property<int>("DiskCnt")
                        .HasColumnType("integer")
                        .HasColumnName("DISK_CNT");

                    b.Property<string>("DiskKind")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("DISK_KIND");

                    b.Property<int>("EndYm")
                        .HasColumnType("integer")
                        .HasColumnName("END_YM");

                    b.Property<int>("IsSort")
                        .HasColumnType("integer")
                        .HasColumnName("IS_SORT");

                    b.Property<int>("PrintNoType")
                        .HasColumnType("integer")
                        .HasColumnName("PRINT_NO_TYPE");

                    b.Property<int>("PrintType")
                        .HasColumnType("integer")
                        .HasColumnName("PRINT_TYPE");

                    b.Property<string>("ReportName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("REPORT_NAME");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PrefNo", "StartYm", "ReportEdaNo", "ReportId");

                    b.ToTable("SOKATU_MST");
                });

            modelBuilder.Entity("Entity.Tenant.StaConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("MenuId")
                        .HasColumnType("integer")
                        .HasColumnName("MENU_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("ConfId")
                        .HasColumnType("integer")
                        .HasColumnName("CONF_ID")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<string>("Val")
                        .HasMaxLength(1200)
                        .HasColumnType("character varying(1200)")
                        .HasColumnName("VAL");

                    b.HasKey("HpId", "MenuId", "ConfId");

                    b.ToTable("STA_CONF");
                });

            modelBuilder.Entity("Entity.Tenant.StaCsv", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Columns")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("COLUMNS");

                    b.Property<string>("ConfName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CONF_NAME");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("DataSbt")
                        .HasColumnType("integer")
                        .HasColumnName("DATA_SBT");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("ReportId")
                        .HasColumnType("integer")
                        .HasColumnName("REPORT_ID");

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("ROW_NO");

                    b.Property<int>("SortKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id");

                    b.ToTable("STA_CSV");
                });

            modelBuilder.Entity("Entity.Tenant.StaGrp", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("ReportId")
                        .HasColumnType("integer")
                        .HasColumnName("REPORT_ID")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "GrpId", "ReportId");

                    b.ToTable("STA_GRP");
                });

            modelBuilder.Entity("Entity.Tenant.StaMenu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("MENU_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MenuId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsPrint")
                        .HasColumnType("integer")
                        .HasColumnName("IS_PRINT");

                    b.Property<string>("MenuName")
                        .HasMaxLength(130)
                        .HasColumnType("character varying(130)")
                        .HasColumnName("MENU_NAME");

                    b.Property<int>("ReportId")
                        .HasColumnType("integer")
                        .HasColumnName("REPORT_ID");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("MenuId");

                    b.ToTable("STA_MENU");
                });

            modelBuilder.Entity("Entity.Tenant.StaMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("ReportId")
                        .HasColumnType("integer")
                        .HasColumnName("REPORT_ID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("ReportName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("REPORT_NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "ReportId");

                    b.ToTable("STA_MST");
                });

            modelBuilder.Entity("Entity.Tenant.SummaryInf", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<byte[]>("Rtext")
                        .HasColumnType("bytea")
                        .HasColumnName("RTEXT");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("Id");

                    b.ToTable("SUMMARY_INF");
                });

            modelBuilder.Entity("Entity.Tenant.SyobyoKeika", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM")
                        .HasColumnOrder(3);

                    b.Property<int>("SinDay")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DAY")
                        .HasColumnOrder(4);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID")
                        .HasColumnOrder(5);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(6);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("Keika")
                        .HasColumnType("text")
                        .HasColumnName("KEIKA");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SinYm", "SinDay", "HokenId", "SeqNo");

                    b.ToTable("SYOBYO_KEIKA");
                });

            modelBuilder.Entity("Entity.Tenant.SyoukiInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM")
                        .HasColumnOrder(3);

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(5);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<string>("Syouki")
                        .HasColumnType("text")
                        .HasColumnName("SYOUKI");

                    b.Property<int>("SyoukiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SYOUKI_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "PtId", "SinYm", "HokenId", "SeqNo");

                    b.ToTable("SYOUKI_INF");
                });

            modelBuilder.Entity("Entity.Tenant.SyoukiKbnMst", b =>
                {
                    b.Property<int>("SyoukiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SYOUKI_KBN")
                        .HasColumnOrder(1);

                    b.Property<int>("StartYm")
                        .HasColumnType("integer")
                        .HasColumnName("START_YM")
                        .HasColumnOrder(2);

                    b.Property<int>("EndYm")
                        .HasColumnType("integer")
                        .HasColumnName("END_YM");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("NAME");

                    b.HasKey("SyoukiKbn", "StartYm");

                    b.ToTable("SYOUKI_KBN_MST");
                });

            modelBuilder.Entity("Entity.Tenant.SystemChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("ErrMessage")
                        .HasColumnType("text")
                        .HasColumnName("ERR_MESSAGE");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("FILE_NAME");

                    b.Property<int>("IsDb")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DB");

                    b.Property<int>("IsDrugPhoto")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DRUG_PHOTO");

                    b.Property<int>("IsMaster")
                        .HasColumnType("integer")
                        .HasColumnName("IS_MASTER");

                    b.Property<int>("IsNote")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NOTE");

                    b.Property<int>("IsPg")
                        .HasColumnType("integer")
                        .HasColumnName("IS_PG");

                    b.Property<int>("IsRun")
                        .HasColumnType("integer")
                        .HasColumnName("IS_RUN");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("STATUS");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<string>("Version")
                        .HasColumnType("text")
                        .HasColumnName("VERSION");

                    b.HasKey("Id");

                    b.ToTable("SYSTEM_CHANGE_LOG");
                });

            modelBuilder.Entity("Entity.Tenant.SystemConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("GrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_CD")
                        .HasColumnOrder(2);

                    b.Property<int>("GrpEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_EDA_NO")
                        .HasColumnOrder(3);

                    b.Property<string>("Biko")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("BIKO");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("Param")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("PARAM");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<double>("Val")
                        .HasColumnType("double precision")
                        .HasColumnName("VAL");

                    b.HasKey("HpId", "GrpCd", "GrpEdaNo");

                    b.ToTable("SYSTEM_CONF");
                });

            modelBuilder.Entity("Entity.Tenant.SystemConfItem", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("MenuId")
                        .HasColumnType("integer")
                        .HasColumnName("MENU_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("ItemName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ITEM_NAME");

                    b.Property<int>("ParamMax")
                        .HasColumnType("integer")
                        .HasColumnName("PARAM_MAX");

                    b.Property<int>("ParamMin")
                        .HasColumnType("integer")
                        .HasColumnName("PARAM_MIN");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<int>("Val")
                        .HasColumnType("integer")
                        .HasColumnName("VAL");

                    b.HasKey("HpId", "MenuId", "SeqNo");

                    b.ToTable("SYSTEM_CONF_ITEM");
                });

            modelBuilder.Entity("Entity.Tenant.SystemConfMenu", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("MenuId")
                        .HasColumnType("integer")
                        .HasColumnName("MENU_ID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("GrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_CD");

                    b.Property<int>("GrpEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_EDA_NO");

                    b.Property<int>("IsParam")
                        .HasColumnType("integer")
                        .HasColumnName("IS_PARAM");

                    b.Property<int>("IsValue")
                        .HasColumnType("integer")
                        .HasColumnName("IS_VALUE");

                    b.Property<int>("IsVisible")
                        .HasColumnType("integer")
                        .HasColumnName("IS_VISIBLE");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<int>("ManagerKbn")
                        .HasColumnType("integer")
                        .HasColumnName("MANAGER_KBN");

                    b.Property<int>("MenuGrp")
                        .HasColumnType("integer")
                        .HasColumnName("MENU_GRP");

                    b.Property<string>("MenuName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("MENU_NAME");

                    b.Property<string>("ParamHint")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("PARAM_HINT");

                    b.Property<int>("ParamMask")
                        .HasColumnType("integer")
                        .HasColumnName("PARAM_MASK");

                    b.Property<double>("ParamMax")
                        .HasColumnType("double precision")
                        .HasColumnName("PARAM_MAX");

                    b.Property<int>("ParamMaxLength")
                        .HasColumnType("integer")
                        .HasColumnName("PARAM_MAX_LENGTH");

                    b.Property<double>("ParamMin")
                        .HasColumnType("double precision")
                        .HasColumnName("PARAM_MIN");

                    b.Property<int>("ParamType")
                        .HasColumnType("integer")
                        .HasColumnName("PARAM_TYPE");

                    b.Property<int>("PathGrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("PATH_GRP_CD");

                    b.Property<int>("PrefNo")
                        .HasColumnType("integer")
                        .HasColumnName("PREF_NO");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<double>("ValMax")
                        .HasColumnType("double precision")
                        .HasColumnName("VAL_MAX");

                    b.Property<double>("ValMin")
                        .HasColumnType("double precision")
                        .HasColumnName("VAL_MIN");

                    b.HasKey("HpId", "MenuId");

                    b.ToTable("SYSTEM_CONF_MENU");
                });

            modelBuilder.Entity("Entity.Tenant.SystemGenerationConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("GrpEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_EDA_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("GrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_CD")
                        .HasColumnOrder(3);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Biko")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("BIKO");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<string>("Param")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("PARAM");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<int>("Val")
                        .HasColumnType("integer")
                        .HasColumnName("VAL");

                    b.HasKey("HpId", "GrpEdaNo", "GrpCd", "Id");

                    b.ToTable("SYSTEM_GENERATION_CONF");
                });

            modelBuilder.Entity("Entity.Tenant.SyunoNyukin", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("AdjustFutan")
                        .HasColumnType("integer")
                        .HasColumnName("ADJUST_FUTAN");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("NyukinCmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NYUKIN_CMT");

                    b.Property<int>("NyukinDate")
                        .HasColumnType("integer")
                        .HasColumnName("NYUKIN_DATE");

                    b.Property<int>("NyukinGaku")
                        .HasColumnType("integer")
                        .HasColumnName("NYUKIN_GAKU");

                    b.Property<string>("NyukinjiDetail")
                        .HasColumnType("text")
                        .HasColumnName("NYUKINJI_DETAIL");

                    b.Property<int>("NyukinjiSeikyu")
                        .HasColumnType("integer")
                        .HasColumnName("NYUKINJI_SEIKYU");

                    b.Property<int>("NyukinjiTensu")
                        .HasColumnType("integer")
                        .HasColumnName("NYUKINJI_TENSU");

                    b.Property<int>("PaymentMethodCd")
                        .HasColumnType("integer")
                        .HasColumnName("PAYMENT_METHOD_CD");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("UketukeSbt")
                        .HasColumnType("integer")
                        .HasColumnName("UKETUKE_SBT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "RaiinNo", "SeqNo");

                    b.ToTable("SYUNO_NYUKIN");
                });

            modelBuilder.Entity("Entity.Tenant.SyunoSeikyu", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(4);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE")
                        .HasColumnOrder(3);

                    b.Property<int>("AdjustFutan")
                        .HasColumnType("integer")
                        .HasColumnName("ADJUST_FUTAN");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("NewAdjustFutan")
                        .HasColumnType("integer")
                        .HasColumnName("NEW_ADJUST_FUTAN");

                    b.Property<string>("NewSeikyuDetail")
                        .HasColumnType("text")
                        .HasColumnName("NEW_SEIKYU_DETAIL");

                    b.Property<int>("NewSeikyuGaku")
                        .HasColumnType("integer")
                        .HasColumnName("NEW_SEIKYU_GAKU");

                    b.Property<int>("NewSeikyuTensu")
                        .HasColumnType("integer")
                        .HasColumnName("NEW_SEIKYU_TENSU");

                    b.Property<int>("NyukinKbn")
                        .HasColumnType("integer")
                        .HasColumnName("NYUKIN_KBN");

                    b.Property<string>("SeikyuDetail")
                        .HasColumnType("text")
                        .HasColumnName("SEIKYU_DETAIL");

                    b.Property<int>("SeikyuGaku")
                        .HasColumnType("integer")
                        .HasColumnName("SEIKYU_GAKU");

                    b.Property<int>("SeikyuTensu")
                        .HasColumnType("integer")
                        .HasColumnName("SEIKYU_TENSU");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "RaiinNo", "PtId", "SinDate");

                    b.ToTable("SYUNO_SEIKYU");
                });

            modelBuilder.Entity("Entity.Tenant.TagGrpMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("TagGrpNo")
                        .HasColumnType("integer")
                        .HasColumnName("TAG_GRP_NO")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("GrpColor")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("GRP_COLOR");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<string>("TagGrpName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("TAG_GRP_NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "TagGrpNo");

                    b.ToTable("TAG_GRP_MST");
                });

            modelBuilder.Entity("Entity.Tenant.TekiouByomeiMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(2);

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("BYOMEI_CD")
                        .HasColumnOrder(3);

                    b.Property<int>("SystemData")
                        .HasColumnType("integer")
                        .HasColumnName("SYSTEM_DATA")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EditKbn")
                        .HasColumnType("integer")
                        .HasColumnName("EDIT_KBN");

                    b.Property<int>("EndYM")
                        .HasColumnType("integer")
                        .HasColumnName("END_YM");

                    b.Property<int>("IsInvalid")
                        .HasColumnType("integer")
                        .HasColumnName("IS_INVALID");

                    b.Property<int>("IsInvalidTokusyo")
                        .HasColumnType("integer")
                        .HasColumnName("IS_INVALID_TOKUSYO");

                    b.Property<int>("StartYM")
                        .HasColumnType("integer")
                        .HasColumnName("START_YM");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "ItemCd", "ByomeiCd", "SystemData");

                    b.ToTable("TEKIOU_BYOMEI_MST");
                });

            modelBuilder.Entity("Entity.Tenant.TekiouByomeiMstExcluded", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "ItemCd", "SeqNo");

                    b.ToTable("TEKIOU_BYOMEI_MST_EXCLUDED");
                });

            modelBuilder.Entity("Entity.Tenant.TemplateDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("TemplateCd")
                        .HasColumnType("integer")
                        .HasColumnName("TEMPLATE_CD")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("ControlId")
                        .HasColumnType("integer")
                        .HasColumnName("CONTROL_ID")
                        .HasColumnOrder(4);

                    b.Property<string>("BackgroundColor")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("BACKGROUND_COLOR");

                    b.Property<int>("ColCount")
                        .HasColumnType("integer")
                        .HasColumnName("COL_COUNT");

                    b.Property<int>("ControlType")
                        .HasColumnType("integer")
                        .HasColumnName("CONTROL_TYPE");

                    b.Property<int>("ControlWidth")
                        .HasColumnType("integer")
                        .HasColumnName("CONTROL_WIDTH");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("Decimal")
                        .HasColumnType("integer")
                        .HasColumnName("DECIMAL");

                    b.Property<string>("DefaultVal")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("DEFAULT_VAL");

                    b.Property<int>("FontBold")
                        .HasColumnType("integer")
                        .HasColumnName("FONT_BOLD");

                    b.Property<string>("FontColor")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("FONT_COLOR");

                    b.Property<int>("FontItalic")
                        .HasColumnType("integer")
                        .HasColumnName("FONT_ITALIC");

                    b.Property<int>("FontUnderLine")
                        .HasColumnType("integer")
                        .HasColumnName("FONT_UNDER_LINE");

                    b.Property<string>("Formula")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("FORMULA");

                    b.Property<int>("Ime")
                        .HasColumnType("integer")
                        .HasColumnName("IME");

                    b.Property<int>("KarteKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KARTE_KBN");

                    b.Property<int>("LeftMargin")
                        .HasColumnType("integer")
                        .HasColumnName("LEFT_MARGIN");

                    b.Property<int>("MenuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("MENU_KBN");

                    b.Property<int>("NewLine")
                        .HasColumnType("integer")
                        .HasColumnName("NEW_LINE");

                    b.Property<int?>("OyaControlId")
                        .HasColumnType("integer")
                        .HasColumnName("OYA_CONTROL_ID");

                    b.Property<string>("RenkeiCd")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("RENKEI_CD");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("TITLE");

                    b.Property<int>("TitleWidth")
                        .HasColumnType("integer")
                        .HasColumnName("TITLE_WIDTH");

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("UNIT");

                    b.Property<int>("UnitWidth")
                        .HasColumnType("integer")
                        .HasColumnName("UNIT_WIDTH");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<double?>("Val")
                        .HasColumnType("double precision")
                        .HasColumnName("VAL");

                    b.Property<int>("Wordwrap")
                        .HasColumnType("integer")
                        .HasColumnName("WORDWRAP");

                    b.HasKey("HpId", "TemplateCd", "SeqNo", "ControlId");

                    b.ToTable("TEMPLATE_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.TemplateDspConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("TemplateCd")
                        .HasColumnType("integer")
                        .HasColumnName("TEMPLATE_CD")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("DspKbn")
                        .HasColumnType("integer")
                        .HasColumnName("DSP_KBN")
                        .HasColumnOrder(4);

                    b.Property<int>("IsDsp")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DSP");

                    b.HasKey("HpId", "TemplateCd", "SeqNo", "DspKbn");

                    b.ToTable("TEMPLATE_DSP_CONF");
                });

            modelBuilder.Entity("Entity.Tenant.TemplateMenuDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("MenuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("MENU_KBN")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("ItemName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ITEM_NAME");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<double?>("Val")
                        .HasColumnType("double precision")
                        .HasColumnName("VAL");

                    b.HasKey("HpId", "MenuKbn", "SeqNo");

                    b.ToTable("TEMPLATE_MENU_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.TemplateMenuMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("MenuKbn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("MENU_KBN")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MenuKbn"));

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("KbnName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("KBN_NAME");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "MenuKbn", "SeqNo");

                    b.ToTable("TEMPLATE_MENU_MST");
                });

            modelBuilder.Entity("Entity.Tenant.TemplateMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("TemplateCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TEMPLATE_CD")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TemplateCd"));

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("InsertionDestination")
                        .HasColumnType("integer")
                        .HasColumnName("INSERTION_DESTINATION");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<string>("Title")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("TITLE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "TemplateCd", "SeqNo");

                    b.ToTable("TEMPLATE_MST");
                });

            modelBuilder.Entity("Entity.Tenant.TenMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(2);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(3);

                    b.Property<int>("AgeCheck")
                        .HasColumnType("integer")
                        .HasColumnName("AGE_CHECK");

                    b.Property<string>("AgekasanCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("AGEKASAN_CD1");

                    b.Property<string>("AgekasanCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("AGEKASAN_CD2");

                    b.Property<string>("AgekasanCd3")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("AGEKASAN_CD3");

                    b.Property<string>("AgekasanCd4")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("AGEKASAN_CD4");

                    b.Property<string>("AgekasanMax1")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("AGEKASAN_MAX1");

                    b.Property<string>("AgekasanMax2")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("AGEKASAN_MAX2");

                    b.Property<string>("AgekasanMax3")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("AGEKASAN_MAX3");

                    b.Property<string>("AgekasanMax4")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("AGEKASAN_MAX4");

                    b.Property<string>("AgekasanMin1")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("AGEKASAN_MIN1");

                    b.Property<string>("AgekasanMin2")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("AGEKASAN_MIN2");

                    b.Property<string>("AgekasanMin3")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("AGEKASAN_MIN3");

                    b.Property<string>("AgekasanMin4")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("AGEKASAN_MIN4");

                    b.Property<int>("AutoFungoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("AUTO_FUNGO_KBN");

                    b.Property<int>("AutoHougouKbn")
                        .HasColumnType("integer")
                        .HasColumnName("AUTO_HOUGOU_KBN");

                    b.Property<int>("BuiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("BUI_KBN");

                    b.Property<int>("ByomeiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("BYOMEI_KBN");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("CAPACITY");

                    b.Property<int>("CdBu")
                        .HasColumnType("integer")
                        .HasColumnName("CD_BU");

                    b.Property<int>("CdEdano")
                        .HasColumnType("integer")
                        .HasColumnName("CD_EDANO");

                    b.Property<string>("CdKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("CD_KBN");

                    b.Property<int>("CdKbnno")
                        .HasColumnType("integer")
                        .HasColumnName("CD_KBNNO");

                    b.Property<int>("CdKouno")
                        .HasColumnType("integer")
                        .HasColumnName("CD_KOUNO");

                    b.Property<int>("CdSyo")
                        .HasColumnType("integer")
                        .HasColumnName("CD_SYO");

                    b.Property<int>("ChusyaDrugSbt")
                        .HasColumnType("integer")
                        .HasColumnName("CHUSYA_DRUG_SBT");

                    b.Property<int>("CmtCol1")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_COL1");

                    b.Property<int>("CmtCol2")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_COL2");

                    b.Property<int>("CmtCol3")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_COL3");

                    b.Property<int>("CmtCol4")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_COL4");

                    b.Property<int>("CmtColKeta1")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_COL_KETA1");

                    b.Property<int>("CmtColKeta2")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_COL_KETA2");

                    b.Property<int>("CmtColKeta3")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_COL_KETA3");

                    b.Property<int>("CmtColKeta4")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_COL_KETA4");

                    b.Property<int>("CmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_KBN");

                    b.Property<int>("CmtSbt")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_SBT");

                    b.Property<double>("CnvTermVal")
                        .HasColumnType("double precision")
                        .HasColumnName("CNV_TERM_VAL");

                    b.Property<string>("CnvUnitName")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("CNV_UNIT_NAME");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("DayCount")
                        .HasColumnType("integer")
                        .HasColumnName("DAY_COUNT");

                    b.Property<double>("DefaultVal")
                        .HasColumnType("double precision")
                        .HasColumnName("DEFAULT_VAL");

                    b.Property<int>("DelDate")
                        .HasColumnType("integer")
                        .HasColumnName("DEL_DATE");

                    b.Property<int>("DrugKanrenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("DRUG_KANREN_KBN");

                    b.Property<int>("DrugKbn")
                        .HasColumnType("integer")
                        .HasColumnName("DRUG_KBN");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("FukubikuKotunanKasan")
                        .HasColumnType("integer")
                        .HasColumnName("FUKUBIKU_KOTUNAN_KASAN");

                    b.Property<int>("FukubikuNaisiKasan")
                        .HasColumnType("integer")
                        .HasColumnName("FUKUBIKU_NAISI_KASAN");

                    b.Property<int>("FukuyoDaytime")
                        .HasColumnType("integer")
                        .HasColumnName("FUKUYO_DAYTIME");

                    b.Property<int>("FukuyoMorning")
                        .HasColumnType("integer")
                        .HasColumnName("FUKUYO_MORNING");

                    b.Property<int>("FukuyoNight")
                        .HasColumnType("integer")
                        .HasColumnName("FUKUYO_NIGHT");

                    b.Property<int>("FukuyoRise")
                        .HasColumnType("integer")
                        .HasColumnName("FUKUYO_RISE");

                    b.Property<int>("FukuyoSleep")
                        .HasColumnType("integer")
                        .HasColumnName("FUKUYO_SLEEP");

                    b.Property<int>("FutekiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("FUTEKI_KBN");

                    b.Property<int>("FutekiSisetuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("FUTEKI_SISETU_KBN");

                    b.Property<int>("GairaiKanriKbn")
                        .HasColumnType("integer")
                        .HasColumnName("GAIRAI_KANRI_KBN");

                    b.Property<int>("GairaiKansen")
                        .HasColumnType("integer")
                        .HasColumnName("GAIRAI_KANSEN");

                    b.Property<int>("GazoKasan")
                        .HasColumnType("integer")
                        .HasColumnName("GAZO_KASAN");

                    b.Property<int>("HandanGrpKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HANDAN_GRP_KBN");

                    b.Property<int>("HandanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HANDAN_KBN");

                    b.Property<int>("HokatuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HOKATU_KBN");

                    b.Property<int>("HokatuKensa")
                        .HasColumnType("integer")
                        .HasColumnName("HOKATU_KENSA");

                    b.Property<int>("Igakukanri")
                        .HasColumnType("integer")
                        .HasColumnName("IGAKUKANRI");

                    b.Property<string>("IpnNameCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("IPN_NAME_CD");

                    b.Property<int>("IsAdopted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_ADOPTED");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsNodspKarte")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_KARTE");

                    b.Property<int>("IsNodspPaperRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_PAPER_RECE");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_RECE");

                    b.Property<int>("IsNodspRyosyu")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_RYOSYU");

                    b.Property<int>("IsNodspYakutai")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_YAKUTAI");

                    b.Property<int>("IsNosearch")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NOSEARCH");

                    b.Property<int>("JibiAgeKasan")
                        .HasColumnType("integer")
                        .HasColumnName("JIBI_AGE_KASAN");

                    b.Property<int>("JibiSyonikokin")
                        .HasColumnType("integer")
                        .HasColumnName("JIBI_SYONIKOKIN");

                    b.Property<int>("JihiSbt")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_SBT");

                    b.Property<int>("Jituday")
                        .HasColumnType("integer")
                        .HasColumnName("JITUDAY");

                    b.Property<int>("JitudayCount")
                        .HasColumnType("integer")
                        .HasColumnName("JITUDAY_COUNT");

                    b.Property<string>("KanaName1")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("KANA_NAME1");

                    b.Property<string>("KanaName2")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("KANA_NAME2");

                    b.Property<string>("KanaName3")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("KANA_NAME3");

                    b.Property<string>("KanaName4")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("KANA_NAME4");

                    b.Property<string>("KanaName5")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("KANA_NAME5");

                    b.Property<string>("KanaName6")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("KANA_NAME6");

                    b.Property<string>("KanaName7")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("KANA_NAME7");

                    b.Property<int>("KansatuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KANSATU_KBN");

                    b.Property<int>("KazeiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KAZEI_KBN");

                    b.Property<int>("KeibuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KEIBU_KBN");

                    b.Property<int>("KeikaDate")
                        .HasColumnType("integer")
                        .HasColumnName("KEIKA_DATE");

                    b.Property<int>("KensaCmt")
                        .HasColumnType("integer")
                        .HasColumnName("KENSA_CMT");

                    b.Property<int>("KensaFukusuSantei")
                        .HasColumnType("integer")
                        .HasColumnName("KENSA_FUKUSU_SANTEI");

                    b.Property<string>("KensaItemCd")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("KENSA_ITEM_CD");

                    b.Property<int>("KensaItemSeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("KENSA_ITEM_SEQ_NO");

                    b.Property<int>("KensaLabel")
                        .HasColumnType("integer")
                        .HasColumnName("KENSA_LABEL");

                    b.Property<int>("KizamiErr")
                        .HasColumnType("integer")
                        .HasColumnName("KIZAMI_ERR");

                    b.Property<int>("KizamiId")
                        .HasColumnType("integer")
                        .HasColumnName("KIZAMI_ID");

                    b.Property<int>("KizamiMax")
                        .HasColumnType("integer")
                        .HasColumnName("KIZAMI_MAX");

                    b.Property<int>("KizamiMin")
                        .HasColumnType("integer")
                        .HasColumnName("KIZAMI_MIN");

                    b.Property<double>("KizamiTen")
                        .HasColumnType("double precision")
                        .HasColumnName("KIZAMI_TEN");

                    b.Property<int>("KizamiVal")
                        .HasColumnType("integer")
                        .HasColumnName("KIZAMI_VAL");

                    b.Property<int>("KohatuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOHATU_KBN");

                    b.Property<int>("KohyoJun")
                        .HasColumnType("integer")
                        .HasColumnName("KOHYO_JUN");

                    b.Property<string>("Kokuji1")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("KOKUJI1");

                    b.Property<string>("Kokuji2")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("KOKUJI2");

                    b.Property<int>("KokujiBetuno")
                        .HasColumnType("integer")
                        .HasColumnName("KOKUJI_BETUNO");

                    b.Property<int>("KokujiBu")
                        .HasColumnType("integer")
                        .HasColumnName("KOKUJI_BU");

                    b.Property<int>("KokujiEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("KOKUJI_EDA_NO");

                    b.Property<string>("KokujiKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("KOKUJI_KBN");

                    b.Property<int>("KokujiKbnNo")
                        .HasColumnType("integer")
                        .HasColumnName("KOKUJI_KBN_NO");

                    b.Property<int>("KokujiKbnno")
                        .HasColumnType("integer")
                        .HasColumnName("KOKUJI_KBNNO");

                    b.Property<int>("KokujiKouNo")
                        .HasColumnType("integer")
                        .HasColumnName("KOKUJI_KOU_NO");

                    b.Property<int>("KokujiSyo")
                        .HasColumnType("integer")
                        .HasColumnName("KOKUJI_SYO");

                    b.Property<int>("KoukiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOUKI_KBN");

                    b.Property<int>("KouseisinKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOUSEISIN_KBN");

                    b.Property<int>("LowWeightKbn")
                        .HasColumnType("integer")
                        .HasColumnName("LOW_WEIGHT_KBN");

                    b.Property<int>("MadokuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("MADOKU_KBN");

                    b.Property<string>("MasterSbt")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("MASTER_SBT");

                    b.Property<int>("MasuiKasan")
                        .HasColumnType("integer")
                        .HasColumnName("MASUI_KASAN");

                    b.Property<int>("MasuiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("MASUI_KBN");

                    b.Property<string>("MaxAge")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("MAX_AGE");

                    b.Property<int>("MaxCount")
                        .HasColumnType("integer")
                        .HasColumnName("MAX_COUNT");

                    b.Property<int>("MaxCountErr")
                        .HasColumnType("integer")
                        .HasColumnName("MAX_COUNT_ERR");

                    b.Property<int>("MaxPrice")
                        .HasColumnType("integer")
                        .HasColumnName("MAX_PRICE");

                    b.Property<int>("MaxTen")
                        .HasColumnType("integer")
                        .HasColumnName("MAX_TEN");

                    b.Property<string>("MinAge")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("MIN_AGE");

                    b.Property<int>("MoniterKasan")
                        .HasColumnType("integer")
                        .HasColumnName("MONITER_KASAN");

                    b.Property<string>("Name")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("NAME");

                    b.Property<double>("OdrTermVal")
                        .HasColumnType("double precision")
                        .HasColumnName("ODR_TERM_VAL");

                    b.Property<string>("OdrUnitName")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("ODR_UNIT_NAME");

                    b.Property<string>("ReceName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("RECE_NAME");

                    b.Property<string>("ReceUnitCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("RECE_UNIT_CD");

                    b.Property<string>("ReceUnitName")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("RECE_UNIT_NAME");

                    b.Property<string>("RenkeiCd1")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("RENKEI_CD1");

                    b.Property<string>("RenkeiCd2")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("RENKEI_CD2");

                    b.Property<int>("RousaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("ROUSAI_KBN");

                    b.Property<string>("RyosyuName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("RYOSYU_NAME");

                    b.Property<int>("SaiketuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SAIKETU_KBN");

                    b.Property<int>("SansoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SANSO_KBN");

                    b.Property<string>("SanteiItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("SANTEI_ITEM_CD");

                    b.Property<int>("SanteigaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SANTEIGAI_KBN");

                    b.Property<int>("SeibutuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SEIBUTU_KBN");

                    b.Property<int>("SekituiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SEKITUI_KBN");

                    b.Property<int>("SelectCmtId")
                        .HasColumnType("integer")
                        .HasColumnName("SELECT_CMT_ID");

                    b.Property<int>("ShortstayOpe")
                        .HasColumnType("integer")
                        .HasColumnName("SHORTSTAY_OPE");

                    b.Property<int>("ShotCnt")
                        .HasColumnType("integer")
                        .HasColumnName("SHOT_CNT");

                    b.Property<int>("SinKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_KOUI_KBN");

                    b.Property<int>("SinkeiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SINKEI_KBN");

                    b.Property<int>("Sisetucd1")
                        .HasColumnType("integer")
                        .HasColumnName("SISETUCD1");

                    b.Property<int>("Sisetucd10")
                        .HasColumnType("integer")
                        .HasColumnName("SISETUCD10");

                    b.Property<int>("Sisetucd2")
                        .HasColumnType("integer")
                        .HasColumnName("SISETUCD2");

                    b.Property<int>("Sisetucd3")
                        .HasColumnType("integer")
                        .HasColumnName("SISETUCD3");

                    b.Property<int>("Sisetucd4")
                        .HasColumnType("integer")
                        .HasColumnName("SISETUCD4");

                    b.Property<int>("Sisetucd5")
                        .HasColumnType("integer")
                        .HasColumnName("SISETUCD5");

                    b.Property<int>("Sisetucd6")
                        .HasColumnType("integer")
                        .HasColumnName("SISETUCD6");

                    b.Property<int>("Sisetucd7")
                        .HasColumnType("integer")
                        .HasColumnName("SISETUCD7");

                    b.Property<int>("Sisetucd8")
                        .HasColumnType("integer")
                        .HasColumnName("SISETUCD8");

                    b.Property<int>("Sisetucd9")
                        .HasColumnType("integer")
                        .HasColumnName("SISETUCD9");

                    b.Property<int>("SisiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SISI_KBN");

                    b.Property<int>("SuryoRoundupKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SURYO_ROUNDUP_KBN");

                    b.Property<string>("SyohinKanren")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("SYOHIN_KANREN");

                    b.Property<int>("SyotiNyuyojiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SYOTI_NYUYOJI_KBN");

                    b.Property<string>("SyukeiSaki")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("SYUKEI_SAKI");

                    b.Property<int>("SyusaiSbt")
                        .HasColumnType("integer")
                        .HasColumnName("SYUSAI_SBT");

                    b.Property<int>("TeigenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TEIGEN_KBN");

                    b.Property<double>("Ten")
                        .HasColumnType("double precision")
                        .HasColumnName("TEN");

                    b.Property<int>("TenId")
                        .HasColumnType("integer")
                        .HasColumnName("TEN_ID");

                    b.Property<string>("TenKbnNo")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("TEN_KBN_NO");

                    b.Property<int>("TimeKasanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TIME_KASAN_KBN");

                    b.Property<int>("ToketuKasan")
                        .HasColumnType("integer")
                        .HasColumnName("TOKETU_KASAN");

                    b.Property<int>("TokuzaiAgeKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TOKUZAI_AGE_KBN");

                    b.Property<int>("TokuzaiSbt")
                        .HasColumnType("integer")
                        .HasColumnName("TOKUZAI_SBT");

                    b.Property<int>("TusokuAge")
                        .HasColumnType("integer")
                        .HasColumnName("TUSOKU_AGE");

                    b.Property<int>("TusokuTargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TUSOKU_TARGET_KBN");

                    b.Property<int>("TyoonpaGyokoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TYOONPA_GYOKO_KBN");

                    b.Property<int>("TyoonpaNaisiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TYOONPA_NAISI_KBN");

                    b.Property<string>("TyuCd")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("TYU_CD");

                    b.Property<string>("TyuSeq")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("TYU_SEQ");

                    b.Property<int>("UpdDate")
                        .HasColumnType("integer")
                        .HasColumnName("UPD_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<string>("YakkaCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("YAKKA_CD");

                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("YJ_CD");

                    b.Property<int>("YohoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("YOHO_KBN");

                    b.Property<int>("ZaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("ZAI_KBN");

                    b.Property<double>("ZaikeiPoint")
                        .HasColumnType("double precision")
                        .HasColumnName("ZAIKEI_POINT");

                    b.Property<int>("ZoueiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("ZOUEI_KBN");

                    b.HasKey("HpId", "ItemCd", "StartDate");

                    b.HasIndex(new[] { "HpId", "ItemCd", "StartDate", "EndDate", "Name", "KanaName1", "KanaName2", "KanaName3", "KanaName4", "KanaName5", "KanaName6", "KanaName7", "IsDeleted", "IsAdopted" }, "TEN_MST_IDX08");

                    b.ToTable("TEN_MST");
                });

            modelBuilder.Entity("Entity.Tenant.TenMstMother", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(2);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(3);

                    b.Property<int>("AgeCheck")
                        .HasColumnType("integer")
                        .HasColumnName("AGE_CHECK");

                    b.Property<string>("AgekasanCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("AGEKASAN_CD1");

                    b.Property<string>("AgekasanCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("AGEKASAN_CD2");

                    b.Property<string>("AgekasanCd3")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("AGEKASAN_CD3");

                    b.Property<string>("AgekasanCd4")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("AGEKASAN_CD4");

                    b.Property<string>("AgekasanMax1")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("AGEKASAN_MAX1");

                    b.Property<string>("AgekasanMax2")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("AGEKASAN_MAX2");

                    b.Property<string>("AgekasanMax3")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("AGEKASAN_MAX3");

                    b.Property<string>("AgekasanMax4")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("AGEKASAN_MAX4");

                    b.Property<string>("AgekasanMin1")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("AGEKASAN_MIN1");

                    b.Property<string>("AgekasanMin2")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("AGEKASAN_MIN2");

                    b.Property<string>("AgekasanMin3")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("AGEKASAN_MIN3");

                    b.Property<string>("AgekasanMin4")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("AGEKASAN_MIN4");

                    b.Property<int>("AutoFungoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("AUTO_FUNGO_KBN");

                    b.Property<int>("AutoHougouKbn")
                        .HasColumnType("integer")
                        .HasColumnName("AUTO_HOUGOU_KBN");

                    b.Property<int>("BuiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("BUI_KBN");

                    b.Property<int>("ByomeiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("BYOMEI_KBN");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("CAPACITY");

                    b.Property<int>("CdBu")
                        .HasColumnType("integer")
                        .HasColumnName("CD_BU");

                    b.Property<int>("CdEdano")
                        .HasColumnType("integer")
                        .HasColumnName("CD_EDANO");

                    b.Property<string>("CdKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("CD_KBN");

                    b.Property<int>("CdKbnno")
                        .HasColumnType("integer")
                        .HasColumnName("CD_KBNNO");

                    b.Property<int>("CdKouno")
                        .HasColumnType("integer")
                        .HasColumnName("CD_KOUNO");

                    b.Property<int>("CdSyo")
                        .HasColumnType("integer")
                        .HasColumnName("CD_SYO");

                    b.Property<int>("ChusyaDrugSbt")
                        .HasColumnType("integer")
                        .HasColumnName("CHUSYA_DRUG_SBT");

                    b.Property<int>("CmtCol1")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_COL1");

                    b.Property<int>("CmtCol2")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_COL2");

                    b.Property<int>("CmtCol3")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_COL3");

                    b.Property<int>("CmtCol4")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_COL4");

                    b.Property<int>("CmtColKeta1")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_COL_KETA1");

                    b.Property<int>("CmtColKeta2")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_COL_KETA2");

                    b.Property<int>("CmtColKeta3")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_COL_KETA3");

                    b.Property<int>("CmtColKeta4")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_COL_KETA4");

                    b.Property<int>("CmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_KBN");

                    b.Property<double>("CnvTermVal")
                        .HasColumnType("double precision")
                        .HasColumnName("CNV_TERM_VAL");

                    b.Property<string>("CnvUnitName")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("CNV_UNIT_NAME");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("DayCount")
                        .HasColumnType("integer")
                        .HasColumnName("DAY_COUNT");

                    b.Property<double>("DefaultVal")
                        .HasColumnType("double precision")
                        .HasColumnName("DEFAULT_VAL");

                    b.Property<int>("DelDate")
                        .HasColumnType("integer")
                        .HasColumnName("DEL_DATE");

                    b.Property<int>("DrugKanrenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("DRUG_KANREN_KBN");

                    b.Property<int>("DrugKbn")
                        .HasColumnType("integer")
                        .HasColumnName("DRUG_KBN");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("FukubikuKotunanKasan")
                        .HasColumnType("integer")
                        .HasColumnName("FUKUBIKU_KOTUNAN_KASAN");

                    b.Property<int>("FukubikuNaisiKasan")
                        .HasColumnType("integer")
                        .HasColumnName("FUKUBIKU_NAISI_KASAN");

                    b.Property<int>("FukuyoDaytime")
                        .HasColumnType("integer")
                        .HasColumnName("FUKUYO_DAYTIME");

                    b.Property<int>("FukuyoMorning")
                        .HasColumnType("integer")
                        .HasColumnName("FUKUYO_MORNING");

                    b.Property<int>("FukuyoNight")
                        .HasColumnType("integer")
                        .HasColumnName("FUKUYO_NIGHT");

                    b.Property<int>("FukuyoRise")
                        .HasColumnType("integer")
                        .HasColumnName("FUKUYO_RISE");

                    b.Property<int>("FukuyoSleep")
                        .HasColumnType("integer")
                        .HasColumnName("FUKUYO_SLEEP");

                    b.Property<int>("FutekiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("FUTEKI_KBN");

                    b.Property<int>("FutekiSisetuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("FUTEKI_SISETU_KBN");

                    b.Property<int>("GairaiKanriKbn")
                        .HasColumnType("integer")
                        .HasColumnName("GAIRAI_KANRI_KBN");

                    b.Property<int>("GazoKasan")
                        .HasColumnType("integer")
                        .HasColumnName("GAZO_KASAN");

                    b.Property<int>("HandanGrpKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HANDAN_GRP_KBN");

                    b.Property<int>("HandanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HANDAN_KBN");

                    b.Property<int>("HokatuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HOKATU_KBN");

                    b.Property<int>("HokatuKensa")
                        .HasColumnType("integer")
                        .HasColumnName("HOKATU_KENSA");

                    b.Property<int>("Igakukanri")
                        .HasColumnType("integer")
                        .HasColumnName("IGAKUKANRI");

                    b.Property<string>("IpnNameCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("IPN_NAME_CD");

                    b.Property<int>("IsAdopted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_ADOPTED");

                    b.Property<int>("IsNodspKarte")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_KARTE");

                    b.Property<int>("IsNodspPaperRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_PAPER_RECE");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_RECE");

                    b.Property<int>("IsNodspRyosyu")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_RYOSYU");

                    b.Property<int>("IsNosearch")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NOSEARCH");

                    b.Property<int>("JihiSbt")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_SBT");

                    b.Property<int>("Jituday")
                        .HasColumnType("integer")
                        .HasColumnName("JITUDAY");

                    b.Property<int>("JitudayCount")
                        .HasColumnType("integer")
                        .HasColumnName("JITUDAY_COUNT");

                    b.Property<string>("KanaName1")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("KANA_NAME1");

                    b.Property<string>("KanaName2")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("KANA_NAME2");

                    b.Property<string>("KanaName3")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("KANA_NAME3");

                    b.Property<string>("KanaName4")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("KANA_NAME4");

                    b.Property<string>("KanaName5")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("KANA_NAME5");

                    b.Property<string>("KanaName6")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("KANA_NAME6");

                    b.Property<string>("KanaName7")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("KANA_NAME7");

                    b.Property<int>("KansatuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KANSATU_KBN");

                    b.Property<int>("KazeiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KAZEI_KBN");

                    b.Property<int>("KeibuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KEIBU_KBN");

                    b.Property<int>("KeikaDate")
                        .HasColumnType("integer")
                        .HasColumnName("KEIKA_DATE");

                    b.Property<int>("KensaCmt")
                        .HasColumnType("integer")
                        .HasColumnName("KENSA_CMT");

                    b.Property<int>("KensaFukusuSantei")
                        .HasColumnType("integer")
                        .HasColumnName("KENSA_FUKUSU_SANTEI");

                    b.Property<string>("KensaItemCd")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("KENSA_ITEM_CD");

                    b.Property<int>("KensaItemSeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("KENSA_ITEM_SEQ_NO");

                    b.Property<int>("KizamiErr")
                        .HasColumnType("integer")
                        .HasColumnName("KIZAMI_ERR");

                    b.Property<int>("KizamiId")
                        .HasColumnType("integer")
                        .HasColumnName("KIZAMI_ID");

                    b.Property<int>("KizamiMax")
                        .HasColumnType("integer")
                        .HasColumnName("KIZAMI_MAX");

                    b.Property<int>("KizamiMin")
                        .HasColumnType("integer")
                        .HasColumnName("KIZAMI_MIN");

                    b.Property<double>("KizamiTen")
                        .HasColumnType("double precision")
                        .HasColumnName("KIZAMI_TEN");

                    b.Property<int>("KizamiVal")
                        .HasColumnType("integer")
                        .HasColumnName("KIZAMI_VAL");

                    b.Property<int>("KohatuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOHATU_KBN");

                    b.Property<int>("KohyoJun")
                        .HasColumnType("integer")
                        .HasColumnName("KOHYO_JUN");

                    b.Property<string>("Kokuji1")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("KOKUJI1");

                    b.Property<string>("Kokuji2")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("KOKUJI2");

                    b.Property<int>("KokujiBu")
                        .HasColumnType("integer")
                        .HasColumnName("KOKUJI_BU");

                    b.Property<int>("KokujiEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("KOKUJI_EDA_NO");

                    b.Property<string>("KokujiKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("KOKUJI_KBN");

                    b.Property<int>("KokujiKbnNo")
                        .HasColumnType("integer")
                        .HasColumnName("KOKUJI_KBN_NO");

                    b.Property<int>("KokujiKouNo")
                        .HasColumnType("integer")
                        .HasColumnName("KOKUJI_KOU_NO");

                    b.Property<int>("KokujiSyo")
                        .HasColumnType("integer")
                        .HasColumnName("KOKUJI_SYO");

                    b.Property<int>("KoukiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOUKI_KBN");

                    b.Property<int>("KouseisinKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOUSEISIN_KBN");

                    b.Property<int>("LowWeightKbn")
                        .HasColumnType("integer")
                        .HasColumnName("LOW_WEIGHT_KBN");

                    b.Property<int>("MadokuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("MADOKU_KBN");

                    b.Property<string>("MasterSbt")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("MASTER_SBT");

                    b.Property<int>("MasuiKasan")
                        .HasColumnType("integer")
                        .HasColumnName("MASUI_KASAN");

                    b.Property<int>("MasuiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("MASUI_KBN");

                    b.Property<string>("MaxAge")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("MAX_AGE");

                    b.Property<int>("MaxCount")
                        .HasColumnType("integer")
                        .HasColumnName("MAX_COUNT");

                    b.Property<int>("MaxCountErr")
                        .HasColumnType("integer")
                        .HasColumnName("MAX_COUNT_ERR");

                    b.Property<int>("MaxPrice")
                        .HasColumnType("integer")
                        .HasColumnName("MAX_PRICE");

                    b.Property<int>("MaxTen")
                        .HasColumnType("integer")
                        .HasColumnName("MAX_TEN");

                    b.Property<string>("MinAge")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("MIN_AGE");

                    b.Property<int>("MoniterKasan")
                        .HasColumnType("integer")
                        .HasColumnName("MONITER_KASAN");

                    b.Property<string>("Name")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("NAME");

                    b.Property<double>("OdrTermVal")
                        .HasColumnType("double precision")
                        .HasColumnName("ODR_TERM_VAL");

                    b.Property<string>("OdrUnitName")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("ODR_UNIT_NAME");

                    b.Property<string>("ReceName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("RECE_NAME");

                    b.Property<string>("ReceUnitCd")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("RECE_UNIT_CD");

                    b.Property<string>("ReceUnitName")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("RECE_UNIT_NAME");

                    b.Property<string>("RenkeiCd1")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("RENKEI_CD1");

                    b.Property<string>("RenkeiCd2")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("RENKEI_CD2");

                    b.Property<int>("RousaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("ROUSAI_KBN");

                    b.Property<string>("RyosyuName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("RYOSYU_NAME");

                    b.Property<int>("SaiketuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SAIKETU_KBN");

                    b.Property<int>("SansoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SANSO_KBN");

                    b.Property<string>("SanteiItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("SANTEI_ITEM_CD");

                    b.Property<int>("SanteigaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SANTEIGAI_KBN");

                    b.Property<int>("SeibutuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SEIBUTU_KBN");

                    b.Property<int>("SekituiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SEKITUI_KBN");

                    b.Property<int>("SelectCmtId")
                        .HasColumnType("integer")
                        .HasColumnName("SELECT_CMT_ID");

                    b.Property<int>("ShortstayOpe")
                        .HasColumnType("integer")
                        .HasColumnName("SHORTSTAY_OPE");

                    b.Property<int>("ShotCnt")
                        .HasColumnType("integer")
                        .HasColumnName("SHOT_CNT");

                    b.Property<int>("SinKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_KOUI_KBN");

                    b.Property<int>("SinkeiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SINKEI_KBN");

                    b.Property<int>("Sisetucd1")
                        .HasColumnType("integer")
                        .HasColumnName("SISETUCD1");

                    b.Property<int>("Sisetucd10")
                        .HasColumnType("integer")
                        .HasColumnName("SISETUCD10");

                    b.Property<int>("Sisetucd2")
                        .HasColumnType("integer")
                        .HasColumnName("SISETUCD2");

                    b.Property<int>("Sisetucd3")
                        .HasColumnType("integer")
                        .HasColumnName("SISETUCD3");

                    b.Property<int>("Sisetucd4")
                        .HasColumnType("integer")
                        .HasColumnName("SISETUCD4");

                    b.Property<int>("Sisetucd5")
                        .HasColumnType("integer")
                        .HasColumnName("SISETUCD5");

                    b.Property<int>("Sisetucd6")
                        .HasColumnType("integer")
                        .HasColumnName("SISETUCD6");

                    b.Property<int>("Sisetucd7")
                        .HasColumnType("integer")
                        .HasColumnName("SISETUCD7");

                    b.Property<int>("Sisetucd8")
                        .HasColumnType("integer")
                        .HasColumnName("SISETUCD8");

                    b.Property<int>("Sisetucd9")
                        .HasColumnType("integer")
                        .HasColumnName("SISETUCD9");

                    b.Property<int>("SisiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SISI_KBN");

                    b.Property<int>("SuryoRoundupKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SURYO_ROUNDUP_KBN");

                    b.Property<string>("SyohinKanren")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("SYOHIN_KANREN");

                    b.Property<int>("SyotiNyuyojiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SYOTI_NYUYOJI_KBN");

                    b.Property<string>("SyukeiSaki")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("SYUKEI_SAKI");

                    b.Property<int>("SyusaiSbt")
                        .HasColumnType("integer")
                        .HasColumnName("SYUSAI_SBT");

                    b.Property<int>("TeigenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TEIGEN_KBN");

                    b.Property<double>("Ten")
                        .HasColumnType("double precision")
                        .HasColumnName("TEN");

                    b.Property<int>("TenId")
                        .HasColumnType("integer")
                        .HasColumnName("TEN_ID");

                    b.Property<string>("TenKbnNo")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("TEN_KBN_NO");

                    b.Property<int>("TimeKasanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TIME_KASAN_KBN");

                    b.Property<int>("ToketuKasan")
                        .HasColumnType("integer")
                        .HasColumnName("TOKETU_KASAN");

                    b.Property<int>("TokuzaiAgeKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TOKUZAI_AGE_KBN");

                    b.Property<int>("TokuzaiSbt")
                        .HasColumnType("integer")
                        .HasColumnName("TOKUZAI_SBT");

                    b.Property<int>("TusokuAge")
                        .HasColumnType("integer")
                        .HasColumnName("TUSOKU_AGE");

                    b.Property<int>("TusokuTargetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TUSOKU_TARGET_KBN");

                    b.Property<int>("TyoonpaGyokoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TYOONPA_GYOKO_KBN");

                    b.Property<int>("TyoonpaNaisiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TYOONPA_NAISI_KBN");

                    b.Property<string>("TyuCd")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("TYU_CD");

                    b.Property<string>("TyuSeq")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("TYU_SEQ");

                    b.Property<int>("UpdDate")
                        .HasColumnType("integer")
                        .HasColumnName("UPD_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<string>("YakkaCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("YAKKA_CD");

                    b.Property<string>("YjCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("YJ_CD");

                    b.Property<int>("YohoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("YOHO_KBN");

                    b.Property<int>("ZaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("ZAI_KBN");

                    b.Property<int>("ZoueiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("ZOUEI_KBN");

                    b.HasKey("HpId", "ItemCd", "StartDate");

                    b.ToTable("TEN_MST_MOTHER");
                });

            modelBuilder.Entity("Entity.Tenant.TimeZoneConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("YoubiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("YOUBI_KBN")
                        .HasColumnOrder(2);

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndTime")
                        .HasColumnType("integer")
                        .HasColumnName("END_TIME");

                    b.Property<int>("IsDelete")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("StartTime")
                        .HasColumnType("integer")
                        .HasColumnName("START_TIME");

                    b.Property<int>("TimeKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TIME_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "YoubiKbn", "SeqNo");

                    b.ToTable("TIME_ZONE_CONF");
                });

            modelBuilder.Entity("Entity.Tenant.TimeZoneDayInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndTime")
                        .HasColumnType("integer")
                        .HasColumnName("END_TIME");

                    b.Property<int>("StartTime")
                        .HasColumnType("integer")
                        .HasColumnName("START_TIME");

                    b.Property<int>("TimeKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TIME_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "Id", "SinDate");

                    b.ToTable("TIME_ZONE_DAY_INF");
                });

            modelBuilder.Entity("Entity.Tenant.TodoGrpMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("TodoGrpNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TODO_GRP_NO")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TodoGrpNo"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("GrpColor")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("GRP_COLOR");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<string>("TodoGrpName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("TODO_GRP_NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "TodoGrpNo");

                    b.ToTable("TODO_GRP_MST");
                });

            modelBuilder.Entity("Entity.Tenant.TodoInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("TodoNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TODO_NO")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TodoNo"));

                    b.Property<int>("TodoEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("TODO_EDA_NO")
                        .HasColumnOrder(3);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(4);

                    b.Property<string>("Cmt1")
                        .HasColumnType("text")
                        .HasColumnName("CMT1");

                    b.Property<string>("Cmt2")
                        .HasColumnType("text")
                        .HasColumnName("CMT2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsDone")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DONE");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<int>("Tanto")
                        .HasColumnType("integer")
                        .HasColumnName("TANTO");

                    b.Property<int>("Term")
                        .HasColumnType("integer")
                        .HasColumnName("TERM");

                    b.Property<int>("TodoGrpNo")
                        .HasColumnType("integer")
                        .HasColumnName("TODO_GRP_NO");

                    b.Property<int>("TodoKbnNo")
                        .HasColumnType("integer")
                        .HasColumnName("TODO_KBN_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "TodoNo", "TodoEdaNo", "PtId");

                    b.ToTable("TODO_INF");
                });

            modelBuilder.Entity("Entity.Tenant.TodoKbnMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("TodoKbnNo")
                        .HasColumnType("integer")
                        .HasColumnName("TODO_KBN_NO")
                        .HasColumnOrder(2);

                    b.Property<int>("ActCd")
                        .HasColumnType("integer")
                        .HasColumnName("ACT_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("TodoKbnName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("TODO_KBN_NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "TodoKbnNo");

                    b.ToTable("TODO_KBN_MST");
                });

            modelBuilder.Entity("Entity.Tenant.TokkiMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("TokkiCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("TOKKI_CD")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<string>("TokkiName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("TOKKI_NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "TokkiCd");

                    b.ToTable("TOKKI_MST");
                });

            modelBuilder.Entity("Entity.Tenant.UketukeSbtDayInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE")
                        .HasColumnOrder(2);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("UketukeSbt")
                        .HasColumnType("integer")
                        .HasColumnName("UKETUKE_SBT");

                    b.HasKey("HpId", "SinDate", "SeqNo");

                    b.ToTable("UKETUKE_SBT_DAY_INF");
                });

            modelBuilder.Entity("Entity.Tenant.UketukeSbtMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("KbnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("KBN_ID")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("KbnId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("KbnName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("KBN_NAME");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "KbnId");

                    b.ToTable("UKETUKE_SBT_MST");
                });

            modelBuilder.Entity("Entity.Tenant.UnitMst", b =>
                {
                    b.Property<int>("UnitCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("UNIT_CD")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UnitCd"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<string>("UnitName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("UNIT_NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("UnitCd");

                    b.ToTable("UNIT_MST");
                });

            modelBuilder.Entity("Entity.Tenant.UserConf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("USER_ID")
                        .HasColumnOrder(2);

                    b.Property<int>("GrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_CD")
                        .HasColumnOrder(3);

                    b.Property<int>("GrpItemCd")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ITEM_CD")
                        .HasColumnOrder(4);

                    b.Property<int>("GrpItemEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ITEM_EDA_NO")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("Param")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("PARAM");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<int>("Val")
                        .HasColumnType("integer")
                        .HasColumnName("VAL");

                    b.HasKey("HpId", "UserId", "GrpCd", "GrpItemCd", "GrpItemEdaNo");

                    b.ToTable("USER_CONF");
                });

            modelBuilder.Entity("Entity.Tenant.UserMst", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("DrName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("DR_NAME");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("JobCd")
                        .HasColumnType("integer")
                        .HasColumnName("JOB_CD");

                    b.Property<int>("KaId")
                        .HasColumnType("integer")
                        .HasColumnName("KA_ID");

                    b.Property<string>("KanaName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("KANA_NAME");

                    b.Property<string>("LoginId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("LOGIN_ID");

                    b.Property<string>("LoginPass")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("LOGIN_PASS");

                    b.Property<int>("ManagerKbn")
                        .HasColumnType("integer")
                        .HasColumnName("MANAGER_KBN");

                    b.Property<string>("MayakuLicenseNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("MAYAKU_LICENSE_NO");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("NAME");

                    b.Property<string>("RenkeiCd1")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("RENKEI_CD1");

                    b.Property<string>("Sname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("SNAME");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id", "HpId");

                    b.ToTable("USER_MST");
                });

            modelBuilder.Entity("Entity.Tenant.UserPermission", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("USER_ID")
                        .HasColumnOrder(2);

                    b.Property<string>("FunctionCd")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("FUNCTION_CD")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("Permission")
                        .HasColumnType("integer")
                        .HasColumnName("PERMISSION");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "UserId", "FunctionCd");

                    b.ToTable("USER_PERMISSION");
                });

            modelBuilder.Entity("Entity.Tenant.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("USER_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("REFRESH_TOKEN")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("TOKEN_EXPIRY_TIME")
                        .HasColumnOrder(3);

                    b.Property<bool>("RefreshTokenIsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("REFRESH_TOKEN_IS_USED")
                        .HasColumnOrder(4);

                    b.HasKey("UserId", "RefreshToken");

                    b.ToTable("USER_TOKEN");
                });

            modelBuilder.Entity("Entity.Tenant.WrkSinKoui", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_KBN")
                        .HasColumnOrder(3);

                    b.Property<int>("RpNo")
                        .HasColumnType("integer")
                        .HasColumnName("RP_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(5);

                    b.Property<string>("CdKbn")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("CD_KBN");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("COUNT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HokatuKensa")
                        .HasColumnType("integer")
                        .HasColumnName("HOKATU_KENSA");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_PID");

                    b.Property<int>("InoutKbn")
                        .HasColumnType("integer")
                        .HasColumnName("INOUT_KBN");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsNodspPaperRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_PAPER_RECE");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_RECE");

                    b.Property<int>("JihiSbt")
                        .HasColumnType("integer")
                        .HasColumnName("JIHI_SBT");

                    b.Property<int>("KazeiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KAZEI_KBN");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<string>("RecId")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("REC_ID");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<string>("SyukeiSaki")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("SYUKEI_SAKI");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "RaiinNo", "HokenKbn", "RpNo", "SeqNo");

                    b.ToTable("WRK_SIN_KOUI");
                });

            modelBuilder.Entity("Entity.Tenant.WrkSinKouiDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_KBN")
                        .HasColumnOrder(3);

                    b.Property<int>("RpNo")
                        .HasColumnType("integer")
                        .HasColumnName("RP_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(5);

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("ROW_NO")
                        .HasColumnOrder(6);

                    b.Property<int>("CdEdano")
                        .HasColumnType("integer")
                        .HasColumnName("CD_EDANO");

                    b.Property<string>("CdKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("CD_KBN");

                    b.Property<int>("CdKbnno")
                        .HasColumnType("integer")
                        .HasColumnName("CD_KBNNO");

                    b.Property<int>("CdKouno")
                        .HasColumnType("integer")
                        .HasColumnName("CD_KOUNO");

                    b.Property<string>("Cmt1")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("CMT1");

                    b.Property<string>("Cmt2")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("CMT2");

                    b.Property<string>("Cmt3")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("CMT3");

                    b.Property<string>("CmtCd1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CMT_CD1");

                    b.Property<string>("CmtCd2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CMT_CD2");

                    b.Property<string>("CmtCd3")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CMT_CD3");

                    b.Property<string>("CmtOpt")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("CMT_OPT");

                    b.Property<string>("CmtOpt1")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("CMT_OPT1");

                    b.Property<string>("CmtOpt2")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("CMT_OPT2");

                    b.Property<string>("CmtOpt3")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("CMT_OPT3");

                    b.Property<int>("FmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("FMT_KBN");

                    b.Property<int>("IsAutoAdd")
                        .HasColumnType("integer")
                        .HasColumnName("IS_AUTO_ADD");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsNodspPaperRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_PAPER_RECE");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_RECE");

                    b.Property<int>("IsNodspRyosyu")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_RYOSYU");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<int>("ItemEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("ITEM_EDA_NO");

                    b.Property<string>("ItemName")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("ITEM_NAME");

                    b.Property<int>("ItemSbt")
                        .HasColumnType("integer")
                        .HasColumnName("ITEM_SBT");

                    b.Property<int>("ItemSeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("ITEM_SEQ_NO");

                    b.Property<string>("Kokuji1")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("KOKUJI1");

                    b.Property<string>("Kokuji2")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("KOKUJI2");

                    b.Property<string>("OdrItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ODR_ITEM_CD");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<string>("RecId")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("REC_ID");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<double>("Suryo")
                        .HasColumnType("double precision")
                        .HasColumnName("SURYO");

                    b.Property<double>("Suryo2")
                        .HasColumnType("double precision")
                        .HasColumnName("SURYO2");

                    b.Property<double>("Ten")
                        .HasColumnType("double precision")
                        .HasColumnName("TEN");

                    b.Property<int>("TenId")
                        .HasColumnType("integer")
                        .HasColumnName("TEN_ID");

                    b.Property<int>("TusokuAge")
                        .HasColumnType("integer")
                        .HasColumnName("TUSOKU_AGE");

                    b.Property<string>("TyuCd")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("TYU_CD");

                    b.Property<string>("TyuSeq")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("TYU_SEQ");

                    b.Property<int>("UnitCd")
                        .HasColumnType("integer")
                        .HasColumnName("UNIT_CD");

                    b.Property<string>("UnitName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("UNIT_NAME");

                    b.HasKey("HpId", "RaiinNo", "HokenKbn", "RpNo", "SeqNo", "RowNo");

                    b.ToTable("WRK_SIN_KOUI_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.WrkSinKouiDetailDel", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_KBN")
                        .HasColumnOrder(3);

                    b.Property<int>("RpNo")
                        .HasColumnType("integer")
                        .HasColumnName("RP_NO")
                        .HasColumnOrder(4);

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO")
                        .HasColumnOrder(5);

                    b.Property<int>("RowNo")
                        .HasColumnType("integer")
                        .HasColumnName("ROW_NO")
                        .HasColumnOrder(6);

                    b.Property<int>("ItemSeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("ITEM_SEQ_NO")
                        .HasColumnOrder(7);

                    b.Property<string>("DelItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("DEL_ITEM_CD");

                    b.Property<int>("DelSbt")
                        .HasColumnType("integer")
                        .HasColumnName("DEL_SBT");

                    b.Property<int>("IsWarning")
                        .HasColumnType("integer")
                        .HasColumnName("IS_WARNING");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SanteiDate")
                        .HasColumnType("integer")
                        .HasColumnName("SANTEI_DATE");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<int>("TermCnt")
                        .HasColumnType("integer")
                        .HasColumnName("TERM_CNT");

                    b.Property<int>("TermSbt")
                        .HasColumnType("integer")
                        .HasColumnName("TERM_SBT");

                    b.HasKey("HpId", "RaiinNo", "HokenKbn", "RpNo", "SeqNo", "RowNo", "ItemSeqNo");

                    b.ToTable("WRK_SIN_KOUI_DETAIL_DEL");
                });

            modelBuilder.Entity("Entity.Tenant.WrkSinRpInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO")
                        .HasColumnOrder(2);

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_KBN")
                        .HasColumnOrder(3);

                    b.Property<int>("RpNo")
                        .HasColumnType("integer")
                        .HasColumnName("RP_NO")
                        .HasColumnOrder(4);

                    b.Property<string>("CdNo")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("CD_NO");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SanteiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SANTEI_KBN");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<int>("SinId")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_ID");

                    b.Property<int>("SinKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_KOUI_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "RaiinNo", "HokenKbn", "RpNo");

                    b.ToTable("WRK_SIN_RP_INF");
                });

            modelBuilder.Entity("Entity.Tenant.YakkaSyusaiMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("YakkaCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("YAKKA_CD")
                        .HasColumnOrder(2);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(3);

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE")
                        .HasColumnOrder(4);

                    b.Property<string>("Biko")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("BIKO");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<string>("Hinmoku")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("HINMOKU");

                    b.Property<int>("IsNotarget")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NOTARGET");

                    b.Property<int>("JunSenpatu")
                        .HasColumnType("integer")
                        .HasColumnName("JUN_SENPATU");

                    b.Property<string>("Kbn")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("KBN");

                    b.Property<string>("Keika")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("KEIKA");

                    b.Property<string>("Seibun")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("SEIBUN");

                    b.Property<int>("SyusaiDate")
                        .HasColumnType("integer")
                        .HasColumnName("SYUSAI_DATE");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("UNIT_NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<double>("Yakka")
                        .HasColumnType("double precision")
                        .HasColumnName("YAKKA");

                    b.HasKey("HpId", "YakkaCd", "ItemCd", "StartDate");

                    b.HasIndex(new[] { "StartDate", "EndDate" }, "YAKKA_SYUSAI_MST_IDX01");

                    b.ToTable("YAKKA_SYUSAI_MST");
                });

            modelBuilder.Entity("Entity.Tenant.YohoInfMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<string>("YohoSuffix")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("YOHO_SUFFIX");

                    b.HasKey("HpId", "ItemCd");

                    b.ToTable("YOHO_INF_MST");
                });

            modelBuilder.Entity("Entity.Tenant.YohoSetMst", b =>
                {
                    b.Property<int>("SetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SET_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SetId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("USER_ID");

                    b.HasKey("SetId");

                    b.ToTable("YOHO_SET_MST");
                });

            modelBuilder.Entity("Entity.Tenant.YoyakuOdrInf", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("YoyakuKarteNo")
                        .HasColumnType("bigint")
                        .HasColumnName("YOYAKU_KARTE_NO")
                        .HasColumnOrder(3);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_NO")
                        .HasColumnOrder(4);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_EDA_NO")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("DaysCnt")
                        .HasColumnType("integer")
                        .HasColumnName("DAYS_CNT");

                    b.Property<int>("InoutKbn")
                        .HasColumnType("integer")
                        .HasColumnName("INOUT_KBN");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("OdrKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("ODR_KOUI_KBN");

                    b.Property<string>("RpName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("RP_NAME");

                    b.Property<int>("SanteiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SANTEI_KBN");

                    b.Property<int>("SikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SIKYU_KBN");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("SyohoSbt")
                        .HasColumnType("integer")
                        .HasColumnName("SYOHO_SBT");

                    b.Property<int>("TosekiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TOSEKI_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<int>("YoyakuDate")
                        .HasColumnType("integer")
                        .HasColumnName("YOYAKU_DATE");

                    b.HasKey("HpId", "PtId", "YoyakuKarteNo", "RpNo", "RpEdaNo");

                    b.ToTable("YOYAKU_ODR_INF");
                });

            modelBuilder.Entity("Entity.Tenant.YoyakuOdrInfDetail", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID")
                        .HasColumnOrder(2);

                    b.Property<long>("YoyakuKarteNo")
                        .HasColumnType("bigint")
                        .HasColumnName("YOYAKU_KARTE_NO")
                        .HasColumnOrder(3);

                    b.Property<long>("RpNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_NO")
                        .HasColumnOrder(4);

                    b.Property<long>("RpEdaNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RP_EDA_NO")
                        .HasColumnOrder(5);

                    b.Property<long>("RowNo")
                        .HasColumnType("bigint")
                        .HasColumnName("ROW_NO")
                        .HasColumnOrder(6);

                    b.Property<string>("Bunkatu")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("BUNKATU");

                    b.Property<string>("CmtName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("CMT_NAME");

                    b.Property<string>("CmtOpt")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("CMT_OPT");

                    b.Property<int>("DrugKbn")
                        .HasColumnType("integer")
                        .HasColumnName("DRUG_KBN");

                    b.Property<int>("FontColor")
                        .HasColumnType("integer")
                        .HasColumnName("FONT_COLOR");

                    b.Property<string>("IpnCd")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("IPN_CD");

                    b.Property<string>("IpnName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("IPN_NAME");

                    b.Property<int>("IsNodspRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_NODSP_RECE");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<string>("ItemName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("ITEM_NAME");

                    b.Property<int>("KohatuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOHATU_KBN");

                    b.Property<int>("Kokuji1")
                        .HasColumnType("integer")
                        .HasColumnName("KOKUJI1");

                    b.Property<int>("SinKouiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_KOUI_KBN");

                    b.Property<double>("Suryo")
                        .HasColumnType("double precision")
                        .HasColumnName("SURYO");

                    b.Property<int>("SyohoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SYOHO_KBN");

                    b.Property<int>("SyohoLimitKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SYOHO_LIMIT_KBN");

                    b.Property<double>("TermVal")
                        .HasColumnType("double precision")
                        .HasColumnName("TERM_VAL");

                    b.Property<string>("UnitName")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("UNIT_NAME");

                    b.Property<int>("UnitSbt")
                        .HasColumnType("integer")
                        .HasColumnName("UNIT_SBT");

                    b.Property<int>("YohoKbn")
                        .HasColumnType("integer")
                        .HasColumnName("YOHO_KBN");

                    b.Property<int>("YoyakuDate")
                        .HasColumnType("integer")
                        .HasColumnName("YOYAKU_DATE");

                    b.HasKey("HpId", "PtId", "YoyakuKarteNo", "RpNo", "RpEdaNo", "RowNo");

                    b.ToTable("YOYAKU_ODR_INF_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.YoyakuSbtMst", b =>
                {
                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID")
                        .HasColumnOrder(1);

                    b.Property<int>("YoyakuSbt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("YOYAKU_SBT")
                        .HasColumnOrder(2);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("YoyakuSbt"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("DefaultCmt")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("DEFAULT_CMT");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("SbtName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("SBT_NAME");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("HpId", "YoyakuSbt");

                    b.ToTable("YOYAKU_SBT_MST");
                });

            modelBuilder.Entity("Entity.Tenant.ZDocInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<int>("CategoryCd")
                        .HasColumnType("integer")
                        .HasColumnName("CATEGORY_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("DspFileName")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("DSP_FILE_NAME");

                    b.Property<string>("FileName")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("FILE_NAME");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsLocked")
                        .HasColumnType("integer")
                        .HasColumnName("IS_LOCKED");

                    b.Property<DateTime?>("LockDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LOCK_DATE");

                    b.Property<int>("LockId")
                        .HasColumnType("integer")
                        .HasColumnName("LOCK_ID");

                    b.Property<string>("LockMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("LOCK_MACHINE");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_DOC_INF");
                });

            modelBuilder.Entity("Entity.Tenant.ZFilingInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<int>("CategoryCd")
                        .HasColumnType("integer")
                        .HasColumnName("CATEGORY_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("DspFileName")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("DSP_FILE_NAME");

                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("FILE_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FileId"));

                    b.Property<string>("FileName")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("FILE_NAME");

                    b.Property<int>("FileNo")
                        .HasColumnType("integer")
                        .HasColumnName("FILE_NO");

                    b.Property<int>("GetDate")
                        .HasColumnType("integer")
                        .HasColumnName("GET_DATE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_FILING_INF");
                });

            modelBuilder.Entity("Entity.Tenant.ZKensaInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Bilirubin")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("BILIRUBIN");

                    b.Property<string>("CenterCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("CENTER_CD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("InoutKbn")
                        .HasColumnType("integer")
                        .HasColumnName("INOUT_KBN");

                    b.Property<long>("IraiCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("IRAI_CD");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IraiCd"));

                    b.Property<int>("IraiDate")
                        .HasColumnType("integer")
                        .HasColumnName("IRAI_DATE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("Nyubi")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("NYUBI");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO");

                    b.Property<int>("ResultCheck")
                        .HasColumnType("integer")
                        .HasColumnName("RESULT_CHECK");

                    b.Property<int>("SikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SIKYU_KBN");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("STATUS");

                    b.Property<int>("TosekiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("TOSEKI_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<string>("Yoketu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("YOKETU");

                    b.HasKey("OpId");

                    b.ToTable("Z_KENSA_INF");
                });

            modelBuilder.Entity("Entity.Tenant.ZKensaInfDetail", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("AbnormalKbn")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("ABNORMAL_KBN");

                    b.Property<string>("CmtCd1")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("CMT_CD1");

                    b.Property<string>("CmtCd2")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("CMT_CD2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<long>("IraiCd")
                        .HasColumnType("bigint")
                        .HasColumnName("IRAI_CD");

                    b.Property<int>("IraiDate")
                        .HasColumnType("integer")
                        .HasColumnName("IRAI_DATE");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("KensaItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("KENSA_ITEM_CD");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO");

                    b.Property<string>("ResultType")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("RESULT_TYPE");

                    b.Property<string>("ResultVal")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("RESULT_VAL");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_KENSA_INF_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.ZLimitCntListInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Biko")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("BIKO");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_PID");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("KohiId")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI_ID");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("OyaRaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("OYA_RAIIN_NO");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<string>("SortKey")
                        .HasMaxLength(61)
                        .HasColumnType("character varying(61)")
                        .HasColumnName("SORT_KEY");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_LIMIT_CNT_LIST_INF");
                });

            modelBuilder.Entity("Entity.Tenant.ZLimitListInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Biko")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("BIKO");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("FutanGaku")
                        .HasColumnType("integer")
                        .HasColumnName("FUTAN_GAKU");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_PID");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("KohiId")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI_ID");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<string>("SortKey")
                        .HasMaxLength(61)
                        .HasColumnType("character varying(61)")
                        .HasColumnName("SORT_KEY");

                    b.Property<int>("TotalGaku")
                        .HasColumnType("integer")
                        .HasColumnName("TOTAL_GAKU");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_LIMIT_LIST_INF");
                });

            modelBuilder.Entity("Entity.Tenant.ZMonshinInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("GetKbn")
                        .HasColumnType("integer")
                        .HasColumnName("GET_KBN");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO");

                    b.Property<string>("Rtext")
                        .HasColumnType("text")
                        .HasColumnName("RTEXT");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_MONSHIN_INF");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtAlrgyDrug", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("DrugName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("DRUG_NAME");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_ALRGY_DRUG");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtAlrgyElse", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("AlrgyName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ALRGY_NAME");

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_ALRGY_ELSE");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtAlrgyFood", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("AlrgyKbn")
                        .HasColumnType("text")
                        .HasColumnName("ALRGY_KBN");

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_ALRGY_FOOD");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtCmtInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_CMT_INF");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtFamily", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Biko")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("BIKO");

                    b.Property<int>("Birthday")
                        .HasColumnType("integer")
                        .HasColumnName("BIRTHDAY");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<long>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("FAMILY_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FamilyId"));

                    b.Property<long>("FamilyPtId")
                        .HasColumnType("bigint")
                        .HasColumnName("FAMILY_PT_ID");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDead")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DEAD");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsSeparated")
                        .HasColumnType("integer")
                        .HasColumnName("IS_SEPARATED");

                    b.Property<string>("KanaName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("KANA_NAME");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NAME");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("PARENT_ID");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("Sex")
                        .HasColumnType("integer")
                        .HasColumnName("SEX");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<string>("ZokugaraCd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ZOKUGARA_CD");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_FAMILY");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtFamilyReki", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Byomei")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("BYOMEI");

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("BYOMEI_CD");

                    b.Property<string>("ByotaiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("BYOTAI_CD");

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<long>("FamilyId")
                        .HasColumnType("bigint")
                        .HasColumnName("FAMILY_ID");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_FAMILY_REKI");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtGrpInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("GroupCode")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("GRP_CODE");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_GRP_INF");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtHokenCheck", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("CheckCmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CHECK_CMT");

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CHECK_DATE");

                    b.Property<int>("CheckId")
                        .HasColumnType("integer")
                        .HasColumnName("CHECK_ID");

                    b.Property<string>("CheckMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CHECK_MACHINE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HokenGrp")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_GRP");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtID")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_HOKEN_CHECK");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtHokenInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Bango")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("BANGO");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("EdaNo")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("EDA_NO");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("Gendogaku")
                        .HasColumnType("integer")
                        .HasColumnName("GENDOGAKU");

                    b.Property<int>("GenmenGaku")
                        .HasColumnType("integer")
                        .HasColumnName("GENMEN_GAKU");

                    b.Property<int>("GenmenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("GENMEN_KBN");

                    b.Property<int>("GenmenRate")
                        .HasColumnType("integer")
                        .HasColumnName("GENMEN_RATE");

                    b.Property<int>("HokenEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_EDA_NO");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID");

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_KBN");

                    b.Property<int>("HokenNo")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_NO");

                    b.Property<string>("HokensyaAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("HOKENSYA_ADDRESS");

                    b.Property<string>("HokensyaName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("HOKENSYA_NAME");

                    b.Property<string>("HokensyaNo")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("HOKENSYA_NO");

                    b.Property<string>("HokensyaPost")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("HOKENSYA_POST");

                    b.Property<string>("HokensyaTel")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("HOKENSYA_TEL");

                    b.Property<int>("HonkeKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HONKE_KBN");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("HOUBETU");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("JibaiHokenName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("JIBAI_HOKEN_NAME");

                    b.Property<string>("JibaiHokenTanto")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("JIBAI_HOKEN_TANTO");

                    b.Property<string>("JibaiHokenTel")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("JIBAI_HOKEN_TEL");

                    b.Property<int>("JibaiJyusyouDate")
                        .HasColumnType("integer")
                        .HasColumnName("JIBAI_JYUSYOU_DATE");

                    b.Property<int>("KeizokuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KEIZOKU_KBN");

                    b.Property<string>("Kigo")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("KIGO");

                    b.Property<int>("KofuDate")
                        .HasColumnType("integer")
                        .HasColumnName("KOFU_DATE");

                    b.Property<int>("KogakuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_KBN");

                    b.Property<int>("KogakuType")
                        .HasColumnType("integer")
                        .HasColumnName("KOGAKU_TYPE");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("Rate")
                        .HasColumnType("integer")
                        .HasColumnName("RATE");

                    b.Property<string>("RousaiCityName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ROUSAI_CITY_NAME");

                    b.Property<string>("RousaiJigyosyoName")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("ROUSAI_JIGYOSYO_NAME");

                    b.Property<string>("RousaiKantokuCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("ROUSAI_KANTOKU_CD");

                    b.Property<string>("RousaiKofuNo")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("ROUSAI_KOFU_NO");

                    b.Property<string>("RousaiPrefName")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ROUSAI_PREF_NAME");

                    b.Property<int>("RousaiReceCount")
                        .HasColumnType("integer")
                        .HasColumnName("ROUSAI_RECE_COUNT");

                    b.Property<string>("RousaiRoudouCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("ROUSAI_ROUDOU_CD");

                    b.Property<int>("RousaiSaigaiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("ROUSAI_SAIGAI_KBN");

                    b.Property<string>("RousaiSyobyoCd")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("ROUSAI_SYOBYO_CD");

                    b.Property<int>("RousaiSyobyoDate")
                        .HasColumnType("integer")
                        .HasColumnName("ROUSAI_SYOBYO_DATE");

                    b.Property<int>("RyoyoEndDate")
                        .HasColumnType("integer")
                        .HasColumnName("RYOYO_END_DATE");

                    b.Property<int>("RyoyoStartDate")
                        .HasColumnType("integer")
                        .HasColumnName("RYOYO_START_DATE");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SikakuDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIKAKU_DATE");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<int>("SyokumuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SYOKUMU_KBN");

                    b.Property<int>("TasukaiYm")
                        .HasColumnType("integer")
                        .HasColumnName("TASUKAI_YM");

                    b.Property<string>("Tokki1")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("TOKKI1");

                    b.Property<string>("Tokki2")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("TOKKI2");

                    b.Property<string>("Tokki3")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("TOKKI3");

                    b.Property<string>("Tokki4")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("TOKKI4");

                    b.Property<string>("Tokki5")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("TOKKI5");

                    b.Property<int>("TokureiYm1")
                        .HasColumnType("integer")
                        .HasColumnName("TOKUREI_YM1");

                    b.Property<int>("TokureiYm2")
                        .HasColumnType("integer")
                        .HasColumnName("TOKUREI_YM2");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_HOKEN_INF");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtHokenPattern", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID");

                    b.Property<int>("HokenKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_KBN");

                    b.Property<string>("HokenMemo")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("HOKEN_MEMO");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_PID");

                    b.Property<int>("HokenSbtCd")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_SBT_CD");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("Kohi1Id")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_ID");

                    b.Property<int>("Kohi2Id")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_ID");

                    b.Property<int>("Kohi3Id")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_ID");

                    b.Property<int>("Kohi4Id")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_ID");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_HOKEN_PATTERN");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtHokenScan", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("FILE_NAME");

                    b.Property<int>("HokenGrp")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_GRP");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_HOKEN_SCAN");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<int>("Birthday")
                        .HasColumnType("integer")
                        .HasColumnName("BIRTHDAY");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("DeathDate")
                        .HasColumnType("integer")
                        .HasColumnName("DEATH_DATE");

                    b.Property<string>("HomeAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("HOME_ADDRESS1");

                    b.Property<string>("HomeAddress2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("HOME_ADDRESS2");

                    b.Property<string>("HomePost")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("HOME_POST");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDead")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DEAD");

                    b.Property<int>("IsDelete")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETE");

                    b.Property<int>("IsRyosyoDetail")
                        .HasColumnType("integer")
                        .HasColumnName("IS_RYOSYO_DETAIL");

                    b.Property<int>("IsTester")
                        .HasColumnType("integer")
                        .HasColumnName("IS_TESTER");

                    b.Property<string>("Job")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("JOB");

                    b.Property<string>("KanaName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("KANA_NAME");

                    b.Property<int>("LimitConsFlg")
                        .HasColumnType("integer")
                        .HasColumnName("LIMIT_CONS_FLG");

                    b.Property<string>("Mail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("MAIL");

                    b.Property<int>("MainHokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("MAIN_HOKEN_PID");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NAME");

                    b.Property<string>("OfficeAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OFFICE_ADDRESS1");

                    b.Property<string>("OfficeAddress2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OFFICE_ADDRESS2");

                    b.Property<string>("OfficeMemo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OFFICE_MEMO");

                    b.Property<string>("OfficeName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OFFICE_NAME");

                    b.Property<string>("OfficePost")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("OFFICE_POST");

                    b.Property<string>("OfficeTel")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("OFFICE_TEL");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<int>("PrimaryDoctor")
                        .HasColumnType("integer")
                        .HasColumnName("PRIMARY_DOCTOR");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("PtNum")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_NUM");

                    b.Property<long>("ReferenceNo")
                        .HasColumnType("bigint")
                        .HasColumnName("REFERENCE_NO");

                    b.Property<string>("RenrakuAddress1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("RENRAKU_ADDRESS1");

                    b.Property<string>("RenrakuAddress2")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("RENRAKU_ADDRESS2");

                    b.Property<string>("RenrakuMemo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("RENRAKU_MEMO");

                    b.Property<string>("RenrakuName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("RENRAKU_NAME");

                    b.Property<string>("RenrakuPost")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("RENRAKU_POST");

                    b.Property<string>("RenrakuTel")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("RENRAKU_TEL");

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    b.Property<string>("Setanusi")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("SETAINUSI");

                    b.Property<int>("Sex")
                        .HasColumnType("integer")
                        .HasColumnName("SEX");

                    b.Property<string>("Tel1")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("TEL1");

                    b.Property<string>("Tel2")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("TEL2");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<string>("Zokugara")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ZOKUGARA");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_INF");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtInfection", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Byomei")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("BYOMEI");

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("BYOMEI_CD");

                    b.Property<string>("ByotaiCd")
                        .HasColumnType("text")
                        .HasColumnName("BYOTAI_CD");

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_INFECTION");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtJibkar", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<int>("ByomeiKaiji")
                        .HasColumnType("integer")
                        .HasColumnName("BYOMEI_KAIJI");

                    b.Property<DateTime>("ByomeiUpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("BYOMEI_UPDATE_DATE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("KarteKaiji")
                        .HasColumnType("integer")
                        .HasColumnName("KARTE_KAIJI");

                    b.Property<DateTime>("KarteUpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("KARTE_UPDATE_DATE");

                    b.Property<int>("KensaKaiji")
                        .HasColumnType("integer")
                        .HasColumnName("KENSA_KAIJI");

                    b.Property<DateTime>("KensaUpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("KENSA_UPDATE_DATE");

                    b.Property<int>("OdrKaiji")
                        .HasColumnType("integer")
                        .HasColumnName("ODR_KAIJI");

                    b.Property<DateTime>("OdrUpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ODR_UPDATE_DATE");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<string>("WebId")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("WEB_ID");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_JIBKAR");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtKioReki", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Byomei")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("BYOMEI");

                    b.Property<string>("ByomeiCd")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("BYOMEI_CD");

                    b.Property<string>("ByotaiCd")
                        .HasColumnType("text")
                        .HasColumnName("BYOTAI_CD");

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_KIO_REKI");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtKohi", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<string>("FutansyaNo")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("FUTANSYA_NO");

                    b.Property<int>("GendoGaku")
                        .HasColumnType("integer")
                        .HasColumnName("GENDOGAKU");

                    b.Property<int>("HokenEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_EDA_NO");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID");

                    b.Property<int>("HokenNo")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_NO");

                    b.Property<int>("HokenSbtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_SBT_KBN");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("HOUBETU");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("JyukyusyaNo")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("JYUKYUSYA_NO");

                    b.Property<int>("KofuDate")
                        .HasColumnType("integer")
                        .HasColumnName("KOFU_DATE");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<int>("PrefNo")
                        .HasColumnType("integer")
                        .HasColumnName("PREF_NO");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("Rate")
                        .HasColumnType("integer")
                        .HasColumnName("RATE");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SikakuDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIKAKU_DATE");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<string>("TokusyuNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("TOKUSYU_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_KOHI");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtKyusei", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("KanaName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("KANA_NAME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NAME");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.HasIndex(new[] { "HpId", "PtId", "EndDate", "IsDeleted" }, "PT_KYUSEI_IDX01")
                        .HasDatabaseName("PT_KYUSEI_IDX011");

                    b.ToTable("Z_PT_KYUSEI");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtMemo", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("Memo")
                        .HasColumnType("text")
                        .HasColumnName("MEMO");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_MEMO");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtOtcDrug", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SerialNum")
                        .HasColumnType("integer")
                        .HasColumnName("SERIAL_NUM");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<string>("TradeName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("TRADE_NAME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_OTC_DRUG");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtOtherDrug", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<string>("DrugName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("DRUG_NAME");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_OTHER_DRUG");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtPregnancy", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<int>("OvulationDate")
                        .HasColumnType("integer")
                        .HasColumnName("OVULATION_DATE");

                    b.Property<int>("OvulationDueDate")
                        .HasColumnType("integer")
                        .HasColumnName("OVULATION_DUE_DATE");

                    b.Property<int>("PeriodDate")
                        .HasColumnType("integer")
                        .HasColumnName("PERIOD_DATE");

                    b.Property<int>("PeriodDueDate")
                        .HasColumnType("integer")
                        .HasColumnName("PERIOD_DUE_DATE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_PREGNANCY");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtRousaiTenki", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("Sinkei")
                        .HasColumnType("integer")
                        .HasColumnName("SINKEI");

                    b.Property<int>("Tenki")
                        .HasColumnType("integer")
                        .HasColumnName("TENKI");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_ROUSAI_TENKI");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtSanteiConf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("EDA_NO");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("KbnNo")
                        .HasColumnType("integer")
                        .HasColumnName("KBN_NO");

                    b.Property<int>("KbnVal")
                        .HasColumnType("integer")
                        .HasColumnName("KBN_VAL");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_SANTEI_CONF");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtSupple", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<string>("IndexCd")
                        .HasColumnType("text")
                        .HasColumnName("INDEX_CD");

                    b.Property<string>("IndexWord")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("INDEX_WORD");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_SUPPLE");
                });

            modelBuilder.Entity("Entity.Tenant.ZPtTag", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<int>("AlphablendVal")
                        .HasColumnType("integer")
                        .HasColumnName("ALPHABLEND_VAL");

                    b.Property<string>("BackgroundColor")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("BACKGROUND_COLOR");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<int>("FontSize")
                        .HasColumnType("integer")
                        .HasColumnName("FONTSIZE");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("HEIGHT");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsDspKaikei")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DSP_KAIKEI");

                    b.Property<int>("IsDspKarte")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DSP_KARTE");

                    b.Property<int>("IsDspRece")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DSP_RECE");

                    b.Property<int>("IsDspUketuke")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DSP_UKETUKE");

                    b.Property<int>("Left")
                        .HasColumnType("integer")
                        .HasColumnName("LEFT");

                    b.Property<string>("Memo")
                        .HasColumnType("text")
                        .HasColumnName("MEMO");

                    b.Property<byte[]>("MemoData")
                        .HasColumnType("bytea")
                        .HasColumnName("MEMO_DATA");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("StartDate")
                        .HasColumnType("integer")
                        .HasColumnName("START_DATE");

                    b.Property<int>("TagGrpCd")
                        .HasColumnType("integer")
                        .HasColumnName("TAG_GRP_CD");

                    b.Property<int>("Top")
                        .HasColumnType("integer")
                        .HasColumnName("TOP");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("WIDTH");

                    b.HasKey("OpId");

                    b.ToTable("Z_PT_TAG");
                });

            modelBuilder.Entity("Entity.Tenant.ZRaiinCmtInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<int>("CmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_KBN");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDelete")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETE");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<string>("Text")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_RAIIN_CMT_INF");
                });

            modelBuilder.Entity("Entity.Tenant.ZRaiinInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("ConfirmationResult")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("CONFIRMATION_RESULT");

                    b.Property<int>("ConfirmationState")
                        .HasColumnType("integer")
                        .HasColumnName("CONFIRMATION_STATE");

                    b.Property<int>("ConfirmationType")
                        .HasColumnType("integer")
                        .HasColumnName("CONFIRMATION_TYPE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HokenPid")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_PID");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<string>("InfoConsFlg")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("INFO_CONS_FLG");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsYoyaku")
                        .HasColumnType("integer")
                        .HasColumnName("IS_YOYAKU");

                    b.Property<int>("JikanKbn")
                        .HasColumnType("integer")
                        .HasColumnName("JIKAN_KBN");

                    b.Property<int>("KaId")
                        .HasColumnType("integer")
                        .HasColumnName("KA_ID");

                    b.Property<int>("KaikeiId")
                        .HasColumnType("integer")
                        .HasColumnName("KAIKEI_ID");

                    b.Property<string>("KaikeiTime")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("KAIKEI_TIME");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("OyaRaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("OYA_RAIIN_NO");

                    b.Property<int>("PrescriptionIssueType")
                        .HasColumnType("integer")
                        .HasColumnName("PRESCRIPTION_ISSUE_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("RaiinNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("RaiinNo"));

                    b.Property<int>("SanteiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SANTEI_KBN");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<string>("SinEndTime")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("SIN_END_TIME");

                    b.Property<string>("SinStartTime")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("SIN_START_TIME");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("STATUS");

                    b.Property<int>("SyosaisinKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SYOSAISIN_KBN");

                    b.Property<int>("TantoId")
                        .HasColumnType("integer")
                        .HasColumnName("TANTO_ID");

                    b.Property<int>("UketukeId")
                        .HasColumnType("integer")
                        .HasColumnName("UKETUKE_ID");

                    b.Property<int>("UketukeNo")
                        .HasColumnType("integer")
                        .HasColumnName("UKETUKE_NO");

                    b.Property<int>("UketukeSbt")
                        .HasColumnType("integer")
                        .HasColumnName("UKETUKE_SBT");

                    b.Property<string>("UketukeTime")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("UKETUKE_TIME");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.Property<int>("YoyakuId")
                        .HasColumnType("integer")
                        .HasColumnName("YOYAKU_ID");

                    b.Property<string>("YoyakuTime")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("YOYAKU_TIME");

                    b.HasKey("OpId");

                    b.ToTable("Z_RAIIN_INF");
                });

            modelBuilder.Entity("Entity.Tenant.ZRaiinKbnInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("GrpId")
                        .HasColumnType("integer")
                        .HasColumnName("GRP_ID");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDelete")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETE");

                    b.Property<int>("KbnCd")
                        .HasColumnType("integer")
                        .HasColumnName("KBN_CD");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_RAIIN_KBN_INF");
                });

            modelBuilder.Entity("Entity.Tenant.ZRaiinListCmt", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<int>("CmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_KBN");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO");

                    b.Property<long>("SeqNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<string>("Text")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_RAIIN_LIST_CMT");
                });

            modelBuilder.Entity("Entity.Tenant.ZRaiinListTag", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<int>("TagNo")
                        .HasColumnType("integer")
                        .HasColumnName("TAG_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_RAIIN_LIST_TAG");
                });

            modelBuilder.Entity("Entity.Tenant.ZReceCheckCmt", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsChecked")
                        .HasColumnType("integer")
                        .HasColumnName("IS_CHECKED");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsPending")
                        .HasColumnType("integer")
                        .HasColumnName("IS_PENDING");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_RECE_CHECK_CMT");
                });

            modelBuilder.Entity("Entity.Tenant.ZReceCmt", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Cmt")
                        .HasColumnType("text")
                        .HasColumnName("CMT");

                    b.Property<string>("CmtData")
                        .HasMaxLength(38)
                        .HasColumnType("character varying(38)")
                        .HasColumnName("CMT_DATA");

                    b.Property<int>("CmtKbn")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_KBN");

                    b.Property<int>("CmtSbt")
                        .HasColumnType("integer")
                        .HasColumnName("CMT_SBT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_RECE_CMT");
                });

            modelBuilder.Entity("Entity.Tenant.ZReceInfEdit", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID");

                    b.Property<int?>("HokenNissu")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_NISSU");

                    b.Property<int?>("HokenReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_RECE_FUTAN");

                    b.Property<int?>("HokenReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_RECE_TENSU");

                    b.Property<string>("Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("HOUBETU");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("Kohi1Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI1_HOUBETU");

                    b.Property<int?>("Kohi1Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_NISSU");

                    b.Property<int?>("Kohi1ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_RECE_FUTAN");

                    b.Property<int?>("Kohi1ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_RECE_KYUFU");

                    b.Property<int?>("Kohi1ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI1_RECE_TENSU");

                    b.Property<string>("Kohi2Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI2_HOUBETU");

                    b.Property<int?>("Kohi2Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_NISSU");

                    b.Property<int?>("Kohi2ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_RECE_FUTAN");

                    b.Property<int?>("Kohi2ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_RECE_KYUFU");

                    b.Property<int?>("Kohi2ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI2_RECE_TENSU");

                    b.Property<string>("Kohi3Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI3_HOUBETU");

                    b.Property<int?>("Kohi3Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_NISSU");

                    b.Property<int?>("Kohi3ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_RECE_FUTAN");

                    b.Property<int?>("Kohi3ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_RECE_KYUFU");

                    b.Property<int?>("Kohi3ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI3_RECE_TENSU");

                    b.Property<string>("Kohi4Houbetu")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("KOHI4_HOUBETU");

                    b.Property<int?>("Kohi4Nissu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_NISSU");

                    b.Property<int?>("Kohi4ReceFutan")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_RECE_FUTAN");

                    b.Property<int?>("Kohi4ReceKyufu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_RECE_KYUFU");

                    b.Property<int?>("Kohi4ReceTensu")
                        .HasColumnType("integer")
                        .HasColumnName("KOHI4_RECE_TENSU");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<string>("ReceSbt")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("RECE_SBT");

                    b.Property<int>("SeikyuYm")
                        .HasColumnType("integer")
                        .HasColumnName("SEIKYU_YM");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM");

                    b.Property<string>("Tokki")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI");

                    b.Property<string>("Tokki1")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI1");

                    b.Property<string>("Tokki2")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI2");

                    b.Property<string>("Tokki3")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI3");

                    b.Property<string>("Tokki4")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI4");

                    b.Property<string>("Tokki5")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("TOKKI5");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_RECE_INF_EDIT");
                });

            modelBuilder.Entity("Entity.Tenant.ZReceSeikyu", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Cmt")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CMT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<int>("PreHokenId")
                        .HasColumnType("integer")
                        .HasColumnName("PRE_HOKEN_ID");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SeikyuKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SEIKYU_KBN");

                    b.Property<int>("SeikyuYm")
                        .HasColumnType("integer")
                        .HasColumnName("SEIKYU_YM");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_RECE_SEIKYU");
                });

            modelBuilder.Entity("Entity.Tenant.ZRsvDayComment", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("COMMENT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_RSV_DAY_COMMENT");
                });

            modelBuilder.Entity("Entity.Tenant.ZRsvInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("KaId")
                        .HasColumnType("integer")
                        .HasColumnName("KA_ID");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO");

                    b.Property<int>("RsvFrameId")
                        .HasColumnType("integer")
                        .HasColumnName("RSV_FRAME_ID");

                    b.Property<int>("RsvSbt")
                        .HasColumnType("integer")
                        .HasColumnName("RSV_SBT");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<int>("StartTime")
                        .HasColumnType("integer")
                        .HasColumnName("START_TIME");

                    b.Property<int>("TantoId")
                        .HasColumnType("integer")
                        .HasColumnName("TANTO_ID");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_RSV_INF");
                });

            modelBuilder.Entity("Entity.Tenant.ZSanteiInfDetail", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Byomei")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("BYOMEI");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("COMMENT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("EndDate")
                        .HasColumnType("integer")
                        .HasColumnName("END_DATE");

                    b.Property<string>("HosokuComment")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("HOSOKU_COMMENT");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("ItemCd")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ITEM_CD");

                    b.Property<int>("KisanDate")
                        .HasColumnType("integer")
                        .HasColumnName("KISAN_DATE");

                    b.Property<int>("KisanSbt")
                        .HasColumnType("integer")
                        .HasColumnName("KISAN_SBT");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_SANTEI_INF_DETAIL");
                });

            modelBuilder.Entity("Entity.Tenant.ZSeikaturekiInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_SEIKATUREKI_INF");
                });

            modelBuilder.Entity("Entity.Tenant.ZSummaryInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<byte[]>("Rtext")
                        .HasColumnType("bytea")
                        .HasColumnName("RTEXT");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_SUMMARY_INF");
                });

            modelBuilder.Entity("Entity.Tenant.ZSyobyoKeika", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("Keika")
                        .HasColumnType("text")
                        .HasColumnName("KEIKA");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SinDay")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DAY");

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_SYOBYO_KEIKA");
                });

            modelBuilder.Entity("Entity.Tenant.ZSyoukiInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HokenId")
                        .HasColumnType("integer")
                        .HasColumnName("HOKEN_ID");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<int>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeqNo"));

                    b.Property<int>("SinYm")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_YM");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<string>("Syouki")
                        .HasColumnType("text")
                        .HasColumnName("SYOUKI");

                    b.Property<int>("SyoukiKbn")
                        .HasColumnType("integer")
                        .HasColumnName("SYOUKI_KBN");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_SYOUKI_INF");
                });

            modelBuilder.Entity("Entity.Tenant.ZSyunoNyukin", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<int>("AdjustFutan")
                        .HasColumnType("integer")
                        .HasColumnName("ADJUST_FUTAN");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<string>("NyukinCmt")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NYUKIN_CMT");

                    b.Property<int>("NyukinDate")
                        .HasColumnType("integer")
                        .HasColumnName("NYUKIN_DATE");

                    b.Property<int>("NyukinGaku")
                        .HasColumnType("integer")
                        .HasColumnName("NYUKIN_GAKU");

                    b.Property<string>("NyukinjiDetail")
                        .HasColumnType("text")
                        .HasColumnName("NYUKINJI_DETAIL");

                    b.Property<int>("NyukinjiSeikyu")
                        .HasColumnType("integer")
                        .HasColumnName("NYUKINJI_SEIKYU");

                    b.Property<int>("NyukinjiTensu")
                        .HasColumnType("integer")
                        .HasColumnName("NYUKINJI_TENSU");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<int>("PaymentMethodCd")
                        .HasColumnType("integer")
                        .HasColumnName("PAYMENT_METHOD_CD");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO");

                    b.Property<long>("SeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SEQ_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SeqNo"));

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<int>("SortNo")
                        .HasColumnType("integer")
                        .HasColumnName("SORT_NO");

                    b.Property<int>("UketukeSbt")
                        .HasColumnType("integer")
                        .HasColumnName("UKETUKE_SBT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.HasIndex(new[] { "HpId", "PtId", "SinDate", "RaiinNo", "IsDeleted" }, "SYUNO_NYUKIN_IDX01");

                    b.ToTable("Z_SYUNO_NYUKIN");
                });

            modelBuilder.Entity("Entity.Tenant.ZTodoInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<string>("Cmt1")
                        .HasColumnType("text")
                        .HasColumnName("CMT1");

                    b.Property<string>("Cmt2")
                        .HasColumnType("text")
                        .HasColumnName("CMT2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DELETED");

                    b.Property<int>("IsDone")
                        .HasColumnType("integer")
                        .HasColumnName("IS_DONE");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<long>("PtId")
                        .HasColumnType("bigint")
                        .HasColumnName("PT_ID");

                    b.Property<long>("RaiinNo")
                        .HasColumnType("bigint")
                        .HasColumnName("RAIIN_NO");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<int>("Tanto")
                        .HasColumnType("integer")
                        .HasColumnName("TANTO");

                    b.Property<int>("Term")
                        .HasColumnType("integer")
                        .HasColumnName("TERM");

                    b.Property<int>("TodoEdaNo")
                        .HasColumnType("integer")
                        .HasColumnName("TODO_EDA_NO");

                    b.Property<int>("TodoGrpNo")
                        .HasColumnType("integer")
                        .HasColumnName("TODO_GRP_NO");

                    b.Property<int>("TodoKbnNo")
                        .HasColumnType("integer")
                        .HasColumnName("TODO_KBN_NO");

                    b.Property<int>("TodoNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TODO_NO");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TodoNo"));

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<int>("UpdateId")
                        .HasColumnType("integer")
                        .HasColumnName("UPDATE_ID");

                    b.Property<string>("UpdateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("UPDATE_MACHINE");

                    b.HasKey("OpId");

                    b.ToTable("Z_TODO_INF");
                });

            modelBuilder.Entity("Entity.Tenant.ZUketukeSbtDayInf", b =>
                {
                    b.Property<long>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OP_ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OpId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("CreateId")
                        .HasColumnType("integer")
                        .HasColumnName("CREATE_ID");

                    b.Property<string>("CreateMachine")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("CREATE_MACHINE");

                    b.Property<int>("HpId")
                        .HasColumnType("integer")
                        .HasColumnName("HP_ID");

                    b.Property<string>("OpAddr")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_ADDR");

                    b.Property<string>("OpHostName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("OP_HOSTNAME");

                    b.Property<DateTime>("OpTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OP_TIME");

                    b.Property<string>("OpType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("OP_TYPE");

                    b.Property<int>("SeqNo")
                        .HasColumnType("integer")
                        .HasColumnName("SEQ_NO");

                    b.Property<int>("SinDate")
                        .HasColumnType("integer")
                        .HasColumnName("SIN_DATE");

                    b.Property<int>("UketukeSbt")
                        .HasColumnType("integer")
                        .HasColumnName("UKETUKE_SBT");

                    b.HasKey("OpId");

                    b.ToTable("Z_UKETUKE_SBT_DAY_INF");
                });
#pragma warning restore 612, 618
        }
    }
}
